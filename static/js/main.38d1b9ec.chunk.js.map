{"version":3,"sources":["images/playing-with-polygons-logo.gif","images/playing-with-polygons-animated-logo-redraw-background.gif","images/playing-with-polygons-animated-logo-faded-background.gif","images/polygon-rotating.gif","images/polygon-scaling.gif","images/polygon-rotating-and-scaling.gif","images/playing-with-polygons-animated-logo.gif","rotating-ring.svg","serviceWorker.ts","reducer-contexts/navigation.tsx","common-styled-components/StyledButton.tsx","components/IntroScreen.tsx","components/P5Canvas.tsx","reducer-contexts/polygon-groups.tsx","reducer-contexts/background.tsx","components/ModalBox.tsx","polygon-logic/polygon-animation-calculation.tsx","polygon-logic/polygon-p5-draw.tsx","components/Slider.tsx","components/ShareGifModal.tsx","components/ToggleSwitch.tsx","components/EditBackgroundModal.tsx","components/MainCanvas.tsx","common-styled-components/Navigation.tsx","common-styled-components/MainContent.tsx","components/ViewScreen.tsx","components/CoordinatePicker.tsx","components/GroupsEditor.tsx","components/GroupEditorScreen.tsx","components/MultiSlider.tsx","components/ColourPicker.tsx","components/PolygonEditor.tsx","components/PolygonEditorScreen.tsx","components/App.tsx","components/Screens.tsx","index.tsx"],"names":["module","exports","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","console","log","onUpdate","onSuccess","catch","error","navigationReducer","produce","draft","action","type","currentScreen","currentGroup","currentPolygon","navigationInitialState","NavigationContextWrapper","children","useReducer","dispatch","navigationDispatchContext","Provider","value","navigationStateContext","createContext","StyledButton","styled","button","BigCenteredButton","WrappingDiv","div","ContentDiv","IntroScreen","navigationDispatch","useContext","alt","src","logo","onClick","fadedBackgroundLogo","redrawBackgroundLogo","rotatingPolygon","scalingPolygon","rotatingAndScalingPolygon","href","role","aria-label","animatedLogo","P5Canvas","sketch","className","divRef","useRef","P5Ref","useEffect","node","current","undefined","remove","delay","setTimeout","p5Instance","p5","clearTimeout","ref","getDraftUpdatedByOptions","options","newState","original","Object","keys","forEach","option","getRandomArbitrary","min","max","Math","random","getRandomIntInclusive","ceil","floor","getRandomRGB","h","s","l","r","g","b","hue2rgb","p","q","t","round","hslToRgb","componentToHex","c","hex","toString","length","rgbToHex","getRandomColoursForPolygon","amountOfSides","amountOfColours","Array","map","getRandomSides","sidesAmount","enabled","strokeWidth","amount","colours","getRandomDots","fillColours","size","strokeColours","getRandomRotation","clockwise","speed","startingRotation","getRandomScale","range","startingSize","getRandomEnabled","randomNumber","sidesEnabled","dotsEnabled","rotationEnabled","scaleEnabled","getRandomPolygon","active","position","x","y","sides","dots","rotation","scale","createRandomPolygonRings","amountOfRings","polygonGroupsReducer","push","rings","group","draftPolygon","polygon","polygonState","draftRings","originalDraft","totalGroups","splice","polygonGroupsInitialState","polygonGroupsInit","newPolygon","jest","PolygonGroupsContextWrapper","polygonGroupsDispatchContext","polygonGroupsStateContext","backgroundReducer","opacity","shouldRedraw","hexColour","convertedHex","result","exec","parseInt","hexToRgb","rgb","rgba","backgroundInitialState","BackgroundContextWrapper","backgroundDispatchContext","backgroundStateContext","ScreenReaderOnly","span","ModalDiv","ModalTitleBarDv","ModelBackgroundDiv","focusChildInput","first","parent","childrenInputs","from","getElementsByTagName","childrenButtons","modalElements","focus","ModalBox","buttonText","title","isClosed","setIsClosed","useState","lastFocus","setLastFocus","openButtonRef","modalRef","closeModal","event","key","lockFocus","modal","contains","document","activeElement","removeEventListener","addEventListener","hidden","aria-labelledby","aria-modal","id","PolygonAnimationCalculation","style","animationState","animationConstants","this","getInitialStyles","getInitialConstants","getInitialState","angleBetweenPoints","PI","currentAngle","cos","sin","isActive","isRotating","isScaling","isRotatingClockwise","rotationSpeed","scalingSpeed","scalingRange","polygonPoints","getInitialPoints","currentlyExpanding","currentRotation","currentSize","newRotation","updatedSize","updatedCurrentlyExpanding","newPolygonPoints","point","newPoint","dotPositions","sidesPositions","index","nextPoint","nextIndex","positions","currentFrame","getPolygonFrame","updateScale","updateRotation","getSizeConstrainedCords","cords","width","height","singlePolygonDraw","polygonAnimation","translate","rotate","stokeColour","stroke","strokeWeight","line","fillColourIndex","stokeColourIndex","fill","ellipse","pop","generatePolygonRingSketch","polygonRing","windowSize","rgbaBackgroundColour","rgbBackgroundColour","shouldRedrawBackground","polygonRingInstance","setup","createCanvas","background","frameRate","draw","angleMode","getPolygonFrameAndStep","generatePolygonGroupSketch","polygonGroup","polygonRingInstances","generateAllPolygonRingGroupsSketch","polygonGroups","polygonGroupInstances","polygonGroupRings","generateGifSketch","gifClass","recordingLength","isRecording","frameCount","render","getElementById","addFrame","copy","SliderLabel","label","styleHeight","css","SliderInputRange","input","props","Slider","currentValue","vertical","setFunction","valueSuffix","hideValue","verticalHeight","htmlFor","onChange","currentTarget","convertedValue","Number","isNaN","GifModalInternalWrappingForm","form","GifCanvas","GifNameInput","gifOptions","workers","quality","workerScript","dither","gif","GIF","GenerateGifModal","editModalIsClosed","setEditModalIsClosed","polygonContext","backgroundState","setRecordingLength","currentProgress","setCurrentProgress","gifGenerationMode","setGifGenerationMode","startGenerating","setStartGenerating","renderHasStarted","setRenderHasStarted","renderFinished","setRenderFinished","gifFile","setGifFile","progressHandler","progression","roundedProgression","startHandler","starting","abortHandler","aborting","finishedHandler","finishedBlob","on","abort","removeListener","onSubmit","preventDefault","imgSrc","URL","createObjectURL","GifSaveOptions","saveFileName","setSaveFileName","minLength","download","trim","replace","toLocaleLowerCase","data-related","data-dnt","data-show-count","CheckboxInput","checkedText","svgBackground","transformFlip","svgBackgroundCss","unchecked","checked","ToggleSwitch","ModalInternalWrappingForm","ColourPickerInput","EditBackgroundModal","backgroundDispatch","canUpdate","setCanUpdate","setShouldRedrawBackground","backgroundHex","setBackgroundHex","backgroundOpacity","setBackgroundOpacity","disabled","MainCanvasWrapper","generateKey","containerSize","polygonGroupLength","polygonRingLengths","join","polygonRingRotations","ring","MainCanvas","setCurrentSize","mainWrapper","offsetHeight","offsetWidth","updateCanvasSize","timeoutId","throttledWindowUpdate","Navigation","nav","MainContent","ViewScreen","CoordinatePickerWrappingDiv","YSliderWrappingDiv","XSliderWrappingDiv","XSlider","CoordinatePositionsDiv","CoordinatePanelDiv","CoordinateThumbDiv","updateThumbPosition","coordinatePanel","scrollingParentRef","setXFunction","setYFunction","diffX","offsetLeft","diffY","offsetTop","scrollTop","newX","newY","getNewValueForRange","oldValue","oldMin","oldMax","newMin","newMax","CoordinatePicker","currentY","currentX","yToTopPosition","xToTopPosition","positionStyles","top","right","pageX","clientX","pageY","clientY","stopPropagation","onPointerDown","pointerDownEvent","elementClassList","classList","pointerMove","pointerMoveEvent","pointerType","handleTouchMove","touchMoveEvent","touches","add","cleanUpEvents","handleThumbDrag","GroupsUl","ul","GroupsLi","li","AddGroupButton","GroupCanvasGroupDiv","CanvasWrappingDiv","GroupCanvas","GroupDeleteButton","UpdateCoordinateButton","GroupCoordinateModal","groupIndex","polygonGroupsDispatch","setX","setY","GroupsEditor","polygonGroupsState","totalPolygonGroups","isLastPolygonGroup","Fragment","polygonRings","groupNumber","RingsUl","RingsLi","RingCanvasDiv","RingCanvas","RingEditButton","RingRandomizeButton","RingDeleteButton","PolygonRingsDisplay","totalPolygons","polygonIndex","isLastPolygon","GroupEditorScreen","sliderReducer","currentMax","currentMin","increaseCurrent","toUpdate","noMoreThan","decreaseCurrent","noLessThan","constrainValue","isMinThumb","newValue","SliderWrappingDiv","SliderValueDiv","area","SliderLabelP","SliderRailDiv","SliderRailThumbDiv","sliderDispatch","sliderRailRef","sliderState","minNewValue","maxNewValue","left","onKeyDown","dispatchChange","handlePointerMove","handelCleanUp","handlePointerDrag","onFocus","onBlur","tabIndex","aria-valuemin","aria-valuenow","aria-valuetext","aria-valuemax","SliderRailThumbDivMin","SliderRailThumbDivMax","MultiSlider","sliderReducerDispatch","ColourPickerWrapperDiv","ColourPickerWrapperUl","ColourPickerLi","ColourPickerLabel","ColourPickerDeleteButton","ColourPickerAddButton","ColourPicker","maxColours","colour","substr","defaultValue","newColours","PolygonPageWrappingDiv","PolygonCanvasWrappingDiv","PolygonOptionsOverflowDiv","PolygonCanvas","PolygonCanvasButtonDiv","ShorterSlider","PolygonEditor","navigationState","scrollingElementRef","showGroup","setShowGroup","polygonToDisplay","PolygonCardForm","PolygonCardHeadingWrappingDiv","PolygonCardH2","h2","PolygonCardUpdateNoticeSpan","PolygonCardButtonContainingDiv","PolygonControlsWrapper","updateDispatch","randomizeDispatch","PolygonRotationControls","setRotationSpeed","setStartingRotation","setEnabled","setClockwise","rotatingDirection","PolygonScaleControls","setSpeed","setStartingSize","rangeInitialState","rangeState","rangeDispatch","PolygonDotsControls","setSize","setStrokeWidth","setFillColours","setStrokeColours","PolygonSidesControls","setAmount","setColours","PolygonPositionControls","PolygonEditorScreen","Main","main","AnimationWrappingScreens","currentChild","transitions","useTransition","item","transform","enter","leave","React","Children","child","App","INFO_SCREEN","WATCH_SCREEN","GROUP_SCREEN","POLYGON_SCREEN","ReactDOM","StrictMode","process","origin","fetch","headers","response","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.38d1b9ec.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/playing-with-polygons-logo.0b998246.gif\";","module.exports = __webpack_public_path__ + \"static/media/playing-with-polygons-animated-logo-redraw-background.89089f99.gif\";","module.exports = __webpack_public_path__ + \"static/media/playing-with-polygons-animated-logo-faded-background.8d4fab3b.gif\";","module.exports = __webpack_public_path__ + \"static/media/polygon-rotating.b47dc058.gif\";","module.exports = __webpack_public_path__ + \"static/media/polygon-scaling.df17a577.gif\";","module.exports = __webpack_public_path__ + \"static/media/polygon-rotating-and-scaling.934716d6.gif\";","module.exports = __webpack_public_path__ + \"static/media/playing-with-polygons-animated-logo.de8fbc4a.gif\";","module.exports = __webpack_public_path__ + \"static/media/rotating-ring.6b2af75b.svg\";","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === \"localhost\" ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === \"[::1]\" ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n)\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void\n  onUpdate?: (registration: ServiceWorkerRegistration) => void\n}\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href)\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return\n    }\n\n    window.addEventListener(\"load\", () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config)\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            \"This web app is being served cache-first by a service \" +\n              \"worker. To learn more, visit https://bit.ly/CRA-PWA\"\n          )\n        })\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config)\n      }\n    })\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing\n        if (installingWorker == null) {\n          return\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === \"installed\") {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                \"New content is available and will be used when all \" +\n                  \"tabs for this page are closed. See https://bit.ly/CRA-PWA.\"\n              )\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration)\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log(\"Content is cached for offline use.\")\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration)\n              }\n            }\n          }\n        }\n      }\n    })\n    .catch((error) => {\n      console.error(\"Error during service worker registration:\", error)\n    })\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { \"Service-Worker\": \"script\" },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get(\"content-type\")\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf(\"javascript\") === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload()\n          })\n        })\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config)\n      }\n    })\n    .catch(() => {\n      console.log(\n        \"No internet connection found. App is running in offline mode.\"\n      )\n    })\n}\n\nexport function unregister() {\n  if (\"serviceWorker\" in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister()\n      })\n      .catch((error) => {\n        console.error(error.message)\n      })\n  }\n}\n","import React, { useReducer, createContext } from \"react\"\r\nimport produce, { Draft } from \"immer\"\r\n\r\nexport interface NavigationState {\r\n  currentScreen:\r\n    | \"WATCH_SCREEN\"\r\n    | \"GROUP_SCREEN\"\r\n    | \"POLYGON_SCREEN\"\r\n    | \"INFO_SCREEN\"\r\n  currentGroup: number\r\n  currentPolygon: number\r\n}\r\ninterface InfoScreen {\r\n  type: \"INFO_SCREEN\"\r\n}\r\ninterface MainScreen {\r\n  type: \"WATCH_SCREEN\"\r\n}\r\ninterface GroupScreen {\r\n  type: \"GROUP_SCREEN\"\r\n}\r\ninterface PolygonScreen {\r\n  type: \"POLYGON_SCREEN\"\r\n  currentGroup: number\r\n  currentPolygon: number\r\n}\r\n\r\nexport type NavigationActions =\r\n  | MainScreen\r\n  | GroupScreen\r\n  | PolygonScreen\r\n  | InfoScreen\r\n\r\nexport const navigationReducer = produce(\r\n  (draft: Draft<NavigationState>, action: NavigationActions) => {\r\n    switch (action.type) {\r\n      case \"INFO_SCREEN\":\r\n      case \"WATCH_SCREEN\":\r\n      case \"GROUP_SCREEN\": {\r\n        draft.currentScreen = action.type\r\n        break\r\n      }\r\n      case \"POLYGON_SCREEN\": {\r\n        draft.currentScreen = action.type\r\n        draft.currentGroup = action.currentGroup\r\n        draft.currentPolygon = action.currentPolygon\r\n        break\r\n      }\r\n    }\r\n  }\r\n)\r\n\r\nexport const navigationInitialState: NavigationState = {\r\n  currentScreen: \"INFO_SCREEN\",\r\n  currentGroup: 0,\r\n  currentPolygon: 0,\r\n}\r\n\r\nexport const NavigationContextWrapper: React.FC = ({ children }) => {\r\n  const [state, dispatch] = useReducer(\r\n    navigationReducer,\r\n    navigationInitialState\r\n  )\r\n\r\n  return (\r\n    <navigationDispatchContext.Provider value={dispatch}>\r\n      <navigationStateContext.Provider value={state}>\r\n        {children}\r\n      </navigationStateContext.Provider>\r\n    </navigationDispatchContext.Provider>\r\n  )\r\n}\r\n\r\nexport const navigationDispatchContext = createContext(\r\n  {} as React.Dispatch<NavigationActions>\r\n)\r\nexport const navigationStateContext = createContext({} as NavigationState)\r\n","import styled from \"styled-components\"\r\n\r\nexport const StyledButton = styled.button`\r\n  min-height: 50px;\r\n  border-radius: 5px;\r\n  margin: 5px;\r\n  background: Gainsboro;\r\n  border: solid 2px silver;\r\n  color: #595959;\r\n  font-size: 18px;\r\n  cursor: pointer;\r\n\r\n  &:focus,\r\n  &:hover {\r\n    outline: none;\r\n    border: solid 2px lightgrey;\r\n    background: dimgrey;\r\n    color: snow;\r\n  }\r\n\r\n  &:active {\r\n    border: solid 2px snow;\r\n  }\r\n\r\n  &:disabled {\r\n    border: solid 2px silver;\r\n    background: #f8f8f8;\r\n    color: #6e6e6e;\r\n    cursor: not-allowed;\r\n  }\r\n`\r\n","import React, { useContext } from \"react\"\r\n\r\nimport styled from \"styled-components\"\r\n\r\nimport { navigationDispatchContext } from \"reducer-contexts/navigation\"\r\n\r\nimport { StyledButton } from \"common-styled-components/StyledButton\"\r\n\r\nimport logo from \"images/playing-with-polygons-logo.gif\"\r\nimport redrawBackgroundLogo from \"../images/playing-with-polygons-animated-logo-redraw-background.gif\"\r\nimport fadedBackgroundLogo from \"../images/playing-with-polygons-animated-logo-faded-background.gif\"\r\nimport rotatingPolygon from \"../images/polygon-rotating.gif\"\r\nimport scalingPolygon from \"../images/polygon-scaling.gif\"\r\nimport rotatingAndScalingPolygon from \"../images/polygon-rotating-and-scaling.gif\"\r\nimport animatedLogo from \"../images/playing-with-polygons-animated-logo.gif\"\r\n\r\nconst BigCenteredButton = styled(StyledButton)`\r\n  margin: 20px auto;\r\n  display: block;\r\n  width: 80%;\r\n`\r\n\r\nconst WrappingDiv = styled.div`\r\n  overflow-y: scroll;\r\n  background: whitesmoke;\r\n`\r\n\r\nconst ContentDiv = styled.div`\r\n  max-width: 600px;\r\n  margin: 10px auto;\r\n  padding: 10px;\r\n  font-size: 18px;\r\n  background: white;\r\n  border-radius: 10px;\r\n  box-shadow: 1px 1px 5px dimgrey;\r\n\r\n  & img {\r\n    display: block;\r\n    margin: 0 auto;\r\n  }\r\n  p {\r\n    margin: 10px;\r\n  }\r\n  strong {\r\n    font-weight: bold;\r\n  }\r\n  em {\r\n    font-style: italic;\r\n  }\r\n  h1,\r\n  h2,\r\n  h3 {\r\n    text-align: center;\r\n\r\n    font-weight: bold;\r\n  }\r\n  h1 {\r\n    font-size: 30px;\r\n    margin: 20px;\r\n  }\r\n  h2 {\r\n    font-size: 25px;\r\n    margin: 15px;\r\n  }\r\n  h3 {\r\n    font-size: 20px;\r\n  }\r\n`\r\n\r\nexport const IntroScreen = () => {\r\n  const navigationDispatch = useContext(navigationDispatchContext)\r\n  return (\r\n    <WrappingDiv>\r\n      <ContentDiv>\r\n        <h1>Playing With Polygons</h1>\r\n        <img alt=\"Playing with Polygons Logo\" src={logo} />\r\n        <p>Welcome to my little polygon art project!</p>\r\n        <p>\r\n          Scroll to Learn a bit about about the app, or just drive straight in\r\n          by pressing <strong>START!</strong>\r\n        </p>\r\n        <BigCenteredButton\r\n          type=\"button\"\r\n          onClick={() => {\r\n            navigationDispatch({ type: \"WATCH_SCREEN\" })\r\n          }}\r\n        >\r\n          START!\r\n        </BigCenteredButton>\r\n        <h2>Tips and Tricks</h2>\r\n        <p>\r\n          Here are some basic tips that I hope will help you make something!\r\n        </p>\r\n        <h3>Background</h3>\r\n        <p>\r\n          By default the background will redraw with an opacity, this will cause\r\n          a trailing image when the polygons move. Adjusting the opacity will\r\n          change how much <em>trail/blur</em> is left behind.\r\n        </p>\r\n        <img alt=\"polygon with fading background\" src={fadedBackgroundLogo} />\r\n        <p>\r\n          The <em>Redraw Background</em> option in{\" \"}\r\n          <strong>Edit Background</strong> will cause the polygon to paint. This\r\n          creates the most interesting patterns when its left to run.\r\n        </p>\r\n        <img alt=\"polygon with drawing background\" src={redrawBackgroundLogo} />\r\n        <h3>Polygon Animation</h3>\r\n        <p>\r\n          Polygons move in two main ways. <strong>Rotation</strong> and{\" \"}\r\n          <strong>Scaling</strong>\r\n        </p>\r\n        <p>\r\n          <strong>Rotation</strong> can be either clockwise or anti-clockwise.\r\n          But you will find the most interesting changes when you adjust its\r\n          speed.\r\n        </p>\r\n        <img alt=\"Rotating Polygon\" src={rotatingPolygon} />\r\n        <p>\r\n          <strong>Scaling</strong> like the rotation is an endless cycle. And\r\n          causes the polygon to scale between a maximum and a minimum size.\r\n        </p>\r\n        <img alt=\"Scaling Polygon\" src={scalingPolygon} />\r\n        <p>\r\n          For the most interesting results you can combine scaling and rotation\r\n          together.\r\n        </p>\r\n        <img\r\n          alt=\"Rotating and Scaling Polygon\"\r\n          src={rotatingAndScalingPolygon}\r\n        />\r\n        <h3>Making GIF's or JIF's</h3>\r\n        <p>\r\n          You can make and download a gif by pressing the{\" \"}\r\n          <strong>Make Gif</strong> button. Just be aware that the longer the\r\n          gif is, the longer it will take to make.\r\n        </p>\r\n        <p>\r\n          If you're on a phone I would recommend creating short gif's. But you\r\n          can make them 10 seconds long if you don't mind the wait.\r\n        </p>\r\n        <p>\r\n          If you do make anything you want to share on twitter, be sure to\r\n          include <em>@PlayingPolygons</em> to share with the{\" \"}\r\n          <a href=\"https://twitter.com/PlayingPolygons\">\r\n            Playing With Polygons Twitter\r\n          </a>\r\n        </p>\r\n        <h2>Playing with Polygons Across the Web</h2>\r\n        <p>\r\n          If you want to see the code behind this app, or you want to raise an\r\n          issue. Check out the{\" \"}\r\n          <a href=\"https://github.com/LiamMyles/playing-with-polygons\">\r\n            Playing with Polygons Github page\r\n          </a>\r\n        </p>\r\n        <p>\r\n          If twitter is more of your thing, why not check out the{\" \"}\r\n          <a href=\"https://twitter.com/PlayingPolygons\">\r\n            Playing with Polygons Twitter account\r\n          </a>\r\n          . Hopefully there will be gif's on their to help inspire you.\r\n        </p>\r\n        <h2>About Me</h2>\r\n        <p>\r\n          Hi, I'm Liam{\" \"}\r\n          <span role=\"img\" aria-label=\"Waving Hand\">\r\n            👋\r\n          </span>\r\n          , thanks for checking out my little app! I hope it brings you a tiny\r\n          bit of joy.\r\n        </p>\r\n        <p>\r\n          I'm just another bearded, white, cis-male, tech person. But I love the\r\n          web, and how accessible it is to so many people.\r\n        </p>\r\n        <p>\r\n          If you want to know more about me, you can check{\" \"}\r\n          <a href=\"https://twitter.com/LiamMyles92\">my Twitter account</a> to\r\n          see what I'm up to.\r\n        </p>\r\n        <p>\r\n          Also, while I have done my best to make this app as accessible as\r\n          possible, if you have anything you notice I can improve please do\r\n          reach out!\r\n        </p>\r\n        <h2>The Next Step</h2>\r\n        <img alt=\"Animated Playing with Polygons Logo\" src={animatedLogo} />\r\n        <BigCenteredButton\r\n          type=\"button\"\r\n          onClick={() => {\r\n            navigationDispatch({ type: \"WATCH_SCREEN\" })\r\n          }}\r\n        >\r\n          MAKE POLYGON ART!\r\n        </BigCenteredButton>\r\n      </ContentDiv>\r\n    </WrappingDiv>\r\n  )\r\n}\r\n","import React, { useEffect, useRef } from \"react\"\r\nimport p5 from \"p5\"\r\nimport { P5 } from \"types/p5\"\r\n\r\ninterface P5CanvasProps {\r\n  sketch: (p5: P5) => void\r\n  className?: string\r\n}\r\n\r\nexport const P5Canvas: React.FC<P5CanvasProps> = ({ sketch, className }) => {\r\n  const divRef = useRef<HTMLDivElement>(null)\r\n  const P5Ref = useRef<P5>()\r\n\r\n  useEffect(() => {\r\n    const node = divRef.current as HTMLDivElement\r\n    if (P5Ref.current !== undefined) {\r\n      P5Ref.current.remove()\r\n    }\r\n    //Add delay to help handle any excess renders\r\n    const delay = setTimeout(() => {\r\n      const p5Instance = new p5(sketch, node)\r\n      P5Ref.current = p5Instance\r\n    }, 100)\r\n\r\n    return () => {\r\n      clearTimeout(delay)\r\n      if (P5Ref?.current) {\r\n        const P5Instance = P5Ref.current as P5\r\n        P5Instance.remove()\r\n      }\r\n    }\r\n  }, [P5Ref, divRef, sketch])\r\n\r\n  return <div ref={divRef} className={className} />\r\n}\r\n","import React, { useReducer, createContext } from \"react\"\r\nimport produce, { Draft, original } from \"immer\"\r\n\r\nexport interface Cords {\r\n  x: number\r\n  y: number\r\n}\r\n\r\nexport interface PolygonRingRotation {\r\n  enabled: boolean\r\n  clockwise: boolean\r\n  speed: number\r\n  startingRotation: number\r\n}\r\n\r\nexport interface PolygonRingScale {\r\n  enabled: boolean\r\n  speed: number\r\n  range: {\r\n    min: number\r\n    max: number\r\n  }\r\n  startingSize: number\r\n}\r\n\r\nexport interface PolygonRingDots {\r\n  enabled: boolean\r\n  size: number\r\n  fillColours: string[]\r\n  strokeColours: string[]\r\n  strokeWidth: number\r\n}\r\nexport interface PolygonRingSides {\r\n  enabled: boolean\r\n  amount: number\r\n  strokeWidth: number\r\n  colours: string[]\r\n}\r\n\r\nexport interface PolygonRing {\r\n  active: boolean\r\n  position: Cords\r\n  rotation: PolygonRingRotation\r\n  scale: PolygonRingScale\r\n  dots: PolygonRingDots\r\n  sides: PolygonRingSides\r\n}\r\n\r\nexport interface PolygonGroup {\r\n  active: boolean\r\n  position: Cords\r\n  rings: PolygonRing[]\r\n}\r\n\r\ninterface ActionCreateGroup {\r\n  type: \"CREATE_POLYGON_GROUP\"\r\n}\r\n\r\ninterface ActionCreatePolygon {\r\n  type: \"CREATE_POLYGON\"\r\n  group: number\r\n}\r\n\r\ninterface ActionUpdatePolygonGroupPosition {\r\n  type: \"UPDATE_POLYGON_GROUP_POSITION\"\r\n  group: number\r\n  position: Cords\r\n}\r\n\r\ninterface ActionUpdatePolygonAll {\r\n  type: \"UPDATE_POLYGON_ALL\"\r\n  group: number\r\n  polygon: number\r\n  polygonState: {\r\n    active?: boolean\r\n    position?: Cords\r\n    rotation?: Partial<PolygonRingRotation>\r\n    scale?: Partial<PolygonRingScale>\r\n    dots?: Partial<PolygonRingDots>\r\n    sides?: Partial<PolygonRingSides>\r\n  }\r\n}\r\n\r\ninterface ActionUpdatePolygonActive {\r\n  type: \"UPDATE_POLYGON_ACTIVE\"\r\n  group: number\r\n  polygon: number\r\n  active: boolean\r\n}\r\ninterface ActionUpdatePolygonGroupActive {\r\n  type: \"UPDATE_POLYGON_GROUP_ACTIVE\"\r\n  group: number\r\n  active: boolean\r\n}\r\n\r\ninterface ActionUpdatePolygonPosition {\r\n  type: \"UPDATE_POLYGON_POSITION\"\r\n  group: number\r\n  polygon: number\r\n  position: Cords\r\n}\r\ninterface ActionUpdatePolygonRotation {\r\n  type: \"UPDATE_POLYGON_ROTATION\"\r\n  group: number\r\n  polygon: number\r\n  rotation: Partial<PolygonRingRotation>\r\n}\r\ninterface ActionUpdatePolygonScale {\r\n  type: \"UPDATE_POLYGON_SCALE\"\r\n  group: number\r\n  polygon: number\r\n  scale: Partial<PolygonRingScale>\r\n}\r\ninterface ActionUpdatePolygonDots {\r\n  type: \"UPDATE_POLYGON_DOTS\"\r\n  group: number\r\n  polygon: number\r\n  dots: Partial<PolygonRingDots>\r\n}\r\ninterface ActionUpdatePolygonSides {\r\n  type: \"UPDATE_POLYGON_SIDES\"\r\n  group: number\r\n  polygon: number\r\n  sides: Partial<PolygonRingSides>\r\n}\r\n\r\ninterface ActionRandomizePolygonRings {\r\n  type: \"RANDOMIZE_POLYGON_RINGS\"\r\n  group: number\r\n}\r\ninterface ActionRandomizePolygon {\r\n  type: \"RANDOMIZE_POLYGON\"\r\n  group: number\r\n  polygon: number\r\n}\r\ninterface ActionRandomizePolygonSides {\r\n  type: \"RANDOMIZE_POLYGON_SIDES\"\r\n  group: number\r\n  polygon: number\r\n}\r\ninterface ActionRandomizePolygonRotation {\r\n  type: \"RANDOMIZE_POLYGON_ROTATION\"\r\n  group: number\r\n  polygon: number\r\n}\r\ninterface ActionRandomizePolygonScale {\r\n  type: \"RANDOMIZE_POLYGON_SCALE\"\r\n  group: number\r\n  polygon: number\r\n}\r\ninterface ActionRandomizePolygonDots {\r\n  type: \"RANDOMIZE_POLYGON_DOTS\"\r\n  group: number\r\n  polygon: number\r\n}\r\n\r\ninterface ActionDeletePolygonGroup {\r\n  type: \"DELETE_POLYGON_GROUP\"\r\n  group: number\r\n}\r\ninterface ActionDeletePolygonGroupRing {\r\n  type: \"DELETE_POLYGON_GROUP_RING\"\r\n  group: number\r\n  polygon: number\r\n}\r\n\r\nexport type PolygonGroupsActions =\r\n  | ActionCreateGroup\r\n  | ActionCreatePolygon\r\n  | ActionUpdatePolygonAll\r\n  | ActionUpdatePolygonGroupPosition\r\n  | ActionUpdatePolygonPosition\r\n  | ActionUpdatePolygonRotation\r\n  | ActionUpdatePolygonScale\r\n  | ActionUpdatePolygonDots\r\n  | ActionUpdatePolygonSides\r\n  | ActionUpdatePolygonActive\r\n  | ActionUpdatePolygonGroupActive\r\n  | ActionRandomizePolygonRings\r\n  | ActionRandomizePolygon\r\n  | ActionRandomizePolygonSides\r\n  | ActionRandomizePolygonRotation\r\n  | ActionRandomizePolygonScale\r\n  | ActionRandomizePolygonDots\r\n  | ActionDeletePolygonGroup\r\n  | ActionDeletePolygonGroupRing\r\n\r\n/**\r\n * Takes in the current draft for the matching options\r\n * and returns a updated draft with the new options so\r\n * it can be set to the new state\r\n *\r\n * @template T\r\n * @param {T} draft\r\n * @param {Partial<T>} options\r\n * @returns {T}\r\n */\r\nfunction getDraftUpdatedByOptions<T>(draft: T, options: Partial<T>): T {\r\n  const newState = { ...original(draft) } as Partial<T>\r\n  const optionKeys = Object.keys(options) as [keyof T]\r\n  optionKeys.forEach((option) => {\r\n    newState[option] = options[option]\r\n  })\r\n\r\n  return newState as T\r\n}\r\n\r\n// Randomizing Functions taken from MDN: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/random\r\n\r\nfunction getRandomArbitrary(min: number, max: number): number {\r\n  return Math.random() * (max - min) + min\r\n}\r\n\r\nfunction getRandomIntInclusive(min: number, max: number): number {\r\n  min = Math.ceil(min)\r\n  max = Math.floor(max)\r\n  return Math.floor(Math.random() * (max - min + 1)) + min\r\n}\r\n\r\nfunction getRandomBoolean(): boolean {\r\n  return getRandomIntInclusive(0, 1) === 1 ? true : false\r\n}\r\n\r\n/**\r\n * Taken from https://stackoverflow.com/questions/2353211/hsl-to-rgb-color-conversion/9493060#9493060\r\n *\r\n * Converts an HSL color value to RGB. Conversion formula\r\n * adapted from http://en.wikipedia.org/wiki/HSL_color_space.\r\n * Assumes h, s, and l are contained in the set [0, 1] and\r\n * returns r, g, and b in the set [0, 255].\r\n *\r\n *\r\n * @param   {number}  h       The hue\r\n * @param   {number}  s       The saturation\r\n * @param   {number}  l       The lightness\r\n * @return  {Array}           The RGB representation\r\n */\r\nfunction hslToRgb(h: number, s: number, l: number): [number, number, number] {\r\n  var r, g, b\r\n\r\n  if (s === 0) {\r\n    r = g = b = l // achromatic\r\n  } else {\r\n    var hue2rgb = function hue2rgb(p: number, q: number, t: number) {\r\n      if (t < 0) t += 1\r\n      if (t > 1) t -= 1\r\n      if (t < 1 / 6) return p + (q - p) * 6 * t\r\n      if (t < 1 / 2) return q\r\n      if (t < 2 / 3) return p + (q - p) * (2 / 3 - t) * 6\r\n      return p\r\n    }\r\n\r\n    var q = l < 0.5 ? l * (1 + s) : l + s - l * s\r\n    var p = 2 * l - q\r\n    r = hue2rgb(p, q, h + 1 / 3)\r\n    g = hue2rgb(p, q, h)\r\n    b = hue2rgb(p, q, h - 1 / 3)\r\n  }\r\n\r\n  return [Math.round(r * 255), Math.round(g * 255), Math.round(b * 255)]\r\n}\r\n\r\nfunction getRandomRGB(): [number, number, number] {\r\n  const h = getRandomArbitrary(0, 1)\r\n  const s = getRandomArbitrary(0.5, 0.7)\r\n  const l = getRandomArbitrary(0.5, 0.7)\r\n  const [r, g, b] = hslToRgb(h, s, l)\r\n  return [r, g, b]\r\n}\r\n\r\n// https://stackoverflow.com/questions/5623838/rgb-to-hex-and-hex-to-rgb\r\nfunction componentToHex(c: number) {\r\n  var hex = c.toString(16)\r\n  return hex.length === 1 ? \"0\" + hex : hex\r\n}\r\n\r\nfunction rgbToHex(r: number, g: number, b: number): string {\r\n  return \"#\" + componentToHex(r) + componentToHex(g) + componentToHex(b)\r\n}\r\n\r\nfunction getRandomColoursForPolygon(amountOfSides: number): string[] {\r\n  const amountOfColours = getRandomIntInclusive(1, amountOfSides)\r\n\r\n  return [...Array(amountOfColours)].map(() => rgbToHex(...getRandomRGB()))\r\n}\r\n\r\nfunction getRandomSides(): PolygonRingSides {\r\n  const sidesAmount = getRandomIntInclusive(3, 12)\r\n  return {\r\n    enabled: true,\r\n    strokeWidth: getRandomIntInclusive(1, 10),\r\n    amount: sidesAmount,\r\n    colours: getRandomColoursForPolygon(sidesAmount),\r\n  }\r\n}\r\nfunction getRandomDots(amountOfSides: number): PolygonRingDots {\r\n  return {\r\n    enabled: true,\r\n    fillColours: getRandomColoursForPolygon(amountOfSides),\r\n    size: getRandomIntInclusive(5, 10),\r\n    strokeWidth: getRandomIntInclusive(0, 10),\r\n    strokeColours: getRandomColoursForPolygon(amountOfSides),\r\n  }\r\n}\r\nfunction getRandomRotation(): PolygonRingRotation {\r\n  return {\r\n    enabled: true,\r\n    clockwise: getRandomBoolean(),\r\n    speed: getRandomIntInclusive(2, 7),\r\n    startingRotation: getRandomIntInclusive(0, 359),\r\n  }\r\n}\r\nfunction getRandomScale(): PolygonRingScale {\r\n  const min = getRandomIntInclusive(0, 150)\r\n  const max = getRandomIntInclusive(200, 500)\r\n\r\n  return {\r\n    enabled: true,\r\n    range: { min, max },\r\n    speed: getRandomIntInclusive(2, 7),\r\n    startingSize: getRandomIntInclusive(min, max),\r\n  }\r\n}\r\n\r\nfunction getRandomEnabled(): {\r\n  sidesEnabled: boolean\r\n  dotsEnabled: boolean\r\n  rotationEnabled: boolean\r\n  scaleEnabled: boolean\r\n} {\r\n  const randomNumber = getRandomIntInclusive(0, 100)\r\n\r\n  let enabledFields\r\n  if (randomNumber <= 48) {\r\n    // Full motion Sides\r\n    enabledFields = {\r\n      sidesEnabled: true,\r\n      dotsEnabled: false,\r\n      rotationEnabled: true,\r\n      scaleEnabled: true,\r\n    }\r\n  } else if (randomNumber <= 50) {\r\n    // Rotating Sides\r\n    enabledFields = {\r\n      sidesEnabled: true,\r\n      dotsEnabled: false,\r\n      rotationEnabled: true,\r\n      scaleEnabled: false,\r\n    }\r\n  } else if (randomNumber <= 90) {\r\n    // Full Motion Dots\r\n    enabledFields = {\r\n      sidesEnabled: false,\r\n      dotsEnabled: true,\r\n      rotationEnabled: true,\r\n      scaleEnabled: true,\r\n    }\r\n  } else if (randomNumber <= 95) {\r\n    // Rotating Dots\r\n    enabledFields = {\r\n      sidesEnabled: false,\r\n      dotsEnabled: true,\r\n      rotationEnabled: true,\r\n      scaleEnabled: false,\r\n    }\r\n  } else {\r\n    // Dots & Sides Full Motion\r\n    enabledFields = {\r\n      sidesEnabled: true,\r\n      dotsEnabled: true,\r\n      rotationEnabled: true,\r\n      scaleEnabled: true,\r\n    }\r\n  }\r\n  return enabledFields\r\n}\r\n\r\nfunction getRandomPolygon({\r\n  active = true,\r\n  position = { x: 0, y: 0 },\r\n}: Partial<PolygonRing> = {}): PolygonRing {\r\n  const sides = getRandomSides()\r\n  const dots = getRandomDots(sides.amount)\r\n  const rotation = getRandomRotation()\r\n  const scale = getRandomScale()\r\n  const {\r\n    sidesEnabled,\r\n    scaleEnabled,\r\n    rotationEnabled,\r\n    dotsEnabled,\r\n  } = getRandomEnabled()\r\n\r\n  sides.enabled = sidesEnabled\r\n  dots.enabled = dotsEnabled\r\n  scale.enabled = scaleEnabled\r\n  rotation.enabled = rotationEnabled\r\n\r\n  return { active, position, sides, dots, rotation, scale }\r\n}\r\n\r\nfunction createRandomPolygonRings(): PolygonRing[] {\r\n  const amountOfRings = getRandomIntInclusive(2, 8)\r\n\r\n  return [...Array(amountOfRings)].map(() => getRandomPolygon())\r\n}\r\n\r\ntype PolygonGroupsReducer = React.Reducer<\r\n  Readonly<PolygonGroup[]>,\r\n  PolygonGroupsActions\r\n>\r\nexport const polygonGroupsReducer: PolygonGroupsReducer = produce(\r\n  (draft: Draft<PolygonGroup[]>, action: PolygonGroupsActions) => {\r\n    switch (action.type) {\r\n      case \"CREATE_POLYGON_GROUP\": {\r\n        draft.push({\r\n          active: true,\r\n          position: { x: 0, y: 0 },\r\n          rings: createRandomPolygonRings(),\r\n        })\r\n        break\r\n      }\r\n      case \"CREATE_POLYGON\": {\r\n        draft[action.group].rings.push(getRandomPolygon())\r\n        break\r\n      }\r\n      case \"UPDATE_POLYGON_GROUP_POSITION\": {\r\n        draft[action.group].position = action.position\r\n        break\r\n      }\r\n      case \"UPDATE_POLYGON_GROUP_ACTIVE\": {\r\n        draft[action.group].active = action.active\r\n        break\r\n      }\r\n      case \"UPDATE_POLYGON_ALL\": {\r\n        const draftPolygon = draft[action.group].rings[action.polygon]\r\n        if (action.polygonState.active !== undefined) {\r\n          draftPolygon.active = action.polygonState.active\r\n        }\r\n        if (action.polygonState.position !== undefined) {\r\n          draftPolygon.position = action.polygonState.position\r\n        }\r\n        if (action.polygonState.dots !== undefined) {\r\n          draftPolygon.dots = getDraftUpdatedByOptions<PolygonRingDots>(\r\n            draftPolygon.dots,\r\n            action.polygonState.dots\r\n          )\r\n        }\r\n        if (action.polygonState.rotation !== undefined) {\r\n          draftPolygon.rotation = getDraftUpdatedByOptions<PolygonRingRotation>(\r\n            draftPolygon.rotation,\r\n            action.polygonState.rotation\r\n          )\r\n        }\r\n        if (action.polygonState.sides !== undefined) {\r\n          draftPolygon.sides = getDraftUpdatedByOptions<PolygonRingSides>(\r\n            draftPolygon.sides,\r\n            action.polygonState.sides\r\n          )\r\n        }\r\n        if (action.polygonState.scale !== undefined) {\r\n          draftPolygon.scale = getDraftUpdatedByOptions<PolygonRingScale>(\r\n            draftPolygon.scale,\r\n            action.polygonState.scale\r\n          )\r\n        }\r\n        break\r\n      }\r\n      case \"UPDATE_POLYGON_POSITION\": {\r\n        draft[action.group].rings[action.polygon].position = action.position\r\n        break\r\n      }\r\n      case \"UPDATE_POLYGON_ACTIVE\": {\r\n        draft[action.group].rings[action.polygon].active = action.active\r\n        break\r\n      }\r\n      case \"UPDATE_POLYGON_DOTS\": {\r\n        const draftPolygon = draft[action.group].rings[action.polygon]\r\n        draftPolygon.dots = getDraftUpdatedByOptions<PolygonRingDots>(\r\n          draftPolygon.dots,\r\n          action.dots\r\n        )\r\n        break\r\n      }\r\n      case \"UPDATE_POLYGON_ROTATION\": {\r\n        const draftPolygon = draft[action.group].rings[action.polygon]\r\n        draftPolygon.rotation = getDraftUpdatedByOptions<PolygonRingRotation>(\r\n          draftPolygon.rotation,\r\n          action.rotation\r\n        )\r\n        break\r\n      }\r\n      case \"UPDATE_POLYGON_SIDES\": {\r\n        const draftPolygon = draft[action.group].rings[action.polygon]\r\n        draftPolygon.sides = getDraftUpdatedByOptions<PolygonRingSides>(\r\n          draftPolygon.sides,\r\n          action.sides\r\n        )\r\n        break\r\n      }\r\n      case \"UPDATE_POLYGON_SCALE\": {\r\n        const draftPolygon = draft[action.group].rings[action.polygon]\r\n        draftPolygon.scale = getDraftUpdatedByOptions<PolygonRingScale>(\r\n          draftPolygon.scale,\r\n          action.scale\r\n        )\r\n        break\r\n      }\r\n      case \"RANDOMIZE_POLYGON_RINGS\": {\r\n        const draftGroups = draft[action.group]\r\n        draftGroups.rings = createRandomPolygonRings()\r\n        break\r\n      }\r\n      case \"RANDOMIZE_POLYGON\": {\r\n        const draftRings = draft[action.group].rings\r\n        draftRings[action.polygon] = getRandomPolygon(\r\n          original(draftRings[action.polygon])\r\n        )\r\n        break\r\n      }\r\n      case \"RANDOMIZE_POLYGON_SIDES\": {\r\n        const draftPolygon = draft[action.group].rings[action.polygon]\r\n        draftPolygon.sides = getRandomSides()\r\n        break\r\n      }\r\n      case \"RANDOMIZE_POLYGON_ROTATION\": {\r\n        const draftPolygon = draft[action.group].rings[action.polygon]\r\n        draftPolygon.rotation = getRandomRotation()\r\n        break\r\n      }\r\n      case \"RANDOMIZE_POLYGON_SCALE\": {\r\n        const draftPolygon = draft[action.group].rings[action.polygon]\r\n        draftPolygon.scale = getRandomScale()\r\n        break\r\n      }\r\n      case \"RANDOMIZE_POLYGON_DOTS\": {\r\n        const draftPolygon = draft[action.group].rings[action.polygon]\r\n        const sides = draftPolygon.sides.amount\r\n        draftPolygon.dots = getRandomDots(sides)\r\n        break\r\n      }\r\n      case \"DELETE_POLYGON_GROUP\": {\r\n        const originalDraft = original(draft)\r\n        const totalGroups = originalDraft ? originalDraft.length : 1\r\n        if (originalDraft && totalGroups > 1) {\r\n          draft.splice(action.group, 1)\r\n        }\r\n        break\r\n      }\r\n      case \"DELETE_POLYGON_GROUP_RING\": {\r\n        const originalDraft = original(draft)\r\n        const totalRings = originalDraft\r\n          ? originalDraft[action.group].rings.length\r\n          : 1\r\n        if (totalRings > 1) {\r\n          draft[action.group].rings.splice(action.polygon, 1)\r\n        }\r\n        break\r\n      }\r\n    }\r\n  }\r\n)\r\n\r\nconst polygonGroupsInitialState: PolygonGroup[] = [\r\n  {\r\n    active: true,\r\n    position: { x: 0, y: 0 },\r\n    rings: [\r\n      {\r\n        active: true,\r\n        position: { x: 0, y: 0 },\r\n        dots: {\r\n          enabled: true,\r\n          fillColours: [\"black\"],\r\n          size: 1,\r\n          strokeColours: [\"black\"],\r\n          strokeWidth: 1,\r\n        },\r\n        rotation: {\r\n          clockwise: true,\r\n          enabled: true,\r\n          speed: 1,\r\n          startingRotation: 1,\r\n        },\r\n        scale: {\r\n          enabled: true,\r\n          speed: 1,\r\n          range: { max: 10, min: 5 },\r\n          startingSize: 5,\r\n        },\r\n        sides: {\r\n          enabled: true,\r\n          strokeWidth: 1,\r\n          colours: [\"black\"],\r\n          amount: 6,\r\n        },\r\n      },\r\n      {\r\n        active: true,\r\n        position: { x: 0, y: 0 },\r\n        dots: {\r\n          enabled: true,\r\n          fillColours: [\"black\"],\r\n          size: 1,\r\n          strokeColours: [\"black\"],\r\n          strokeWidth: 1,\r\n        },\r\n        rotation: {\r\n          clockwise: true,\r\n          enabled: true,\r\n          speed: 1,\r\n          startingRotation: 1,\r\n        },\r\n        scale: {\r\n          enabled: true,\r\n          speed: 1,\r\n          range: { max: 10, min: 5 },\r\n          startingSize: 5,\r\n        },\r\n        sides: {\r\n          enabled: true,\r\n          strokeWidth: 1,\r\n          colours: [\"black\"],\r\n          amount: 6,\r\n        },\r\n      },\r\n    ],\r\n  },\r\n]\r\n\r\nfunction polygonGroupsInit(\r\n  polygonGroupsInitialState: PolygonGroup[]\r\n): PolygonGroup[] {\r\n  const newPolygon = [...polygonGroupsInitialState]\r\n  //If testing don't randomize the polygons\r\n  if (!(typeof jest !== \"undefined\")) {\r\n    newPolygon[0].rings = createRandomPolygonRings()\r\n  }\r\n  return newPolygon\r\n}\r\n\r\nexport const PolygonGroupsContextWrapper: React.FC = ({ children }) => {\r\n  const [state, dispatch] = useReducer(\r\n    polygonGroupsReducer,\r\n    polygonGroupsInitialState,\r\n    polygonGroupsInit\r\n  )\r\n\r\n  return (\r\n    <polygonGroupsDispatchContext.Provider value={dispatch}>\r\n      <polygonGroupsStateContext.Provider value={state}>\r\n        {children}\r\n      </polygonGroupsStateContext.Provider>\r\n    </polygonGroupsDispatchContext.Provider>\r\n  )\r\n}\r\n\r\nexport const polygonGroupsDispatchContext = createContext(\r\n  {} as React.Dispatch<PolygonGroupsActions>\r\n)\r\nexport const polygonGroupsStateContext = createContext(\r\n  [] as Readonly<PolygonGroup[]>\r\n)\r\n","import React, { useReducer, createContext } from \"react\"\r\nimport produce, { Draft } from \"immer\"\r\n\r\nexport interface BackgroundState {\r\n  opacity: number\r\n  hex: string\r\n  rgb: string\r\n  rgba: string\r\n  shouldRedraw: boolean\r\n}\r\n\r\ninterface UpdateBackground {\r\n  type: \"UPDATE_BACKGROUND_WITH_HEX\"\r\n  opacity: number\r\n  hexColour: string\r\n  shouldRedraw: boolean\r\n}\r\n\r\nexport type BackgroundActions = UpdateBackground\r\n\r\n// https://stackoverflow.com/questions/5623838/rgb-to-hex-and-hex-to-rgb\r\nfunction hexToRgb(hex: string): { r: number; g: number; b: number } | null {\r\n  var result = /^#?([a-f\\d]{2})([a-f\\d]{2})([a-f\\d]{2})$/i.exec(hex)\r\n  return result\r\n    ? {\r\n        r: parseInt(result[1], 16),\r\n        g: parseInt(result[2], 16),\r\n        b: parseInt(result[3], 16),\r\n      }\r\n    : null\r\n}\r\n\r\nexport const backgroundReducer = produce(\r\n  (draft: Draft<BackgroundState>, action: BackgroundActions) => {\r\n    switch (action.type) {\r\n      case \"UPDATE_BACKGROUND_WITH_HEX\": {\r\n        draft.opacity = action.opacity\r\n        draft.shouldRedraw = action.shouldRedraw\r\n        draft.hex = action.hexColour\r\n        const convertedHex = hexToRgb(action.hexColour)\r\n        if (convertedHex) {\r\n          const { r, g, b } = convertedHex\r\n          draft.rgb = `rgb(${r},${g},${b})`\r\n          draft.rgba = `rgba(${r},${g},${b},${action.opacity / 100})`\r\n        }\r\n        break\r\n      }\r\n    }\r\n  }\r\n)\r\n\r\nexport const backgroundInitialState: BackgroundState = {\r\n  opacity: 10,\r\n  hex: \"#ffffff\",\r\n  rgb: \"rgb(255,255,255)\",\r\n  rgba: \"rgba(255,255,255, 0.1)\",\r\n  shouldRedraw: true,\r\n}\r\n\r\nexport const BackgroundContextWrapper: React.FC = ({ children }) => {\r\n  const [state, dispatch] = useReducer(\r\n    backgroundReducer,\r\n    backgroundInitialState\r\n  )\r\n\r\n  return (\r\n    <backgroundDispatchContext.Provider value={dispatch}>\r\n      <backgroundStateContext.Provider value={state}>\r\n        {children}\r\n      </backgroundStateContext.Provider>\r\n    </backgroundDispatchContext.Provider>\r\n  )\r\n}\r\n\r\nexport const backgroundDispatchContext = createContext(\r\n  {} as React.Dispatch<BackgroundActions>\r\n)\r\nexport const backgroundStateContext = createContext({} as BackgroundState)\r\n","import React, { useState, useEffect, useRef } from \"react\"\r\nimport styled, { StyledComponent } from \"styled-components\"\r\n\r\nconst ScreenReaderOnly = styled.span`\r\n  clip: rect(0 0 0 0);\r\n  clip-path: inset(50%);\r\n  height: 1px;\r\n  overflow: hidden;\r\n  position: absolute;\r\n  white-space: nowrap;\r\n  width: 1px;\r\n`\r\n\r\nconst ModalDiv = styled.div`\r\n  max-width: 500px;\r\n  width: calc(100% - 40px);\r\n  border: 1px solid darkgrey;\r\n  border-radius: 8px;\r\n  box-shadow: 0px 3px 7px 0px darkgrey;\r\n  padding: 10px;\r\n  background-color: white;\r\n  z-index: 10;\r\n`\r\n\r\nconst ModalTitleBarDv = styled.div`\r\n  display: flex;\r\n  padding: 10px;\r\n  border-radius: 4px 4px 0 0;\r\n  justify-content: space-between;\r\n  align-items: center;\r\n  background: grey;\r\n  margin: -10px -10px 10px -10px;\r\n  h2 {\r\n    font-size: 32px;\r\n    font-weight: bold;\r\n    margin: 0 10px 0 0;\r\n    color: whitesmoke;\r\n  }\r\n  button {\r\n    position: relative;\r\n    background: lightgrey;\r\n    width: 35px;\r\n    height: 35px;\r\n    border-radius: 4px;\r\n    border: 1px solid lightgrey;\r\n    box-shadow: 0 2px 2px dimgray;\r\n    transition: all 200ms ease-in-out;\r\n    &:focus,\r\n    &:hover {\r\n      box-shadow: 1px 3px 3px 2px dimgray;\r\n      outline: none;\r\n      background-color: dimgrey;\r\n      &::before {\r\n        transition: all 200ms ease-in-out;\r\n        text-shadow: 0 0 0 lightgrey;\r\n      }\r\n    }\r\n    &::before {\r\n      position: absolute;\r\n      content: \"❌\";\r\n      text-shadow: 0 0 0 dimgrey;\r\n      color: transparent;\r\n      font-size: 20px;\r\n      top: 50%;\r\n      left: 50%;\r\n      transform: translate(-50%, -50%);\r\n    }\r\n  }\r\n`\r\n\r\nconst ModelBackgroundDiv = styled.div`\r\n  display: flex;\r\n  justify-content: center;\r\n  align-items: center;\r\n  position: fixed;\r\n  top: 0;\r\n  right: 0;\r\n  left: 0;\r\n  bottom: 0;\r\n  background-color: rgba(211, 211, 211, 0.7);\r\n  z-index: 9;\r\n`\r\n\r\nconst focusChildInput = (first: boolean, parent: HTMLElement) => {\r\n  const childrenInputs = Array.from(parent.getElementsByTagName(\"input\"))\r\n  const childrenButtons = Array.from(parent.getElementsByTagName(\"button\"))\r\n\r\n  const modalElements = [...childrenButtons, ...childrenInputs]\r\n\r\n  if (first) {\r\n    modalElements[0].focus()\r\n  } else {\r\n    modalElements[modalElements.length - 1].focus()\r\n  }\r\n}\r\n\r\ninterface ModelBoxProps {\r\n  buttonText: string\r\n  title: string\r\n  StyledButton: StyledComponent<\"button\", any, {}, never>\r\n  isClosed: boolean\r\n  setIsClosed: React.Dispatch<React.SetStateAction<boolean>>\r\n}\r\n\r\nexport const ModalBox: React.FC<ModelBoxProps> = ({\r\n  children,\r\n  buttonText,\r\n  title,\r\n  StyledButton,\r\n  isClosed,\r\n  setIsClosed,\r\n}) => {\r\n  const [lastFocus, setLastFocus] = useState<Element | null>(null)\r\n  const openButtonRef = useRef(null)\r\n  const modalRef = useRef<HTMLDivElement>(null)\r\n\r\n  // Focus first element on open\r\n  useEffect(() => {\r\n    if (!isClosed && modalRef?.current) {\r\n      focusChildInput(true, modalRef.current)\r\n    }\r\n  }, [isClosed, modalRef])\r\n\r\n  // Keyboard Listeners\r\n  useEffect(() => {\r\n    const closeModal = (event: KeyboardEvent) => {\r\n      if (event.key === \"Escape\") {\r\n        setIsClosed(true)\r\n      }\r\n    }\r\n\r\n    const lockFocus = () => {\r\n      if (modalRef?.current) {\r\n        const modal = modalRef.current\r\n        // If focus inside modal set as last focus\r\n        if (modal.contains(document.activeElement)) {\r\n          setLastFocus(document.activeElement)\r\n        } else {\r\n          // Focus first child unless new active focus is last focus\r\n          focusChildInput(true, modal)\r\n          if (lastFocus === document.activeElement) {\r\n            focusChildInput(false, modal)\r\n          }\r\n          setLastFocus(document.activeElement)\r\n        }\r\n      }\r\n    }\r\n\r\n    if (!isClosed) {\r\n      window.addEventListener(\"keydown\", closeModal, true)\r\n      window.addEventListener(\"focus\", lockFocus, true)\r\n    } else {\r\n      window.removeEventListener(\"keydown\", closeModal, true)\r\n      window.removeEventListener(\"focus\", lockFocus, true)\r\n    }\r\n\r\n    return () => {\r\n      window.removeEventListener(\"keydown\", closeModal, true)\r\n      window.removeEventListener(\"focus\", lockFocus, true)\r\n    }\r\n  }, [setIsClosed, isClosed, lastFocus, setLastFocus])\r\n\r\n  return (\r\n    <>\r\n      <StyledButton\r\n        ref={openButtonRef}\r\n        onClick={() => {\r\n          setIsClosed(false)\r\n        }}\r\n      >\r\n        {buttonText}\r\n      </StyledButton>\r\n      <ModelBackgroundDiv hidden={isClosed}>\r\n        <ModalDiv\r\n          role=\"dialog\"\r\n          aria-labelledby=\"dialog_label\"\r\n          aria-modal=\"true\"\r\n          ref={modalRef}\r\n          hidden={isClosed}\r\n        >\r\n          <ModalTitleBarDv>\r\n            <h2 id=\"dialog_label\">{title}</h2>\r\n            <button\r\n              onClick={() => {\r\n                setIsClosed(true)\r\n              }}\r\n            >\r\n              <ScreenReaderOnly>Close</ScreenReaderOnly>\r\n            </button>\r\n          </ModalTitleBarDv>\r\n          {children}\r\n        </ModalDiv>\r\n      </ModelBackgroundDiv>\r\n    </>\r\n  )\r\n}\r\n","import { PolygonRing, Cords } from \"reducer-contexts/polygon-groups\"\r\n\r\nexport interface PolygonAnimation {\r\n  position: Cords\r\n  currentRotation: number\r\n  dots: {\r\n    enabled: boolean\r\n    fillColours: string[]\r\n    strokeColours: string[]\r\n    strokeWidth: number\r\n    size: number\r\n    position: Cords[]\r\n  }\r\n  sides: {\r\n    enabled: boolean\r\n    strokeColours: string[]\r\n    strokeWidth: number\r\n    positions: [Cords, Cords][]\r\n  }\r\n}\r\n\r\ninterface PolygonPoint extends Cords {\r\n  cos: number\r\n  sin: number\r\n}\r\n\r\ninterface PolygonAnimationConstants {\r\n  position: Cords\r\n  rotationSpeed: number\r\n  scalingSpeed: number\r\n  scalingRange: { min: number; max: number }\r\n  isActive: boolean\r\n  isRotating: boolean\r\n  isScaling: boolean\r\n  isRotatingClockwise: boolean\r\n}\r\n\r\ninterface PolygonAnimationState {\r\n  currentRotation: number\r\n  currentSize: number\r\n  currentlyExpanding: boolean\r\n  polygonPoints: PolygonPoint[]\r\n}\r\n\r\ninterface PolygonStyle {\r\n  sides: {\r\n    enabled: boolean\r\n    colours: string[]\r\n    strokeWidth: number\r\n  }\r\n  dots: {\r\n    enabled: boolean\r\n    strokeColours: string[]\r\n    fillColours: string[]\r\n    strokeWidth: number\r\n    size: number\r\n  }\r\n}\r\n\r\nexport class PolygonAnimationCalculation {\r\n  private style: PolygonStyle\r\n  private animationState: PolygonAnimationState\r\n  private animationConstants: PolygonAnimationConstants\r\n\r\n  constructor(polygon: PolygonRing) {\r\n    this.style = this.getInitialStyles(polygon)\r\n    this.animationConstants = this.getInitialConstants(polygon)\r\n    this.animationState = this.getInitialState(polygon)\r\n  }\r\n\r\n  private getInitialStyles({ sides, dots }: PolygonRing): PolygonStyle {\r\n    return {\r\n      sides: {\r\n        colours: sides.colours,\r\n        strokeWidth: sides.strokeWidth,\r\n        enabled: sides.enabled,\r\n      },\r\n      dots: {\r\n        enabled: dots.enabled,\r\n        size: dots.size,\r\n        fillColours: dots.fillColours,\r\n        strokeColours: dots.strokeColours,\r\n        strokeWidth: dots.strokeWidth,\r\n      },\r\n    }\r\n  }\r\n\r\n  private getInitialPoints(\r\n    sides: number,\r\n    startingSize: number\r\n  ): PolygonPoint[] {\r\n    const twoPi = Math.PI * 2\r\n    const angleBetweenPoints = twoPi / sides\r\n\r\n    let currentAngle = angleBetweenPoints\r\n    return [...Array(sides)].map(() => {\r\n      currentAngle += angleBetweenPoints\r\n      const cos = Math.cos(currentAngle)\r\n      const sin = Math.sin(currentAngle)\r\n      const x = Math.round(cos * startingSize)\r\n      const y = Math.round(sin * startingSize)\r\n\r\n      return { x, y, sin, cos }\r\n    })\r\n  }\r\n\r\n  private getInitialConstants({\r\n    active,\r\n    rotation,\r\n    scale,\r\n    position,\r\n  }: PolygonRing): PolygonAnimationConstants {\r\n    return {\r\n      position,\r\n      isActive: active,\r\n      isRotating: rotation.enabled,\r\n      isScaling: scale.enabled,\r\n      isRotatingClockwise: rotation.clockwise,\r\n      rotationSpeed: rotation.speed,\r\n      scalingSpeed: scale.speed,\r\n      scalingRange: scale.range,\r\n    }\r\n  }\r\n\r\n  private getInitialState({\r\n    scale,\r\n    rotation,\r\n    sides,\r\n  }: PolygonRing): PolygonAnimationState {\r\n    const polygonPoints = this.getInitialPoints(\r\n      sides.amount,\r\n      scale.startingSize\r\n    )\r\n    const currentlyExpanding =\r\n      scale.startingSize <= (scale.range.max - scale.range.min) / 2\r\n    return {\r\n      currentRotation: rotation.startingRotation,\r\n      currentSize: scale.startingSize,\r\n      currentlyExpanding,\r\n      polygonPoints,\r\n    }\r\n  }\r\n\r\n  private updateRotation() {\r\n    const {\r\n      isRotating,\r\n      isRotatingClockwise,\r\n      rotationSpeed,\r\n    } = this.animationConstants\r\n    const { currentRotation } = this.animationState\r\n\r\n    let newRotation: number\r\n    if (isRotating) {\r\n      if (isRotatingClockwise) {\r\n        newRotation = currentRotation + rotationSpeed\r\n        if (newRotation > 359) {\r\n          const amountOver = newRotation - 359\r\n          newRotation = amountOver\r\n        }\r\n      } else {\r\n        newRotation = currentRotation - rotationSpeed\r\n        if (newRotation < -359) {\r\n          const amountOver = newRotation + 359\r\n          newRotation = amountOver\r\n        }\r\n      }\r\n\r\n      this.animationState.currentRotation = newRotation\r\n    }\r\n  }\r\n\r\n  private updateScale() {\r\n    const { isScaling, scalingSpeed, scalingRange } = this.animationConstants\r\n    const {\r\n      currentlyExpanding,\r\n      polygonPoints,\r\n      currentSize,\r\n    } = this.animationState\r\n\r\n    if (isScaling) {\r\n      let updatedSize: number\r\n      let updatedCurrentlyExpanding = currentlyExpanding\r\n      if (currentlyExpanding) {\r\n        updatedSize = currentSize + scalingSpeed\r\n      } else {\r\n        updatedSize = currentSize - scalingSpeed\r\n      }\r\n\r\n      if (updatedSize >= scalingRange.max) {\r\n        updatedSize = scalingRange.max\r\n        updatedCurrentlyExpanding = false\r\n      } else if (updatedSize <= scalingRange.min) {\r\n        updatedSize = scalingRange.min\r\n        updatedCurrentlyExpanding = true\r\n      }\r\n\r\n      const newPolygonPoints = polygonPoints.map((point) => {\r\n        const { cos, sin } = point\r\n        const newPoint = { ...point }\r\n\r\n        newPoint.x = Math.round(cos * updatedSize)\r\n        newPoint.y = Math.round(sin * updatedSize)\r\n\r\n        return newPoint\r\n      })\r\n\r\n      this.animationState.currentSize = updatedSize\r\n      this.animationState.currentlyExpanding = updatedCurrentlyExpanding\r\n      this.animationState.polygonPoints = newPolygonPoints\r\n    }\r\n  }\r\n\r\n  public getPolygonFrame(): PolygonAnimation {\r\n    const { dots, sides } = this.style\r\n    const { currentRotation, polygonPoints } = this.animationState\r\n    const { position } = this.animationConstants\r\n    const dotPositions = polygonPoints.map((point) => {\r\n      return { x: point.x, y: point.y }\r\n    })\r\n    const sidesPositions: [Cords, Cords][] = polygonPoints.map(\r\n      (point, index) => {\r\n        const totalPoints = polygonPoints.length\r\n        const nextIndex = index + 1\r\n        let nextPoint: Cords\r\n        if (nextIndex === totalPoints) {\r\n          nextPoint = { x: polygonPoints[0].x, y: polygonPoints[0].y }\r\n        } else {\r\n          nextPoint = {\r\n            x: polygonPoints[nextIndex].x,\r\n            y: polygonPoints[nextIndex].y,\r\n          }\r\n        }\r\n        return [{ x: point.x, y: point.y }, nextPoint]\r\n      }\r\n    )\r\n\r\n    return {\r\n      position,\r\n      currentRotation,\r\n      dots: {\r\n        enabled: dots.enabled,\r\n        size: dots.size,\r\n        position: dotPositions,\r\n        fillColours: dots.fillColours,\r\n        strokeColours: dots.strokeColours,\r\n        strokeWidth: dots.strokeWidth,\r\n      },\r\n      sides: {\r\n        enabled: sides.enabled,\r\n        positions: sidesPositions,\r\n        strokeWidth: sides.strokeWidth,\r\n        strokeColours: sides.colours,\r\n      },\r\n    }\r\n  }\r\n  public getPolygonFrameAndStep(): PolygonAnimation {\r\n    const { isActive } = this.animationConstants\r\n    const currentFrame = this.getPolygonFrame()\r\n    if (isActive) {\r\n      this.updateScale()\r\n      this.updateRotation()\r\n    }\r\n    return currentFrame\r\n  }\r\n}\r\n","import { P5 } from \"types/p5\"\r\nimport {\r\n  PolygonAnimationCalculation,\r\n  PolygonAnimation,\r\n} from \"polygon-logic/polygon-animation-calculation\"\r\n// Disabled because PolygonRing is only used as a type and is getting flagged\r\n// eslint-disable-next-line\r\nimport { PolygonRing, PolygonGroup } from \"reducer-contexts/polygon-groups\"\r\n\r\nconst FRAME_RATE = 30\r\n\r\nfunction getSizeConstrainedCords(\r\n  size: { width: number; height: number },\r\n  cords: { x: number; y: number }\r\n): { x: number; y: number } {\r\n  const x = Math.floor((size.width * (cords.x / 100)) / 2)\r\n  let y = Math.floor((size.height * (cords.y / 100)) / 2)\r\n  //Flip the y axis to have +100 at the top and -100 at the bottom\r\n  if (y < 0) {\r\n    y = y / -1\r\n  } else {\r\n    y = y / -1\r\n  }\r\n\r\n  return { x, y }\r\n}\r\n/**\r\n * Shared function used to draw the polygon\r\n */\r\n\r\nfunction singlePolygonDraw(\r\n  polygonAnimation: PolygonAnimation,\r\n  size: { width: number; height: number },\r\n  p5: P5,\r\n  scale?: number\r\n) {\r\n  const { currentRotation, dots, sides, position } = polygonAnimation\r\n  const { x, y } = getSizeConstrainedCords(size, position)\r\n\r\n  p5.push()\r\n  // Set polygon rings translation point\r\n  p5.translate(x, y)\r\n  if (scale) {\r\n    p5.scale(scale)\r\n  }\r\n  p5.rotate(currentRotation)\r\n  // Draw Sides if enabled\r\n  if (sides.enabled) {\r\n    sides.positions.forEach((cords, index) => {\r\n      const stokeColour = index % sides.strokeColours.length\r\n      p5.stroke(sides.strokeColours[stokeColour])\r\n      p5.strokeWeight(sides.strokeWidth)\r\n      p5.line(cords[0].x, cords[0].y, cords[1].x, cords[1].y)\r\n    })\r\n  }\r\n  // Draw dots if enabled\r\n  if (dots.enabled) {\r\n    p5.push()\r\n    dots.position.forEach((cords, index) => {\r\n      const fillColourIndex = index % dots.fillColours.length\r\n      const stokeColourIndex = index % dots.strokeColours.length\r\n      const { x, y } = cords\r\n      p5.fill(dots.fillColours[fillColourIndex])\r\n      p5.strokeWeight(dots.strokeWidth)\r\n      p5.stroke(dots.strokeColours[stokeColourIndex])\r\n      p5.ellipse(x, y, dots.size)\r\n    })\r\n    p5.pop()\r\n  }\r\n  p5.pop()\r\n}\r\n\r\ninterface SketchParams {\r\n  windowSize: { height: number; width: number }\r\n  rgbaBackgroundColour: string\r\n  rgbBackgroundColour: string\r\n  shouldRedrawBackground: boolean\r\n  scale?: number\r\n}\r\n\r\n/**\r\n * Generates everything needed to draw and setup a single polygon ring\r\n */\r\ninterface PolygonRingSketchParams extends SketchParams {\r\n  polygonRing: Readonly<PolygonRing>\r\n}\r\nexport function generatePolygonRingSketch({\r\n  polygonRing,\r\n  windowSize,\r\n  scale,\r\n  rgbaBackgroundColour,\r\n  rgbBackgroundColour,\r\n  shouldRedrawBackground,\r\n}: PolygonRingSketchParams) {\r\n  const polygonRingInstance = new PolygonAnimationCalculation(polygonRing)\r\n\r\n  return (p5: P5) => {\r\n    p5.setup = () => {\r\n      p5.createCanvas(windowSize.width, windowSize.height)\r\n      p5.background(rgbBackgroundColour)\r\n      p5.frameRate(FRAME_RATE)\r\n    }\r\n    p5.draw = () => {\r\n      p5.angleMode(\"degrees\")\r\n      if (shouldRedrawBackground) {\r\n        p5.background(rgbaBackgroundColour)\r\n      }\r\n      // Set translation point to the center\r\n      p5.translate(windowSize.width / 2, windowSize.height / 2)\r\n      singlePolygonDraw(\r\n        polygonRingInstance.getPolygonFrameAndStep(),\r\n        windowSize,\r\n        p5,\r\n        scale\r\n      )\r\n    }\r\n  }\r\n}\r\n\r\n/**\r\n * Generates everything needed to draw and setup a group of polygon rings\r\n */\r\n\r\ninterface PolygonGroupSketchParams extends SketchParams {\r\n  polygonGroup: Readonly<PolygonGroup>\r\n}\r\nexport function generatePolygonGroupSketch({\r\n  polygonGroup,\r\n  windowSize,\r\n  scale,\r\n  rgbaBackgroundColour,\r\n  rgbBackgroundColour,\r\n  shouldRedrawBackground,\r\n}: PolygonGroupSketchParams) {\r\n  const polygonRingInstances = polygonGroup.rings.map((polygonRing) => {\r\n    return new PolygonAnimationCalculation(polygonRing)\r\n  })\r\n\r\n  return (p5: P5) => {\r\n    p5.setup = () => {\r\n      p5.createCanvas(windowSize.width, windowSize.height)\r\n      p5.background(rgbBackgroundColour)\r\n      p5.frameRate(FRAME_RATE)\r\n    }\r\n    p5.draw = () => {\r\n      p5.angleMode(\"degrees\")\r\n      if (shouldRedrawBackground) {\r\n        p5.background(rgbaBackgroundColour)\r\n      }\r\n      // Set translation point to the center\r\n      p5.translate(windowSize.width / 2, windowSize.height / 2)\r\n      p5.push()\r\n      // Set groups translation point\r\n      const { x, y } = getSizeConstrainedCords(\r\n        windowSize,\r\n        polygonGroup.position\r\n      )\r\n      p5.translate(x, y)\r\n      for (const polygonRing of polygonRingInstances) {\r\n        singlePolygonDraw(\r\n          polygonRing.getPolygonFrameAndStep(),\r\n          windowSize,\r\n          p5,\r\n          scale\r\n        )\r\n      }\r\n      p5.pop()\r\n    }\r\n  }\r\n}\r\n\r\ninterface AllPolygonRingGroupsSketchParams extends SketchParams {\r\n  polygonGroups: Readonly<PolygonGroup[]>\r\n}\r\nexport function generateAllPolygonRingGroupsSketch({\r\n  polygonGroups,\r\n  windowSize,\r\n  rgbaBackgroundColour,\r\n  rgbBackgroundColour,\r\n  shouldRedrawBackground,\r\n  scale,\r\n}: AllPolygonRingGroupsSketchParams) {\r\n  const polygonGroupInstances = polygonGroups.map(({ rings }) =>\r\n    rings.map((polygonRing) => {\r\n      return new PolygonAnimationCalculation(polygonRing)\r\n    })\r\n  )\r\n  return (p5: P5) => {\r\n    p5.setup = () => {\r\n      p5.createCanvas(windowSize.width, windowSize.height)\r\n      p5.background(rgbBackgroundColour)\r\n      p5.frameRate(FRAME_RATE)\r\n    }\r\n    p5.draw = () => {\r\n      p5.angleMode(\"degrees\")\r\n      if (shouldRedrawBackground) {\r\n        p5.background(rgbaBackgroundColour)\r\n      }\r\n      // Set translation point to the center\r\n      p5.translate(windowSize.width / 2, windowSize.height / 2)\r\n      polygonGroupInstances.forEach((polygonGroupRings, index) => {\r\n        p5.push()\r\n        // Set groups translation point\r\n        const { x, y } = getSizeConstrainedCords(\r\n          windowSize,\r\n          polygonGroups[index].position\r\n        )\r\n        p5.translate(x, y)\r\n        if (scale) {\r\n          p5.scale(scale)\r\n        }\r\n        for (const polygonRingInstance of polygonGroupRings) {\r\n          singlePolygonDraw(\r\n            polygonRingInstance.getPolygonFrameAndStep(),\r\n            windowSize,\r\n            p5\r\n          )\r\n        }\r\n        p5.pop()\r\n      })\r\n    }\r\n  }\r\n}\r\n\r\ndeclare class GIF {\r\n  constructor(options: {\r\n    workers: number\r\n    quality: number\r\n    workerScript: string\r\n    dither: string\r\n  })\r\n\r\n  on(\r\n    type: \"start\" | \"abort\" | \"finished\" | \"progress\",\r\n    callback: Function\r\n  ): void\r\n  removeListener(\r\n    type: \"start\" | \"abort\" | \"finished\" | \"progress\",\r\n    callback: Function\r\n  ): void\r\n  render(): void\r\n  abort(): void\r\n  addFrame(canvas: any, options: any): void\r\n}\r\ninterface GenerateGifSketch extends AllPolygonRingGroupsSketchParams {\r\n  gifClass: GIF\r\n  recordingLength: number\r\n}\r\n\r\nexport function generateGifSketch({\r\n  polygonGroups,\r\n  windowSize,\r\n  rgbaBackgroundColour,\r\n  rgbBackgroundColour,\r\n  shouldRedrawBackground,\r\n  gifClass,\r\n  recordingLength,\r\n  scale,\r\n}: GenerateGifSketch) {\r\n  const polygonGroupInstances = polygonGroups.map(({ rings }) =>\r\n    rings.map((polygonRing) => {\r\n      return new PolygonAnimationCalculation(polygonRing)\r\n    })\r\n  )\r\n  return (p5: P5) => {\r\n    let isRecording = true\r\n    p5.setup = () => {\r\n      const canvas = p5.createCanvas(windowSize.width, windowSize.height)\r\n      canvas.id(\"gif-canvas\")\r\n      p5.frameRate(FRAME_RATE)\r\n      p5.background(rgbBackgroundColour)\r\n    }\r\n    p5.draw = () => {\r\n      // Triggers a gif render when the right frames have been hit\r\n      if (p5.frameCount === recordingLength * FRAME_RATE) {\r\n        gifClass.render()\r\n        isRecording = false\r\n      }\r\n\r\n      p5.angleMode(\"degrees\")\r\n      if (shouldRedrawBackground) {\r\n        p5.background(rgbaBackgroundColour)\r\n      }\r\n      // Set translation point to the center\r\n      p5.translate(windowSize.width / 2, windowSize.height / 2)\r\n\r\n      polygonGroupInstances.forEach((polygonGroupRings, index) => {\r\n        p5.push()\r\n        // Set groups translation point\r\n        const { x, y } = getSizeConstrainedCords(\r\n          windowSize,\r\n          polygonGroups[index].position\r\n        )\r\n        p5.translate(x, y)\r\n        if (scale) {\r\n          p5.scale(scale)\r\n        }\r\n        for (const polygonRingInstance of polygonGroupRings) {\r\n          singlePolygonDraw(\r\n            polygonRingInstance.getPolygonFrameAndStep(),\r\n            windowSize,\r\n            p5\r\n          )\r\n        }\r\n        p5.pop()\r\n      })\r\n\r\n      // Records the frames while \"isRecording\" else removes the canvas\r\n      if (isRecording && document.getElementById(\"gif-canvas\")) {\r\n        gifClass.addFrame(document.getElementById(\"gif-canvas\"), {\r\n          delay: 30,\r\n          copy: true,\r\n        })\r\n      } else {\r\n        p5.remove()\r\n      }\r\n    }\r\n  }\r\n}\r\n","import React from \"react\"\r\nimport styled, { css } from \"styled-components\"\r\n\r\ninterface SliderProps {\r\n  label: string\r\n  id: string\r\n  min: number\r\n  max: number\r\n  currentValue: number\r\n  setFunction: React.Dispatch<React.SetStateAction<number>>\r\n  vertical?: boolean\r\n  className?: string\r\n  valueSuffix?: string\r\n  hideValue?: boolean\r\n  verticalHeight?: number\r\n}\r\n\r\nconst SliderLabel = styled.label<{ styleHeight?: number }>`\r\n  ${({ styleHeight }) => {\r\n    if (styleHeight) {\r\n      return css`\r\n        position: absolute;\r\n        top: -${styleHeight / 2}px;\r\n        left: 50%;\r\n        transform: translateX(-50%);\r\n      `\r\n    } else {\r\n      return ``\r\n    }\r\n  }}\r\n`\r\n\r\nconst SliderInputRange = styled.input<{ styleHeight?: number }>`\r\n  &.vertical {\r\n    transform: rotate(-90deg);\r\n    width: ${(props) => `${props.styleHeight}px`};\r\n  }\r\n\r\n  -webkit-appearance: none;\r\n  margin: 10px 0;\r\n  width: 100%;\r\n  &:focus {\r\n    outline: none;\r\n  }\r\n  &::-webkit-slider-thumb {\r\n    box-shadow: 0px 0px 0px #000000, 0px 0px 0px #0d0d0d;\r\n    border: 0px solid #000000;\r\n    height: 20px;\r\n    width: 39px;\r\n    border-radius: 15px;\r\n    background: grey;\r\n    cursor: pointer;\r\n    -webkit-appearance: none;\r\n    margin-top: -5.2px;\r\n  }\r\n  &:focus::-webkit-slider-thumb {\r\n    background: radial-gradient(\r\n      rgb(255, 255, 255) 0%,\r\n      rgb(141, 141, 141) 50%,\r\n      rgb(63, 63, 63) 100%\r\n    );\r\n    outline: none;\r\n    border: solid grey 2px;\r\n    margin-top: -7.2px;\r\n  }\r\n  &::-moz-range-thumb {\r\n    box-shadow: 0px 0px 0px #000000, 0px 0px 0px #0d0d0d;\r\n    border: 0px solid #000000;\r\n    height: 20px;\r\n    width: 39px;\r\n    border-radius: 15px;\r\n    background: grey;\r\n    cursor: pointer;\r\n  }\r\n\r\n  &:focus::-moz-range-thumb {\r\n    background: radial-gradient(\r\n      rgb(255, 255, 255) 0%,\r\n      rgb(141, 141, 141) 50%,\r\n      rgb(63, 63, 63) 100%\r\n    );\r\n    outline: none;\r\n    border: solid grey 2px;\r\n  }\r\n  &::-moz-range-thumb {\r\n    box-shadow: 0px 0px 0px #000000, 0px 0px 0px #0d0d0d;\r\n    border: 0px solid #000000;\r\n    height: 18px;\r\n    width: 18px;\r\n    border-radius: 50px;\r\n    background: grey;\r\n    cursor: pointer;\r\n  }\r\n\r\n  &:focus::-webkit-slider-thumb {\r\n    margin-top: -7.2px;\r\n  }\r\n  &::-webkit-slider-runnable-track {\r\n    width: 100%;\r\n    height: 10px;\r\n    cursor: pointer;\r\n    box-shadow: 0px 0px 0px #000000, 0px 0px 0px #0d0d0d;\r\n    background: lightgrey;\r\n    border-radius: 25px;\r\n    border: 0px solid #000101;\r\n  }\r\n  &::-moz-range-track {\r\n    width: 100%;\r\n    height: 10px;\r\n    cursor: pointer;\r\n    box-shadow: 0px 0px 0px #000000, 0px 0px 0px #0d0d0d;\r\n    background: lightgrey;\r\n    border-radius: 25px;\r\n    border: 0px solid #000101;\r\n  }\r\n  &:focus::-moz-range-track {\r\n    outline: none;\r\n    background: linear-gradient(\r\n      225deg,\r\n      rgb(63, 63, 63) 0%,\r\n      rgb(141, 141, 141) 25%,\r\n      rgb(255, 255, 255) 50%,\r\n      rgb(141, 141, 141) 75%,\r\n      rgb(63, 63, 63) 100%\r\n    );\r\n    border: solid grey 2px;\r\n  }\r\n  &:focus::-webkit-slider-runnable-track {\r\n    outline: none;\r\n    background: linear-gradient(\r\n      225deg,\r\n      rgb(63, 63, 63) 0%,\r\n      rgb(141, 141, 141) 25%,\r\n      rgb(255, 255, 255) 50%,\r\n      rgb(141, 141, 141) 75%,\r\n      rgb(63, 63, 63) 100%\r\n    );\r\n    border: solid grey 2px;\r\n  }\r\n`\r\n\r\nexport const Slider: React.FC<SliderProps> = ({\r\n  min,\r\n  max,\r\n  currentValue,\r\n  id,\r\n  label,\r\n  vertical,\r\n  setFunction,\r\n  className,\r\n  valueSuffix,\r\n  hideValue,\r\n  verticalHeight,\r\n}) => {\r\n  return (\r\n    <div className={className} style={{ position: \"relative\" }}>\r\n      <SliderLabel htmlFor={id} styleHeight={verticalHeight}>\r\n        {label}\r\n        {hideValue ? \"\" : `: ${currentValue}${valueSuffix ? valueSuffix : \"\"}`}\r\n      </SliderLabel>\r\n      <SliderInputRange\r\n        className={vertical ? \"vertical\" : \"\"}\r\n        id={id}\r\n        type=\"range\"\r\n        min={min}\r\n        max={max}\r\n        value={currentValue}\r\n        styleHeight={verticalHeight}\r\n        onChange={({ currentTarget: { value } }) => {\r\n          const convertedValue = Number.parseInt(value)\r\n          if (!Number.isNaN(convertedValue)) {\r\n            setFunction(convertedValue)\r\n          }\r\n        }}\r\n      />\r\n    </div>\r\n  )\r\n}\r\n","import styled from \"styled-components\"\r\nimport { P5Canvas } from \"./P5Canvas\"\r\nimport React, { useState, useContext, useEffect } from \"react\"\r\nimport { polygonGroupsStateContext } from \"reducer-contexts/polygon-groups\"\r\nimport { backgroundStateContext } from \"reducer-contexts/background\"\r\nimport { ModalBox } from \"./ModalBox\"\r\nimport { generateGifSketch } from \"polygon-logic/polygon-p5-draw\"\r\nimport { Slider } from \"./Slider\"\r\nimport { StyledButton } from \"common-styled-components/StyledButton\"\r\n\r\nimport download from \"downloadjs\"\r\n\r\ndeclare class GIF {\r\n  constructor(options: {\r\n    workers: number\r\n    quality: number\r\n    workerScript: string\r\n    dither: string\r\n  })\r\n\r\n  on(\r\n    type: \"start\" | \"abort\" | \"finished\" | \"progress\",\r\n    callback: Function\r\n  ): void\r\n  removeListener(\r\n    type: \"start\" | \"abort\" | \"finished\" | \"progress\",\r\n    callback: Function\r\n  ): void\r\n  render(): void\r\n  abort(): void\r\n  addFrame(canvas: any, options: any): void\r\n}\r\n\r\nconst GifModalInternalWrappingForm = styled.form`\r\n  width: 100%;\r\n  min-height: 150px;\r\n  display: grid;\r\n  justify-content: center;\r\n  align-content: center;\r\n  grid-gap: 10px;\r\n  font-size: 20px;\r\n  grid-auto-columns: minmax(280px, 80%);\r\n  justify-items: center;\r\n`\r\nconst GifCanvas = styled(P5Canvas)`\r\n  display: flex;\r\n  justify-content: center;\r\n  align-items: center;\r\n`\r\n\r\nconst GifNameInput = styled.input`\r\n  height: 20px;\r\n  font-size: 16px;\r\n  margin: 0 10px;\r\n  border: solid 2px lightgrey;\r\n  border-radius: 4px;\r\n  padding: 3px;\r\n  &:focus,\r\n  &:hover {\r\n    outline: none;\r\n    border-color: grey;\r\n    background: dimgrey;\r\n    color: snow;\r\n  }\r\n`\r\n\r\nconst gifOptions = {\r\n  workers: 2,\r\n  quality: 5,\r\n  workerScript: \"/playing-with-polygons/js/gif.worker.js\",\r\n  dither: \"FalseFloydSteinberg\",\r\n}\r\n\r\n// IF the included script isn't on the page, just don't do anything\r\nlet gif = typeof GIF !== \"undefined\" ? new GIF(gifOptions) : null\r\n\r\nexport const GenerateGifModal: React.FC = () => {\r\n  const [editModalIsClosed, setEditModalIsClosed] = useState(true)\r\n  const polygonContext = useContext(polygonGroupsStateContext)\r\n  const backgroundState = useContext(backgroundStateContext)\r\n\r\n  const [recordingLength, setRecordingLength] = useState(5)\r\n  const [currentProgress, setCurrentProgress] = useState(0)\r\n\r\n  type componentModes = \"initial\" | \"recording\" | \"processing\" | \"saving\"\r\n  const [gifGenerationMode, setGifGenerationMode] = useState<componentModes>(\r\n    \"initial\"\r\n  )\r\n  const [startGenerating, setStartGenerating] = useState(false)\r\n  const [renderHasStarted, setRenderHasStarted] = useState(false)\r\n  const [renderFinished, setRenderFinished] = useState(false)\r\n\r\n  const [gifFile, setGifFile] = useState<Blob | null>(null)\r\n\r\n  // Reset on close\r\n  useEffect(() => {\r\n    if (gif === null) return\r\n    if (editModalIsClosed) {\r\n      setCurrentProgress(0)\r\n      setRenderHasStarted(false)\r\n      setRenderFinished(false)\r\n      setStartGenerating(false)\r\n      setGifFile(null)\r\n    }\r\n  }, [editModalIsClosed])\r\n\r\n  //setup gif generation handlers\r\n  useEffect(() => {\r\n    if (gif === null) return\r\n    const progressHandler = function (progression: any) {\r\n      const roundedProgression = Math.round(progression * 100)\r\n      setCurrentProgress(roundedProgression)\r\n    }\r\n    const startHandler = (starting: any) => {\r\n      setRenderHasStarted(true)\r\n    }\r\n    const abortHandler = (aborting: any) => {}\r\n    const finishedHandler = function (finishedBlob: Blob) {\r\n      setRenderFinished(true)\r\n      setGifFile(finishedBlob)\r\n    }\r\n\r\n    gif.on(\"start\", startHandler)\r\n    gif.on(\"abort\", abortHandler)\r\n    gif.on(\"finished\", finishedHandler)\r\n    gif.on(\"progress\", progressHandler)\r\n\r\n    if (editModalIsClosed) {\r\n      gif.abort()\r\n      gif = new GIF(gifOptions)\r\n    }\r\n    return () => {\r\n      if (gif === null) return\r\n      gif.removeListener(\"start\", startHandler)\r\n      gif.removeListener(\"abort\", abortHandler)\r\n      gif.removeListener(\"finished\", finishedHandler)\r\n      gif.removeListener(\"progress\", progressHandler)\r\n      gif.abort()\r\n      gif = new GIF(gifOptions)\r\n    }\r\n  }, [editModalIsClosed])\r\n\r\n  // Contain the logic for what mode the gif generation is in\r\n  useEffect(() => {\r\n    if (startGenerating) {\r\n      if (renderHasStarted) {\r\n        if (renderFinished && gifFile) {\r\n          setGifGenerationMode(\"saving\")\r\n        } else {\r\n          setGifGenerationMode(\"processing\")\r\n        }\r\n      } else {\r\n        setGifGenerationMode(\"recording\")\r\n      }\r\n    } else {\r\n      setGifGenerationMode(\"initial\")\r\n    }\r\n  }, [renderHasStarted, renderFinished, startGenerating, gifFile])\r\n  if (gif === null) return null\r\n  return (\r\n    <ModalBox\r\n      buttonText=\"Make Gif\"\r\n      title=\"Make Gif\"\r\n      StyledButton={StyledButton}\r\n      isClosed={editModalIsClosed}\r\n      setIsClosed={setEditModalIsClosed}\r\n    >\r\n      <GifModalInternalWrappingForm\r\n        onSubmit={(event) => {\r\n          event.preventDefault()\r\n        }}\r\n      >\r\n        {(() => {\r\n          switch (gifGenerationMode) {\r\n            case \"initial\":\r\n              return (\r\n                <>\r\n                  <Slider\r\n                    label=\"Gif Length\"\r\n                    min={1}\r\n                    max={10}\r\n                    currentValue={recordingLength}\r\n                    setFunction={setRecordingLength}\r\n                    id={\"gif-recording-length-slider\"}\r\n                    valueSuffix={\" seconds\"}\r\n                  />\r\n                  <StyledButton\r\n                    type=\"submit\"\r\n                    onClick={() => {\r\n                      setStartGenerating(true)\r\n                    }}\r\n                  >\r\n                    Start Generating\r\n                  </StyledButton>\r\n                </>\r\n              )\r\n            case \"recording\":\r\n              return (\r\n                <>\r\n                  <p>Recording</p>\r\n                  <GifCanvas\r\n                    sketch={generateGifSketch({\r\n                      polygonGroups: polygonContext,\r\n                      windowSize: { height: 250, width: 250 },\r\n                      rgbaBackgroundColour: backgroundState.rgba,\r\n                      rgbBackgroundColour: backgroundState.rgb,\r\n                      shouldRedrawBackground: backgroundState.shouldRedraw,\r\n                      gifClass: gif,\r\n                      recordingLength: recordingLength,\r\n                      scale: 0.3,\r\n                    })}\r\n                  />\r\n                </>\r\n              )\r\n            case \"processing\":\r\n              return <p>Processing : {currentProgress}%</p>\r\n            case \"saving\": {\r\n              const imgSrc =\r\n                URL?.createObjectURL && gifFile\r\n                  ? URL.createObjectURL(gifFile)\r\n                  : null\r\n              return (\r\n                <>\r\n                  <p>Finished</p>\r\n                  {imgSrc && <img alt=\"preview gif\" src={imgSrc} />}\r\n                  <GifSaveOptions gifFile={gifFile as Blob} />\r\n                </>\r\n              )\r\n            }\r\n          }\r\n        })()}\r\n      </GifModalInternalWrappingForm>\r\n    </ModalBox>\r\n  )\r\n}\r\n\r\nconst GifSaveOptions: React.FC<{ gifFile: Blob }> = ({ gifFile }) => {\r\n  const [saveFileName, setSaveFileName] = useState(\"polygon\")\r\n  return (\r\n    <>\r\n      <div>\r\n        <label htmlFor=\"save-file-name\">Save file name:</label>\r\n        <GifNameInput\r\n          id=\"save-file-name\"\r\n          minLength={1}\r\n          value={saveFileName}\r\n          onChange={({ currentTarget: { value } }) => {\r\n            setSaveFileName(value)\r\n          }}\r\n        />\r\n      </div>\r\n      <StyledButton\r\n        type=\"submit\"\r\n        onClick={() => {\r\n          download(\r\n            gifFile,\r\n            saveFileName\r\n              .trim()\r\n              .replace(/[^\\w\\s]/gi, \"\")\r\n              .toLocaleLowerCase()\r\n              .replace(/\\s+/gi, \"-\")\r\n          )\r\n        }}\r\n      >\r\n        Download Gif\r\n      </StyledButton>\r\n      <a\r\n        href=\"https://twitter.com/intent/tweet?screen_name=PlayingPolygons\"\r\n        data-related=\"@PlayingPolygons\"\r\n        data-dnt=\"true\"\r\n        data-show-count=\"false\"\r\n      >\r\n        Tweet to @PlayingPolygons\r\n      </a>\r\n    </>\r\n  )\r\n}\r\n","import React from \"react\"\r\nimport styled, { css } from \"styled-components\"\r\n\r\ninterface CheckboxInputProps {\r\n  checkedText?: { checked: string; unchecked: string }\r\n  svgBackground?: string\r\n  transformFlip?: boolean\r\n}\r\nconst CheckboxInput = styled.input<CheckboxInputProps>`\r\n  ${({ checkedText, svgBackground, transformFlip }) => {\r\n    const svgBackgroundCss = css`\r\n    background-image: url(\"${svgBackground}\");\r\n    background-position: center center;\r\n    background-repeat: no-repeat;\r\n    background-size: 90%;\r\n    `\r\n\r\n    return css`\r\n      height: 0px;\r\n      width: 0px;\r\n      overflow: hidden;\r\n      clip: rect(1px, 1px, 1px, 1px);\r\n      position: absolute !important;\r\n\r\n      & + label{\r\n        display: grid;\r\n        grid-template-rows: 1em 50px;\r\n        grid-gap: 5px;\r\n      }\r\n\r\n      & + label .button {\r\n        display: block;\r\n        box-sizing: border-box;\r\n        position: relative;\r\n\r\n        &::before,\r\n        &::after {\r\n          content: \"\";\r\n          position: absolute;\r\n          left: 0;\r\n          top: 50%;\r\n          transform: translateY(-50%);\r\n        }\r\n        &::before {\r\n          background: lightgrey;\r\n          height: 50px;\r\n          width: 90px;\r\n          border-radius: 50px;\r\n        }\r\n        &::after {\r\n          content: \"${checkedText ? checkedText.unchecked : \"\"}\";\r\n          display: flex;\r\n          justify-content: center;\r\n          align-items: center;\r\n          background: Gainsboro;\r\n          margin: 0 5px;\r\n          border: solid 2px silver;\r\n          width: 38px;\r\n          height: 38px;\r\n          transform: translate(35px, -50%) ${\r\n            transformFlip ? \"rotateX(0deg) rotateY(180deg)\" : \"\"\r\n          };\r\n          ${svgBackground ? svgBackgroundCss : \"\"}\r\n          border-radius: 25px;\r\n          transition: transform 200ms ease-in-out;\r\n        }\r\n      }\r\n      \r\n      &:checked + label .button {\r\n        &::after {\r\n          content: \"${checkedText ? checkedText.checked : \"\"}\";\r\n          ${svgBackground ? svgBackgroundCss : \"\"}\r\n          transform: translate(0, -50%);\r\n        }\r\n      }\r\n      &:checked:focus,\r\n      &:checked:hover {\r\n        & + label .button::after {\r\n          transform: translate(0, -50%);\r\n        }\r\n      }\r\n\r\n      &:focus,\r\n      &:hover {\r\n        & + label .button::after {\r\n          border: solid 3px silver;\r\n          width: 35px;\r\n          height: 35px;\r\n          transform: translate(35px, -50%) ${\r\n            transformFlip ? \"rotateX(0deg) rotateY(180deg)\" : \"\"\r\n          };\r\n        }\r\n        & + label .button::before {\r\n          background: grey;\r\n        }\r\n      }`\r\n  }}\r\n`\r\n\r\ninterface ToggleSwitchProps extends CheckboxInputProps {\r\n  label: string\r\n  id: string\r\n  checked: boolean\r\n  setFunction: React.Dispatch<React.SetStateAction<boolean>>\r\n}\r\n\r\nexport const ToggleSwitch: React.FC<ToggleSwitchProps> = ({\r\n  label,\r\n  id,\r\n  checked,\r\n  setFunction,\r\n  checkedText,\r\n  svgBackground,\r\n  transformFlip,\r\n}) => {\r\n  return (\r\n    <div>\r\n      <CheckboxInput\r\n        type=\"checkbox\"\r\n        id={id}\r\n        checked={checked}\r\n        onChange={({ currentTarget: { checked } }) => {\r\n          setFunction(checked)\r\n        }}\r\n        checkedText={checkedText}\r\n        svgBackground={svgBackground}\r\n        transformFlip={transformFlip}\r\n      />\r\n      <label htmlFor={id}>\r\n        <span className=\"text\">{label}</span>\r\n        <span className=\"button\" />\r\n      </label>\r\n    </div>\r\n  )\r\n}\r\n","import styled from \"styled-components\"\r\nimport React, { useContext, useState, useEffect } from \"react\"\r\nimport {\r\n  backgroundDispatchContext,\r\n  backgroundStateContext,\r\n} from \"reducer-contexts/background\"\r\nimport { ModalBox } from \"./ModalBox\"\r\nimport { ToggleSwitch } from \"./ToggleSwitch\"\r\nimport { Slider } from \"./Slider\"\r\nimport { StyledButton } from \"common-styled-components/StyledButton\"\r\n\r\nconst ModalInternalWrappingForm = styled.form`\r\n  display: grid;\r\n  grid-gap: 10px;\r\n  font-size: 20px;\r\n`\r\n\r\nconst ColourPickerInput = styled.input`\r\n  box-sizing: border-box;\r\n  width: 100%;\r\n  height: 35px;\r\n  padding: 5px;\r\n  margin: 5px 0 0;\r\n  border-radius: 5px;\r\n`\r\n\r\nexport const EditBackgroundModal: React.FC = () => {\r\n  const backgroundDispatch = useContext(backgroundDispatchContext)\r\n  const backgroundState = useContext(backgroundStateContext)\r\n\r\n  const [canUpdate, setCanUpdate] = useState(false)\r\n  const [editModalIsClosed, setEditModalIsClosed] = useState(true)\r\n  const [shouldRedrawBackground, setShouldRedrawBackground] = useState(\r\n    backgroundState.shouldRedraw\r\n  )\r\n  const [backgroundHex, setBackgroundHex] = useState(backgroundState.hex)\r\n  const [backgroundOpacity, setBackgroundOpacity] = useState(\r\n    backgroundState.opacity\r\n  )\r\n\r\n  useEffect(() => {\r\n    if (\r\n      shouldRedrawBackground !== backgroundState.shouldRedraw ||\r\n      backgroundHex !== backgroundState.hex ||\r\n      backgroundOpacity !== backgroundState.opacity\r\n    ) {\r\n    }\r\n    setCanUpdate(true)\r\n  }, [\r\n    backgroundState,\r\n    shouldRedrawBackground,\r\n    backgroundHex,\r\n    backgroundOpacity,\r\n  ])\r\n\r\n  return (\r\n    <ModalBox\r\n      buttonText=\"Edit Background\"\r\n      title=\"Edit Background\"\r\n      StyledButton={StyledButton}\r\n      isClosed={editModalIsClosed}\r\n      setIsClosed={setEditModalIsClosed}\r\n    >\r\n      <ModalInternalWrappingForm\r\n        onSubmit={({ preventDefault }) => {\r\n          preventDefault()\r\n        }}\r\n      >\r\n        <ToggleSwitch\r\n          checked={shouldRedrawBackground}\r\n          id=\"redraw-background-toggle\"\r\n          label=\"Redraw Background?\"\r\n          setFunction={setShouldRedrawBackground}\r\n          checkedText={{ checked: \"Yes\", unchecked: \"No\" }}\r\n        />\r\n        <div>\r\n          <label htmlFor=\"background-colour-picker\">Background Colour</label>\r\n          <ColourPickerInput\r\n            id=\"background-colour-picker\"\r\n            type=\"color\"\r\n            value={backgroundHex}\r\n            onChange={({ currentTarget: { value } }) => {\r\n              setBackgroundHex(value)\r\n            }}\r\n          />\r\n        </div>\r\n        <Slider\r\n          label=\"Opacity\"\r\n          id=\"background-opacity\"\r\n          currentValue={backgroundOpacity}\r\n          max={100}\r\n          min={0}\r\n          setFunction={setBackgroundOpacity}\r\n          valueSuffix={\"%\"}\r\n        />\r\n        <StyledButton\r\n          type=\"submit\"\r\n          disabled={!canUpdate}\r\n          onClick={() => {\r\n            backgroundDispatch({\r\n              type: \"UPDATE_BACKGROUND_WITH_HEX\",\r\n              shouldRedraw: shouldRedrawBackground,\r\n              hexColour: backgroundHex,\r\n              opacity: backgroundOpacity,\r\n            })\r\n            setCanUpdate(false)\r\n            setEditModalIsClosed(true)\r\n          }}\r\n        >\r\n          Update\r\n        </StyledButton>\r\n      </ModalInternalWrappingForm>\r\n    </ModalBox>\r\n  )\r\n}\r\n","import React, { useContext, useEffect, useRef, useState } from \"react\"\r\nimport styled from \"styled-components\"\r\n\r\nimport {\r\n  polygonGroupsStateContext,\r\n  PolygonGroup,\r\n} from \"reducer-contexts/polygon-groups\"\r\nimport { generateAllPolygonRingGroupsSketch } from \"polygon-logic/polygon-p5-draw\"\r\n\r\nimport { P5Canvas } from \"components/P5Canvas\"\r\nimport { backgroundStateContext } from \"reducer-contexts/background\"\r\n\r\nconst MainCanvasWrapper = styled.div`\r\n  background: white;\r\n  width: 100%;\r\n  height: 100%;\r\n  max-width: 100vw;\r\n  text-align: center;\r\n`\r\n\r\nfunction generateKey(\r\n  polygonGroups: Readonly<PolygonGroup[]>,\r\n  containerSize: { height: number; width: number }\r\n): string {\r\n  const polygonGroupLength = polygonGroups.length\r\n  const polygonRingLengths = polygonGroups\r\n    .map((polygonGroup) => polygonGroup.rings.length)\r\n    .join(\"-\")\r\n  const polygonRingRotations = polygonGroups\r\n    .map((polygonGroup) =>\r\n      polygonGroup.rings.map((ring) => ring.rotation.startingRotation).join(\"-\")\r\n    )\r\n    .join(\"-\")\r\n\r\n  return `${polygonGroupLength}-${polygonRingLengths}-${polygonRingRotations}-${containerSize.width}-${containerSize.height}`\r\n}\r\n\r\nexport const MainCanvas: React.FC = () => {\r\n  const polygonContext = useContext(polygonGroupsStateContext)\r\n  const backgroundState = useContext(backgroundStateContext)\r\n  const [currentSize, setCurrentSize] = useState({ height: 0, width: 0 })\r\n  const mainWrapper = useRef(\r\n    null\r\n  ) as React.MutableRefObject<null | HTMLDivElement>\r\n\r\n  /**\r\n   * Updates the canvas size when the ref for the wrapping component\r\n   * comes back.\r\n   *\r\n   * Also listens to the window resize and updates the canvas size if\r\n   * it changes. But its throttled by 250ms\r\n   */\r\n  useEffect(() => {\r\n    if (mainWrapper?.current) {\r\n      setCurrentSize({\r\n        height: mainWrapper.current.offsetHeight,\r\n        width: mainWrapper.current.offsetWidth,\r\n      })\r\n    }\r\n  }, [mainWrapper, setCurrentSize])\r\n\r\n  useEffect(() => {\r\n    function updateCanvasSize() {\r\n      if (mainWrapper?.current) {\r\n        setCurrentSize({\r\n          height: mainWrapper.current.offsetHeight,\r\n          width: mainWrapper.current.offsetWidth,\r\n        })\r\n      }\r\n    }\r\n\r\n    updateCanvasSize()\r\n\r\n    let timeoutId: number\r\n    const throttledWindowUpdate = () => {\r\n      clearTimeout(timeoutId)\r\n      timeoutId = setTimeout(() => updateCanvasSize(), 250)\r\n    }\r\n\r\n    window.addEventListener(\"resize\", throttledWindowUpdate)\r\n    return () => {\r\n      window.removeEventListener(\"resize\", throttledWindowUpdate)\r\n    }\r\n  }, [mainWrapper, setCurrentSize])\r\n\r\n  return (\r\n    <MainCanvasWrapper ref={mainWrapper}>\r\n      <P5Canvas\r\n        sketch={generateAllPolygonRingGroupsSketch({\r\n          polygonGroups: polygonContext,\r\n          windowSize: currentSize,\r\n          rgbaBackgroundColour: backgroundState.rgba,\r\n          rgbBackgroundColour: backgroundState.rgb,\r\n          shouldRedrawBackground: backgroundState.shouldRedraw,\r\n        })}\r\n        key={generateKey(polygonContext, currentSize)}\r\n      />\r\n    </MainCanvasWrapper>\r\n  )\r\n}\r\n","import styled from \"styled-components\"\r\n\r\nexport const Navigation = styled.nav`\r\n  background-color: grey;\r\n  display: flex;\r\n  justify-content: center;\r\n  align-items: center;\r\n  height: 100%;\r\n  box-shadow: inset 0px 4px 9px -2px #404040;\r\n`\r\n","import styled from \"styled-components\"\r\n\r\nexport const MainContent = styled.div`\r\n  display: grid;\r\n  grid-template-rows: minmax(90%, 90vh) minmax(10%, 10vh);\r\n  grid-template-columns: minmax(100%, 100vw);\r\n  grid-row: 1;\r\n  grid-column: 1;\r\n`\r\n","import React, { useContext } from \"react\"\r\n\r\nimport { navigationDispatchContext } from \"reducer-contexts/navigation\"\r\n\r\nimport { GenerateGifModal } from \"components/ShareGifModal\"\r\nimport { EditBackgroundModal } from \"components/EditBackgroundModal\"\r\nimport { MainCanvas } from \"components/MainCanvas\"\r\n\r\nimport { StyledButton } from \"common-styled-components/StyledButton\"\r\nimport { Navigation } from \"common-styled-components/Navigation\"\r\nimport { MainContent } from \"common-styled-components/MainContent\"\r\n\r\nexport const ViewScreen = () => {\r\n  const navigationDispatch = useContext(navigationDispatchContext)\r\n  return (\r\n    <MainContent>\r\n      <MainCanvas />\r\n      <Navigation>\r\n        <EditBackgroundModal />\r\n        <GenerateGifModal />\r\n        <StyledButton\r\n          type=\"button\"\r\n          onClick={() => {\r\n            navigationDispatch({ type: \"GROUP_SCREEN\" })\r\n          }}\r\n        >\r\n          Edit Polygons\r\n        </StyledButton>\r\n      </Navigation>\r\n    </MainContent>\r\n  )\r\n}\r\n","import React, { useRef } from \"react\"\r\nimport { Slider } from \"./Slider\"\r\nimport styled from \"styled-components\"\r\n\r\ninterface CoordinatePickerProps {\r\n  currentY: number\r\n  currentX: number\r\n  setYFunction: React.Dispatch<React.SetStateAction<number>>\r\n  setXFunction: React.Dispatch<React.SetStateAction<number>>\r\n  scrollingParentRef?: React.RefObject<HTMLElement>\r\n}\r\n\r\nconst CoordinatePickerWrappingDiv = styled.div`\r\n  display: grid;\r\n  grid-template-columns: 30px 1fr 1fr;\r\n  grid-template-rows: 1fr 1fr 30px;\r\n  width: 250px;\r\n  height: 250px;\r\n  margin: auto;\r\n`\r\nconst YSliderWrappingDiv = styled.div`\r\n  grid-column: 1/2;\r\n  grid-row: 1/3;\r\n  justify-self: center;\r\n  align-self: center;\r\n  text-align: center;\r\n`\r\nconst XSliderWrappingDiv = styled.div`\r\n  grid-column: 2/4;\r\n  grid-row: 3/4;\r\n  justify-self: center;\r\n  align-self: center;\r\n`\r\nconst XSlider = styled(Slider)`\r\n  display: grid;\r\n  grid-template-columns: 10px 1fr;\r\n  align-items: center;\r\n  grid-gap: 10px;\r\n  transform: translateX(-10px);\r\n`\r\n\r\nconst CoordinatePositionsDiv = styled.div`\r\n  grid-column: 1/2;\r\n  grid-row: 3/4;\r\n  justify-self: center;\r\n  align-self: center;\r\n  text-align: center;\r\n`\r\nconst CoordinatePanelDiv = styled.div`\r\n  background: lightgray;\r\n  grid-column: 2/4;\r\n  grid-row: 1/3;\r\n  position: relative;\r\n  border: 10px solid darkgrey;\r\n  &:before,\r\n  &:after {\r\n    position: absolute;\r\n    content: \"\";\r\n    border: 2px darkgrey dashed;\r\n  }\r\n  &:before {\r\n    width: 100%;\r\n    top: 50%;\r\n    transform: translateY(-2px);\r\n  }\r\n  &:after {\r\n    z-index: 0;\r\n    height: 100%;\r\n    right: 50%;\r\n    transform: translateX(2px);\r\n  }\r\n`\r\nconst CoordinateThumbDiv = styled.div`\r\n  position: absolute;\r\n  z-index: 1;\r\n  background: grey;\r\n  border-radius: 20px;\r\n  width: 30px;\r\n  height: 30px;\r\n  top: 0%;\r\n  right: 0%;\r\n  transform: translate(50%, -50%);\r\n  &.moving {\r\n    background: darkgrey;\r\n    border: solid 2px grey;\r\n    width: 28px;\r\n    height: 28px;\r\n  }\r\n`\r\n\r\ninterface UpdateThumbPositionParams {\r\n  x: number\r\n  y: number\r\n  coordinatePanel: React.RefObject<HTMLDivElement>\r\n  scrollingParentRef?: React.RefObject<HTMLElement>\r\n  setXFunction: (value: React.SetStateAction<number>) => void\r\n  setYFunction: (value: React.SetStateAction<number>) => void\r\n}\r\n\r\nfunction updateThumbPosition({\r\n  x,\r\n  y,\r\n  coordinatePanel,\r\n  scrollingParentRef,\r\n  setXFunction,\r\n  setYFunction,\r\n}: UpdateThumbPositionParams) {\r\n  if (coordinatePanel.current === null) return\r\n  //Get the difference from the panel between the panel edge and the thumb\r\n  const diffX = x - coordinatePanel.current.offsetLeft\r\n  let diffY = y - coordinatePanel.current.offsetTop\r\n  //If we have a scrolling parent, account for its current scroll\r\n  if (scrollingParentRef?.current?.scrollTop) {\r\n    diffY = diffY + scrollingParentRef.current.scrollTop\r\n  }\r\n\r\n  //Do some fancy math that I haven't spent the time to understand\r\n  const newX = Math.round(\r\n    -100 + ((100 - -100) * diffX) / coordinatePanel.current.offsetWidth\r\n  )\r\n  const newY = Math.round(\r\n    100 + ((-100 - 100) * diffY) / coordinatePanel.current.offsetHeight\r\n  )\r\n  //Locks the values to the inside of the panel and set them\r\n  if (newX >= -100 && newX <= 100) {\r\n    setXFunction(newX)\r\n  } else if (newX >= -100) {\r\n    setXFunction(100)\r\n  } else if (newX <= 100) {\r\n    setXFunction(-100)\r\n  }\r\n\r\n  if (newY >= -100 && newY <= 100) {\r\n    setYFunction(newY)\r\n  } else if (newY >= -100) {\r\n    setYFunction(100)\r\n  } else if (newY <= 100) {\r\n    setYFunction(-100)\r\n  }\r\n}\r\n\r\ninterface HandleThumbDragParams {\r\n  pointerDownEvent: React.MouseEvent<HTMLDivElement, PointerEvent>\r\n  coordinatePanel: React.RefObject<HTMLDivElement>\r\n  scrollingParentRef?: React.RefObject<HTMLElement>\r\n  setXFunction: (value: React.SetStateAction<number>) => void\r\n  setYFunction: (value: React.SetStateAction<number>) => void\r\n}\r\n\r\nconst handleThumbDrag = ({\r\n  pointerDownEvent,\r\n  coordinatePanel,\r\n  scrollingParentRef,\r\n  setXFunction,\r\n  setYFunction,\r\n}: HandleThumbDragParams) => {\r\n  pointerDownEvent.preventDefault()\r\n  pointerDownEvent.stopPropagation()\r\n\r\n  const elementClassList = pointerDownEvent.currentTarget.classList\r\n  elementClassList.add(\"moving\")\r\n\r\n  function pointerMove(pointerMoveEvent: PointerEvent) {\r\n    if (pointerMoveEvent.pointerType === \"touch\") return\r\n    updateThumbPosition({\r\n      x: pointerMoveEvent.pageX | pointerMoveEvent.clientX,\r\n      y: pointerMoveEvent.pageY | pointerMoveEvent.clientY,\r\n      scrollingParentRef,\r\n      setXFunction,\r\n      setYFunction,\r\n      coordinatePanel,\r\n    })\r\n    pointerMoveEvent.preventDefault()\r\n    pointerMoveEvent.stopPropagation()\r\n  }\r\n  function handleTouchMove(touchMoveEvent: TouchEvent) {\r\n    updateThumbPosition({\r\n      x: touchMoveEvent.touches[0].pageX,\r\n      y: touchMoveEvent.touches[0].pageY,\r\n      scrollingParentRef,\r\n      setXFunction,\r\n      setYFunction,\r\n      coordinatePanel,\r\n    })\r\n    touchMoveEvent.preventDefault()\r\n    touchMoveEvent.stopPropagation()\r\n  }\r\n\r\n  function cleanUpEvents() {\r\n    elementClassList.remove(\"moving\")\r\n    if (coordinatePanel?.current) {\r\n      coordinatePanel.current.removeEventListener(\"touchmove\", handleTouchMove)\r\n    }\r\n    document.removeEventListener(\"pointerup\", cleanUpEvents)\r\n    document.removeEventListener(\"pointermove\", pointerMove)\r\n  }\r\n\r\n  if (coordinatePanel?.current) {\r\n    coordinatePanel.current.addEventListener(\"touchmove\", handleTouchMove)\r\n  }\r\n  document.addEventListener(\"pointerup\", cleanUpEvents)\r\n  document.addEventListener(\"pointermove\", pointerMove)\r\n}\r\n\r\ninterface getNewValueForRangeOptions {\r\n  oldValue: number\r\n  oldMin: number\r\n  oldMax: number\r\n  newMin: number\r\n  newMax: number\r\n}\r\n\r\nfunction getNewValueForRange({\r\n  oldValue,\r\n  oldMin,\r\n  oldMax,\r\n  newMin,\r\n  newMax,\r\n}: getNewValueForRangeOptions): number {\r\n  return ((oldValue - oldMin) * (newMin - newMax)) / (oldMax - oldMin) + newMax\r\n}\r\n\r\nexport const CoordinatePicker: React.FC<CoordinatePickerProps> = ({\r\n  currentY,\r\n  setYFunction,\r\n  currentX,\r\n  setXFunction,\r\n  scrollingParentRef,\r\n}) => {\r\n  const yToTopPosition = getNewValueForRange({\r\n    oldValue: currentY,\r\n    oldMin: -100,\r\n    oldMax: 100,\r\n    newMin: 0,\r\n    newMax: 100,\r\n  })\r\n  const xToTopPosition = getNewValueForRange({\r\n    oldValue: currentX,\r\n    oldMin: -100,\r\n    oldMax: 100,\r\n    newMin: 0,\r\n    newMax: 100,\r\n  })\r\n  const positionStyles = {\r\n    top: `${yToTopPosition}%`,\r\n    right: `${xToTopPosition}%`,\r\n  }\r\n\r\n  const coordinatePanel = useRef<HTMLDivElement>(null)\r\n\r\n  return (\r\n    <CoordinatePickerWrappingDiv>\r\n      <YSliderWrappingDiv>\r\n        <Slider\r\n          max={100}\r\n          min={-100}\r\n          currentValue={currentY}\r\n          label=\"Y\"\r\n          id=\"y\"\r\n          vertical={true}\r\n          setFunction={setYFunction}\r\n          hideValue\r\n          verticalHeight={125}\r\n        />\r\n      </YSliderWrappingDiv>\r\n      <CoordinatePositionsDiv>\r\n        <p>X:{currentX}</p>\r\n        <p>Y:{currentY}</p>\r\n      </CoordinatePositionsDiv>\r\n      <CoordinatePanelDiv\r\n        ref={coordinatePanel}\r\n        onClick={(event) => {\r\n          updateThumbPosition({\r\n            x: event.pageX | event.clientX,\r\n            y: event.pageY | event.clientY,\r\n            scrollingParentRef,\r\n            setXFunction,\r\n            setYFunction,\r\n            coordinatePanel,\r\n          })\r\n          event.preventDefault()\r\n          event.stopPropagation()\r\n        }}\r\n      >\r\n        <CoordinateThumbDiv\r\n          style={positionStyles}\r\n          onPointerDown={(event) => {\r\n            handleThumbDrag({\r\n              pointerDownEvent: event,\r\n              coordinatePanel,\r\n              scrollingParentRef,\r\n              setXFunction,\r\n              setYFunction,\r\n            })\r\n          }}\r\n        />\r\n      </CoordinatePanelDiv>\r\n      <XSliderWrappingDiv>\r\n        <XSlider\r\n          max={100}\r\n          min={-100}\r\n          currentValue={currentX}\r\n          label=\"X\"\r\n          id=\"x\"\r\n          setFunction={setXFunction}\r\n          hideValue\r\n        />\r\n      </XSliderWrappingDiv>\r\n    </CoordinatePickerWrappingDiv>\r\n  )\r\n}\r\n","import React, { useContext, useState, useEffect } from \"react\"\r\nimport styled from \"styled-components\"\r\n\r\nimport {\r\n  polygonGroupsStateContext,\r\n  polygonGroupsDispatchContext,\r\n  PolygonRing,\r\n  PolygonGroup,\r\n} from \"reducer-contexts/polygon-groups\"\r\n\r\nimport { navigationDispatchContext } from \"reducer-contexts/navigation\"\r\n\r\nimport {\r\n  generatePolygonGroupSketch,\r\n  generatePolygonRingSketch,\r\n} from \"polygon-logic/polygon-p5-draw\"\r\n\r\nimport { P5Canvas } from \"components/P5Canvas\"\r\nimport { ModalBox } from \"./ModalBox\"\r\nimport { CoordinatePicker } from \"./CoordinatePicker\"\r\nimport { backgroundStateContext } from \"reducer-contexts/background\"\r\nimport { StyledButton } from \"common-styled-components/StyledButton\"\r\n\r\nconst GroupsUl = styled.ul`\r\n  display: grid;\r\n  grid-gap: 10px;\r\n  background: whitesmoke;\r\n  list-style: none;\r\n  overflow-y: scroll;\r\n  height: 100%;\r\n`\r\n\r\nconst GroupsLi = styled.li`\r\n  background: white;\r\n  display: grid;\r\n  grid-gap: 10px;\r\n  grid-auto-rows: min-content;\r\n  border: 2px solid darkgrey;\r\n  border-radius: 10px;\r\n  margin: 10px;\r\n  padding: 10px 0;\r\n`\r\nconst AddGroupButton = styled(StyledButton)`\r\n  margin: 0 10px 10px;\r\n  width: calc(100% - 20px);\r\n`\r\n\r\nconst GroupCanvasGroupDiv = styled.div`\r\n  display: grid;\r\n  grid-gap: 10px;\r\n  grid-template-columns: 120px 120px;\r\n  justify-self: center;\r\n`\r\n\r\nconst CanvasWrappingDiv = styled.div`\r\n  grid-column: 1/4;\r\n  justify-self: center;\r\n`\r\n\r\nconst GroupCanvas = styled(P5Canvas)`\r\n  border: solid 4px gainsboro;\r\n  border-radius: 3px;\r\n  padding: 1px;\r\n  width: 200px;\r\n  height: 200px;\r\n`\r\n\r\nconst GroupDeleteButton = styled(StyledButton)`\r\n  min-width: 100px;\r\n  justify-self: center;\r\n  grid-column: 1/3;\r\n`\r\n\r\nconst UpdateCoordinateButton = styled(StyledButton)`\r\n  display: block;\r\n  width: 80%;\r\n  margin: 10px auto 0;\r\n`\r\n\r\nconst GroupCoordinateModal: React.FC<{\r\n  polygonGroup: PolygonGroup\r\n  groupIndex: number\r\n}> = ({ polygonGroup, groupIndex }) => {\r\n  const polygonGroupsDispatch = useContext(polygonGroupsDispatchContext)\r\n\r\n  const [canUpdate, setCanUpdate] = useState(false)\r\n  const [isClosed, setIsClosed] = useState(true)\r\n  const [x, setX] = useState(polygonGroup.position.x)\r\n  const [y, setY] = useState(polygonGroup.position.y)\r\n\r\n  useEffect(() => {\r\n    if (polygonGroup.position.x !== x || polygonGroup.position.y !== y) {\r\n      setCanUpdate(true)\r\n    }\r\n  }, [polygonGroup, x, y])\r\n\r\n  return (\r\n    <ModalBox\r\n      isClosed={isClosed}\r\n      setIsClosed={setIsClosed}\r\n      StyledButton={StyledButton}\r\n      buttonText=\"Edit Position\"\r\n      title=\"Edit Position\"\r\n    >\r\n      <CoordinatePicker\r\n        currentX={x}\r\n        currentY={y}\r\n        setYFunction={setY}\r\n        setXFunction={setX}\r\n      />\r\n      <UpdateCoordinateButton\r\n        type=\"button\"\r\n        disabled={!canUpdate}\r\n        onClick={() => {\r\n          setCanUpdate(false)\r\n          polygonGroupsDispatch({\r\n            type: \"UPDATE_POLYGON_GROUP_POSITION\",\r\n            group: groupIndex,\r\n            position: { x, y },\r\n          })\r\n          setIsClosed(true)\r\n        }}\r\n      >\r\n        Update\r\n      </UpdateCoordinateButton>\r\n    </ModalBox>\r\n  )\r\n}\r\n\r\nexport function GroupsEditor() {\r\n  const polygonGroupsState = useContext(polygonGroupsStateContext)\r\n  const polygonGroupsDispatch = useContext(polygonGroupsDispatchContext)\r\n  const backgroundState = useContext(backgroundStateContext)\r\n  const totalPolygonGroups = polygonGroupsState.length\r\n\r\n  return (\r\n    <GroupsUl>\r\n      {polygonGroupsState.map((polygonGroup, groupIndex) => {\r\n        const key = `${polygonGroup.rings.length}-${polygonGroup.rings[0].rotation.startingRotation}-${groupIndex}`\r\n        const isLastPolygonGroup = groupIndex === polygonGroupsState.length - 1\r\n\r\n        return (\r\n          <React.Fragment key={key}>\r\n            <GroupsLi aria-label={`Group ${groupIndex} Canvas`}>\r\n              <GroupCanvasGroupDiv>\r\n                <StyledButton\r\n                  onClick={() => {\r\n                    polygonGroupsDispatch({\r\n                      type: \"RANDOMIZE_POLYGON_RINGS\",\r\n                      group: groupIndex,\r\n                    })\r\n                  }}\r\n                >\r\n                  Randomize\r\n                </StyledButton>\r\n                <GroupCoordinateModal\r\n                  polygonGroup={polygonGroup}\r\n                  groupIndex={groupIndex}\r\n                />\r\n                <CanvasWrappingDiv>\r\n                  <GroupCanvas\r\n                    sketch={generatePolygonGroupSketch({\r\n                      polygonGroup: polygonGroup,\r\n                      windowSize: {\r\n                        height: 200,\r\n                        width: 200,\r\n                      },\r\n                      scale: 0.2,\r\n                      rgbaBackgroundColour: backgroundState.rgba,\r\n                      rgbBackgroundColour: backgroundState.rgb,\r\n                      shouldRedrawBackground: backgroundState.shouldRedraw,\r\n                    })}\r\n                  />\r\n                </CanvasWrappingDiv>\r\n                <GroupDeleteButton\r\n                  disabled={totalPolygonGroups === 1}\r\n                  onClick={() => {\r\n                    polygonGroupsDispatch({\r\n                      type: \"DELETE_POLYGON_GROUP\",\r\n                      group: groupIndex,\r\n                    })\r\n                  }}\r\n                >\r\n                  Delete\r\n                </GroupDeleteButton>\r\n              </GroupCanvasGroupDiv>\r\n              <PolygonRingsDisplay\r\n                polygonRings={polygonGroup.rings}\r\n                groupNumber={groupIndex}\r\n              />\r\n            </GroupsLi>\r\n            {isLastPolygonGroup && (\r\n              <li>\r\n                <AddGroupButton\r\n                  type=\"button\"\r\n                  onClick={() => {\r\n                    polygonGroupsDispatch({ type: \"CREATE_POLYGON_GROUP\" })\r\n                  }}\r\n                >\r\n                  Add Group\r\n                </AddGroupButton>\r\n              </li>\r\n            )}\r\n          </React.Fragment>\r\n        )\r\n      })}\r\n    </GroupsUl>\r\n  )\r\n}\r\n\r\nconst RingsUl = styled.ul`\r\n  display: grid;\r\n  grid-gap: 10px;\r\n  grid-auto-flow: column;\r\n  grid-auto-columns: max-content;\r\n  overflow-x: scroll;\r\n  margin: 0 10px;\r\n  padding: 10px;\r\n  border-radius: 8px;\r\n  box-shadow: inset 0px 0px 9px -2px #404040;\r\n`\r\n\r\nconst RingsLi = styled.li`\r\n  display: grid;\r\n  grid-auto-columns: 1fr;\r\n  grid-template-areas:\r\n    \"RANDOM RANDOM EDIT EDIT\"\r\n    \"CANVAS CANVAS CANVAS CANVAS\"\r\n    \". DELETE DELETE .\";\r\n  grid-gap: 10px;\r\n  padding: 10px;\r\n  border: solid 2px darkgrey;\r\n  border-radius: 5px;\r\n  &:last-child {\r\n    display: flex;\r\n    align-items: center;\r\n    justify-content: center;\r\n    border: none;\r\n  }\r\n`\r\nconst RingCanvasDiv = styled.div`\r\n  grid-area: CANVAS;\r\n  justify-self: center;\r\n`\r\nconst RingCanvas = styled(P5Canvas)`\r\n  border: solid 2px gainsboro;\r\n  border-radius: 3px;\r\n  padding: 1px;\r\n  width: 150px;\r\n  height: 150px;\r\n`\r\n\r\nconst RingEditButton = styled(StyledButton)`\r\n  grid-area: EDIT;\r\n`\r\nconst RingRandomizeButton = styled(StyledButton)`\r\n  grid-area: RANDOM;\r\n`\r\nconst RingDeleteButton = styled(StyledButton)`\r\n  grid-area: DELETE;\r\n`\r\n\r\nconst PolygonRingsDisplay: React.FC<{\r\n  polygonRings: PolygonRing[]\r\n  groupNumber: number\r\n}> = ({ polygonRings, groupNumber }) => {\r\n  const polygonGroupsDispatch = useContext(polygonGroupsDispatchContext)\r\n  const navigationDispatch = useContext(navigationDispatchContext)\r\n  const backgroundState = useContext(backgroundStateContext)\r\n\r\n  const totalPolygons = polygonRings.length\r\n  return (\r\n    <RingsUl>\r\n      {polygonRings.map((polygon, polygonIndex) => {\r\n        const isLastPolygon = totalPolygons === polygonIndex + 1\r\n        const key = `${polygonRings.length}-${polygon.rotation.startingRotation}-${polygonIndex}`\r\n        return (\r\n          <React.Fragment key={key}>\r\n            <RingsLi\r\n              aria-label={`Group ${groupNumber}, Ring ${polygonIndex} Canvas`}\r\n            >\r\n              <RingRandomizeButton\r\n                type=\"button\"\r\n                onClick={() => {\r\n                  polygonGroupsDispatch({\r\n                    type: \"RANDOMIZE_POLYGON\",\r\n                    group: groupNumber,\r\n                    polygon: polygonIndex,\r\n                  })\r\n                }}\r\n              >\r\n                Randomize\r\n              </RingRandomizeButton>\r\n              <RingEditButton\r\n                type=\"button\"\r\n                onClick={() => {\r\n                  navigationDispatch({\r\n                    type: \"POLYGON_SCREEN\",\r\n                    currentGroup: groupNumber,\r\n                    currentPolygon: polygonIndex,\r\n                  })\r\n                }}\r\n              >\r\n                Edit\r\n              </RingEditButton>\r\n\r\n              <RingCanvasDiv>\r\n                <RingCanvas\r\n                  sketch={generatePolygonRingSketch({\r\n                    polygonRing: polygon,\r\n                    windowSize: {\r\n                      width: 150,\r\n                      height: 150,\r\n                    },\r\n                    scale: 0.15,\r\n                    rgbaBackgroundColour: backgroundState.rgba,\r\n                    rgbBackgroundColour: backgroundState.rgb,\r\n                    shouldRedrawBackground: backgroundState.shouldRedraw,\r\n                  })}\r\n                />\r\n              </RingCanvasDiv>\r\n              <RingDeleteButton\r\n                type=\"button\"\r\n                disabled={totalPolygons === 1}\r\n                onClick={() => {\r\n                  polygonGroupsDispatch({\r\n                    type: \"DELETE_POLYGON_GROUP_RING\",\r\n                    group: groupNumber,\r\n                    polygon: polygonIndex,\r\n                  })\r\n                }}\r\n              >\r\n                Delete\r\n              </RingDeleteButton>\r\n            </RingsLi>\r\n            {isLastPolygon && (\r\n              <RingsLi>\r\n                <StyledButton\r\n                  type=\"button\"\r\n                  onClick={() => {\r\n                    polygonGroupsDispatch({\r\n                      type: \"CREATE_POLYGON\",\r\n                      group: groupNumber,\r\n                    })\r\n                  }}\r\n                >\r\n                  Add Polygon\r\n                </StyledButton>\r\n              </RingsLi>\r\n            )}\r\n          </React.Fragment>\r\n        )\r\n      })}\r\n    </RingsUl>\r\n  )\r\n}\r\n","import React, { useContext } from \"react\"\r\n\r\nimport { navigationDispatchContext } from \"reducer-contexts/navigation\"\r\n\r\nimport { GroupsEditor } from \"components/GroupsEditor\"\r\nimport { EditBackgroundModal } from \"components/EditBackgroundModal\"\r\n\r\nimport { Navigation } from \"common-styled-components/Navigation\"\r\nimport { StyledButton } from \"common-styled-components/StyledButton\"\r\nimport { MainContent } from \"common-styled-components/MainContent\"\r\n\r\nexport const GroupEditorScreen = () => {\r\n  const navigationDispatch = useContext(navigationDispatchContext)\r\n  return (\r\n    <MainContent>\r\n      <GroupsEditor />\r\n      <Navigation>\r\n        <EditBackgroundModal />\r\n        <StyledButton\r\n          type=\"button\"\r\n          onClick={() => {\r\n            navigationDispatch({ type: \"WATCH_SCREEN\" })\r\n          }}\r\n        >\r\n          Watch Animation\r\n        </StyledButton>\r\n      </Navigation>\r\n    </MainContent>\r\n  )\r\n}\r\n","import React, { useRef } from \"react\"\r\nimport styled from \"styled-components\"\r\nimport produce, { Draft } from \"immer\"\r\n\r\ninterface SliderActionsMouseMove {\r\n  type: \"DIRECT_UPDATE\"\r\n  isMinThumb: boolean\r\n  newValue: number\r\n}\r\ninterface SliderActionsKeyDown {\r\n  type: \"KEY_DOWN\"\r\n  isMinThumb: boolean\r\n  key: string\r\n}\r\ntype SliderActions = SliderActionsKeyDown | SliderActionsMouseMove\r\n\r\ninterface SliderState {\r\n  currentMin: number\r\n  currentMax: number\r\n  max: number\r\n  min: number\r\n}\r\n\r\nexport const sliderReducer: React.Reducer<SliderState, SliderActions> = produce(\r\n  (draft: Draft<SliderState>, action: SliderActions) => {\r\n    const { currentMax, currentMin, min, max } = draft\r\n    function increaseCurrent(\r\n      amount: number,\r\n      toUpdate: number,\r\n      noMoreThan: number\r\n    ) {\r\n      return toUpdate + amount >= noMoreThan ? noMoreThan : toUpdate + amount\r\n    }\r\n    function decreaseCurrent(\r\n      amount: number,\r\n      toUpdate: number,\r\n      noLessThan: number\r\n    ) {\r\n      return toUpdate - amount <= noLessThan ? noLessThan : toUpdate - amount\r\n    }\r\n    function constrainValue(value: number, min: number, max: number) {\r\n      if (value <= min) return min\r\n      if (value >= max) return max\r\n      return value\r\n    }\r\n    switch (action.type) {\r\n      case \"KEY_DOWN\": {\r\n        switch (action.key) {\r\n          case \"ArrowRight\":\r\n          case \"ArrowUp\": {\r\n            if (action.isMinThumb) {\r\n              draft.currentMin = increaseCurrent(1, currentMin, currentMax)\r\n            } else {\r\n              draft.currentMax = increaseCurrent(1, currentMax, max)\r\n            }\r\n            break\r\n          }\r\n          case \"ArrowLeft\":\r\n          case \"ArrowDown\": {\r\n            if (action.isMinThumb) {\r\n              draft.currentMin = decreaseCurrent(1, currentMin, min)\r\n            } else {\r\n              draft.currentMax = decreaseCurrent(1, currentMax, currentMin)\r\n            }\r\n            break\r\n          }\r\n          case \"PageUp\": {\r\n            if (action.isMinThumb) {\r\n              draft.currentMin = increaseCurrent(5, currentMin, currentMax)\r\n            } else {\r\n              draft.currentMax = increaseCurrent(5, currentMax, max)\r\n            }\r\n            break\r\n          }\r\n          case \"PageDown\": {\r\n            if (action.isMinThumb) {\r\n              draft.currentMin = decreaseCurrent(5, currentMin, min)\r\n            } else {\r\n              draft.currentMax = decreaseCurrent(5, currentMax, currentMin)\r\n            }\r\n            break\r\n          }\r\n          case \"Home\": {\r\n            if (action.isMinThumb) {\r\n              draft.currentMin = draft.min\r\n            } else {\r\n              draft.currentMax = draft.currentMin\r\n            }\r\n            break\r\n          }\r\n          case \"End\": {\r\n            if (action.isMinThumb) {\r\n              draft.currentMin = draft.currentMax\r\n            } else {\r\n              draft.currentMax = draft.max\r\n            }\r\n            break\r\n          }\r\n        }\r\n        break\r\n      }\r\n      case \"DIRECT_UPDATE\": {\r\n        if (action.isMinThumb) {\r\n          draft.currentMin = constrainValue(action.newValue, min, currentMax)\r\n        } else {\r\n          draft.currentMax = constrainValue(action.newValue, currentMin, max)\r\n        }\r\n      }\r\n    }\r\n  }\r\n)\r\n\r\ninterface HandlePointerDragParams {\r\n  event: React.MouseEvent<HTMLDivElement, PointerEvent>\r\n  max: number\r\n  min: number\r\n  dispatch: React.Dispatch<SliderActions>\r\n  sliderRailRef: React.RefObject<HTMLDivElement>\r\n  isMinThumb: boolean\r\n}\r\nconst handlePointerDrag = ({\r\n  event,\r\n  min,\r\n  max,\r\n  sliderRailRef,\r\n  isMinThumb,\r\n  dispatch,\r\n}: HandlePointerDragParams) => {\r\n  function dispatchChange(diffX: number) {\r\n    const offsetWidth = sliderRailRef?.current?.offsetWidth\r\n      ? sliderRailRef.current.offsetWidth\r\n      : 0\r\n    const newValue = Math.round(min + ((max - min) * diffX) / offsetWidth)\r\n    dispatch({ type: \"DIRECT_UPDATE\", isMinThumb, newValue })\r\n  }\r\n\r\n  function handlePointerMove(event: PointerEvent) {\r\n    if (event.pointerType === \"touch\") return\r\n    const offsetLeft = sliderRailRef?.current?.offsetLeft\r\n      ? sliderRailRef.current.offsetLeft\r\n      : 0\r\n    const diffX = (event.pageX | event.clientX) - offsetLeft\r\n    dispatchChange(diffX)\r\n    event.preventDefault()\r\n    event.stopPropagation()\r\n  }\r\n  function handleTouchMove(event: TouchEvent) {\r\n    const offsetLeft = sliderRailRef?.current?.offsetLeft\r\n      ? sliderRailRef.current.offsetLeft\r\n      : 0\r\n    const diffX = event.touches[0].pageX - offsetLeft\r\n    dispatchChange(diffX)\r\n    event.preventDefault()\r\n    event.stopPropagation()\r\n  }\r\n\r\n  function handelCleanUp() {\r\n    if (sliderRailRef?.current) {\r\n      sliderRailRef.current.removeEventListener(\"touchmove\", handleTouchMove)\r\n    }\r\n\r\n    document.removeEventListener(\"pointermove\", handlePointerMove)\r\n    document.removeEventListener(\"pointerup\", handelCleanUp)\r\n    document.removeEventListener(\"pointercancel\", handelCleanUp)\r\n  }\r\n  if (sliderRailRef?.current) {\r\n    sliderRailRef.current.addEventListener(\"touchmove\", handleTouchMove)\r\n  }\r\n  document.addEventListener(\"pointermove\", handlePointerMove)\r\n  document.addEventListener(\"pointerup\", handelCleanUp)\r\n  document.addEventListener(\"pointercancel\", handelCleanUp)\r\n\r\n  event.preventDefault()\r\n  event.stopPropagation()\r\n\r\n  event.currentTarget.focus()\r\n}\r\n\r\nconst SliderWrappingDiv = styled.div`\r\n  display: grid;\r\n  grid-template-areas:\r\n    \"label . . .\"\r\n    \"bar bar bar bar\"\r\n    \"min min max max\";\r\n  justify-items: center;\r\n  grid-gap: 10px;\r\n  width: 100%;\r\n`\r\n\r\nconst SliderValueDiv = styled.div<{ area: string }>`\r\n  font-size: 16px;\r\n  grid-area: ${({ area }) => area};\r\n`\r\n\r\nconst SliderLabelP = styled.p`\r\n  grid-area: label;\r\n  justify-self: left;\r\n`\r\nconst SliderRailDiv = styled.div`\r\n  display: flex;\r\n  grid-area: bar;\r\n  align-items: center;\r\n  height: 10px;\r\n  width: calc(100% - 60px);\r\n  margin: 0 35px;\r\n  border-radius: 20px;\r\n  background-color: lightgrey;\r\n  align-self: center;\r\n  position: relative;\r\n  border: solid lightgrey 2px;\r\n  &.focus {\r\n    outline: none;\r\n    background: linear-gradient(\r\n      225deg,\r\n      rgb(63, 63, 63) 0%,\r\n      rgb(141, 141, 141) 25%,\r\n      rgb(255, 255, 255) 50%,\r\n      rgb(141, 141, 141) 75%,\r\n      rgb(63, 63, 63) 100%\r\n    );\r\n    border: solid grey 2px;\r\n  }\r\n`\r\n\r\ninterface SliderRailThumbProps {\r\n  className?: string\r\n  sliderDispatch: React.Dispatch<SliderActions>\r\n  isMinThumb: boolean\r\n  sliderRailRef: React.RefObject<HTMLDivElement>\r\n  sliderState: SliderState\r\n  label: string\r\n}\r\n\r\nconst SliderRailThumb: React.FC<SliderRailThumbProps> = ({\r\n  className,\r\n  sliderDispatch,\r\n  sliderRailRef,\r\n  label,\r\n  sliderState,\r\n  isMinThumb,\r\n}) => {\r\n  const { currentMin, min, max, currentMax } = sliderState\r\n  const style = {} as { left?: string; right?: string }\r\n\r\n  // Convert min/max range to 0 -> 100 range\r\n  const maxOldValue = currentMax\r\n  const minOldValue = currentMin\r\n  const oldMin = min\r\n  const oldMax = max\r\n  const newMin = 0\r\n  const newMax = 100\r\n\r\n  const minNewValue =\r\n    ((minOldValue - oldMin) * (newMax - newMin)) / (oldMax - oldMin) + newMin\r\n  const maxNewValue =\r\n    ((maxOldValue - oldMin) * (newMax - newMin)) / (oldMax - oldMin) + newMin\r\n\r\n  if (isMinThumb) {\r\n    style.left = `calc(${minNewValue}% - 20px)`\r\n  } else {\r\n    style.right = `calc(${100 - maxNewValue}% - 20px)`\r\n  }\r\n  return (\r\n    <div\r\n      className={className}\r\n      onKeyDown={(event) => {\r\n        sliderDispatch({\r\n          type: \"KEY_DOWN\",\r\n          isMinThumb,\r\n          key: event.key,\r\n        })\r\n      }}\r\n      onPointerDown={(event) => {\r\n        handlePointerDrag({\r\n          event,\r\n          min,\r\n          max,\r\n          dispatch: sliderDispatch,\r\n          sliderRailRef,\r\n          isMinThumb,\r\n        })\r\n      }}\r\n      onFocus={(event) => {\r\n        event.currentTarget.classList.add(\"focus\")\r\n        if (sliderRailRef?.current) {\r\n          sliderRailRef.current.classList.add(\"focus\")\r\n        }\r\n      }}\r\n      onBlur={(event) => {\r\n        event.currentTarget.classList.remove(\"focus\")\r\n        if (sliderRailRef?.current) {\r\n          sliderRailRef.current.classList.remove(\"focus\")\r\n        }\r\n      }}\r\n      style={style}\r\n      role=\"slider\"\r\n      tabIndex={0}\r\n      aria-valuemin={min}\r\n      aria-valuenow={isMinThumb ? currentMin : currentMax}\r\n      aria-valuetext={`${isMinThumb ? currentMin : currentMax}`}\r\n      aria-valuemax={max}\r\n      aria-label={`${label} ${isMinThumb ? \"Minimum\" : \"Maximum\"}`}\r\n    />\r\n  )\r\n}\r\n\r\nconst SliderRailThumbDiv = styled(SliderRailThumb)`\r\n  position: absolute;\r\n  width: 30px;\r\n  height: 30px;\r\n  border: solid darkgrey 2px;\r\n  background: darkgray;\r\n  border-radius: 50% 50% 100% 0% / 100% 50% 50% 0%;\r\n  &.focus {\r\n    background: linear-gradient(\r\n      225deg,\r\n      rgb(63, 63, 63) 0%,\r\n      rgb(141, 141, 141) 34%,\r\n      rgb(255, 255, 255) 100%\r\n    );\r\n    outline: none;\r\n    border: solid grey 2px;\r\n  }\r\n`\r\nconst SliderRailThumbDivMin = styled(SliderRailThumbDiv)`\r\n  transform: translateX(-20px) rotate(225deg);\r\n`\r\nconst SliderRailThumbDivMax = styled(SliderRailThumbDiv)`\r\n  transform: translateX(20px) rotate(45deg);\r\n`\r\n\r\ninterface MultiSliderProps {\r\n  label: string\r\n  sliderState: SliderState\r\n  sliderReducerDispatch: React.Dispatch<SliderActions>\r\n}\r\n\r\nexport const MultiSlider: React.FC<MultiSliderProps> = ({\r\n  label,\r\n  sliderState,\r\n  sliderReducerDispatch,\r\n}) => {\r\n  const sliderRailRef = useRef<HTMLDivElement>(null)\r\n  return (\r\n    <SliderWrappingDiv>\r\n      <SliderLabelP>{label}</SliderLabelP>\r\n      <SliderRailDiv ref={sliderRailRef}>\r\n        <SliderRailThumbDivMin\r\n          sliderDispatch={sliderReducerDispatch}\r\n          isMinThumb={true}\r\n          sliderRailRef={sliderRailRef}\r\n          sliderState={sliderState}\r\n          label={label}\r\n        />\r\n        <SliderRailThumbDivMax\r\n          sliderDispatch={sliderReducerDispatch}\r\n          isMinThumb={false}\r\n          sliderRailRef={sliderRailRef}\r\n          sliderState={sliderState}\r\n          label={label}\r\n        />\r\n      </SliderRailDiv>\r\n      <SliderValueDiv area=\"min\">\r\n        <span>Min {sliderState.currentMin}</span>\r\n      </SliderValueDiv>\r\n      <SliderValueDiv area=\"max\">\r\n        <span>Max {sliderState.currentMax}</span>\r\n      </SliderValueDiv>\r\n    </SliderWrappingDiv>\r\n  )\r\n}\r\n","import React from \"react\"\r\nimport styled from \"styled-components\"\r\nimport { StyledButton } from \"common-styled-components/StyledButton\"\r\n\r\nconst ColourPickerWrapperDiv = styled.div`\r\n  width: 100%;\r\n  overflow: hidden;\r\n`\r\nconst ColourPickerWrapperUl = styled.ul`\r\n  display: grid;\r\n  grid-gap: 15px;\r\n  grid-auto-flow: column;\r\n  grid-auto-columns: 150px;\r\n  max-width: 100vw;\r\n  padding: 10px 0px;\r\n  overflow-x: scroll;\r\n  margin: 5px 0 0 0;\r\n  padding: 10px 10px;\r\n  border-radius: 4px;\r\n  box-shadow: inset 0px 0px 9px -2px #404040;\r\n`\r\nconst ColourPickerLi = styled.li`\r\n  display: grid;\r\n  grid-gap: 10px;\r\n  grid-template-columns: 1fr;\r\n  grid-template-rows: 20px 35px 30px;\r\n`\r\nconst ColourPickerLabel = styled.label`\r\n  text-align: center;\r\n  align-self: center;\r\n`\r\nconst ColourPickerInput = styled.input`\r\n  box-sizing: border-box;\r\n  width: 100%;\r\n  height: 35px;\r\n  padding: 5px;\r\n  border-radius: 5px;\r\n`\r\nconst ColourPickerDeleteButton = styled(StyledButton)`\r\n  margin: 0;\r\n  min-height: initial;\r\n`\r\nconst ColourPickerAddButton = styled(StyledButton)`\r\n  grid-row: 2/3;\r\n  width: 100%;\r\n  margin: 0;\r\n  min-height: initial;\r\n`\r\n\r\ninterface ColourPickerProps {\r\n  maxColours: number\r\n  setFunction: React.Dispatch<React.SetStateAction<string[]>>\r\n  colours: string[]\r\n  label: string\r\n  id: string\r\n}\r\n\r\nexport const ColourPicker: React.FC<ColourPickerProps> = ({\r\n  maxColours,\r\n  setFunction,\r\n  colours,\r\n  label,\r\n  id,\r\n}) => {\r\n  return (\r\n    <ColourPickerWrapperDiv>\r\n      <p id={`colour-picker-${id}`}>{label}</p>\r\n      <ColourPickerWrapperUl aria-labelledby={`colour-picker-${id}`}>\r\n        {colours.map((colour, index) => {\r\n          return (\r\n            <React.Fragment key={`${colour}-${index}`}>\r\n              <ColourPickerLi>\r\n                <ColourPickerLabel htmlFor={`${index}-${colour.substr(1)}`}>\r\n                  Colour {index + 1}\r\n                </ColourPickerLabel>\r\n                <ColourPickerInput\r\n                  id={`${index}-${colour.substr(1)}`}\r\n                  type=\"color\"\r\n                  defaultValue={colour}\r\n                  onBlur={({ currentTarget: { value } }) => {\r\n                    const newColours = [...colours]\r\n                    newColours[index] = value\r\n                    setFunction(newColours)\r\n                  }}\r\n                />\r\n                {colours.length !== 1 && (\r\n                  <ColourPickerDeleteButton\r\n                    type=\"button\"\r\n                    onClick={() => {\r\n                      const newColours = [...colours]\r\n                      newColours.splice(index, 1)\r\n                      setFunction(newColours)\r\n                    }}\r\n                  >\r\n                    Delete\r\n                  </ColourPickerDeleteButton>\r\n                )}\r\n              </ColourPickerLi>\r\n              {index + 1 === colours.length && colours.length < maxColours ? (\r\n                <ColourPickerLi>\r\n                  <ColourPickerAddButton\r\n                    type=\"button\"\r\n                    onClick={() => {\r\n                      const newColours = [...colours]\r\n                      newColours.push(\"#ffffff\")\r\n                      setFunction(newColours)\r\n                    }}\r\n                  >\r\n                    Add\r\n                  </ColourPickerAddButton>\r\n                </ColourPickerLi>\r\n              ) : null}\r\n            </React.Fragment>\r\n          )\r\n        })}\r\n      </ColourPickerWrapperUl>\r\n    </ColourPickerWrapperDiv>\r\n  )\r\n}\r\n","import React, {\r\n  useContext,\r\n  useState,\r\n  useEffect,\r\n  useReducer,\r\n  useRef,\r\n} from \"react\"\r\nimport styled from \"styled-components\"\r\n\r\nimport {\r\n  polygonGroupsStateContext,\r\n  polygonGroupsDispatchContext,\r\n} from \"reducer-contexts/polygon-groups\"\r\n\r\nimport { navigationStateContext } from \"reducer-contexts/navigation\"\r\nimport { backgroundStateContext } from \"reducer-contexts/background\"\r\n\r\nimport {\r\n  generatePolygonRingSketch,\r\n  generatePolygonGroupSketch,\r\n} from \"polygon-logic/polygon-p5-draw\"\r\n\r\nimport { P5Canvas } from \"components/P5Canvas\"\r\nimport { ToggleSwitch } from \"components/ToggleSwitch\"\r\nimport { Slider } from \"components/Slider\"\r\nimport { MultiSlider, sliderReducer } from \"components/MultiSlider\"\r\nimport { ColourPicker } from \"components/ColourPicker\"\r\nimport { CoordinatePicker } from \"components/CoordinatePicker\"\r\n\r\nimport { StyledButton } from \"common-styled-components/StyledButton\"\r\n\r\nimport rotatingDirection from \"rotating-ring.svg\"\r\n\r\nconst PolygonPageWrappingDiv = styled.div`\r\n  display: grid;\r\n  grid-template-rows: 280px calc(90vh - 290px);\r\n  grid-template-columns: 100vw;\r\n  justify-content: center;\r\n  margin: 10px 0;\r\n`\r\n\r\nconst PolygonCanvasWrappingDiv = styled.div`\r\n  display: grid;\r\n  grid-template-columns: 210px;\r\n  grid-gap: 10px;\r\n  justify-content: center;\r\n`\r\n\r\nconst PolygonOptionsOverflowDiv = styled.div`\r\n  overflow-y: scroll;\r\n  overflow-x: hidden;\r\n  display: grid;\r\n  grid-gap: 10px;\r\n  grid-template-columns: repeat(auto-fit, minmax(270px, 1fr));\r\n  border-radius: 8px;\r\n  box-shadow: inset 0px 0px 9px -2px #404040;\r\n  margin: 10px;\r\n  padding: 10px;\r\n`\r\n\r\nconst PolygonCanvas = styled(P5Canvas)`\r\n  border: solid 4px gainsboro;\r\n  border-radius: 3px;\r\n  padding: 1px;\r\n  width: 200px;\r\n  height: 200px;\r\n`\r\nconst PolygonCanvasButtonDiv = styled.div`\r\n  display: flex;\r\n`\r\n\r\nconst ShorterSlider = styled(Slider)`\r\n  width: calc(100% - 60px);\r\n`\r\n\r\nexport const PolygonEditor = () => {\r\n  const polygonGroupsState = useContext(polygonGroupsStateContext)\r\n  const polygonGroupsDispatch = useContext(polygonGroupsDispatchContext)\r\n  const navigationState = useContext(navigationStateContext)\r\n  const backgroundState = useContext(backgroundStateContext)\r\n  const scrollingElementRef = useRef<HTMLDivElement>(null)\r\n\r\n  const [showGroup, setShowGroup] = useState(false)\r\n\r\n  const polygonToDisplay =\r\n    polygonGroupsState[navigationState.currentGroup].rings[\r\n      navigationState.currentPolygon\r\n    ]\r\n  const { scale, rotation, dots, sides, position } = polygonToDisplay\r\n  return (\r\n    <PolygonPageWrappingDiv>\r\n      <PolygonCanvasWrappingDiv>\r\n        <div aria-label={`Ring ${navigationState.currentPolygon} Canvas`}>\r\n          {showGroup ? (\r\n            <PolygonCanvas\r\n              sketch={generatePolygonGroupSketch({\r\n                polygonGroup: polygonGroupsState[navigationState.currentGroup],\r\n                windowSize: {\r\n                  width: 200,\r\n                  height: 200,\r\n                },\r\n                scale: 0.2,\r\n                rgbaBackgroundColour: backgroundState.rgba,\r\n                rgbBackgroundColour: backgroundState.rgb,\r\n                shouldRedrawBackground: backgroundState.shouldRedraw,\r\n              })}\r\n            />\r\n          ) : (\r\n            <PolygonCanvas\r\n              sketch={generatePolygonRingSketch({\r\n                polygonRing: polygonToDisplay,\r\n                windowSize: {\r\n                  width: 200,\r\n                  height: 200,\r\n                },\r\n                scale: 0.2,\r\n                rgbaBackgroundColour: backgroundState.rgba,\r\n                rgbBackgroundColour: backgroundState.rgb,\r\n                shouldRedrawBackground: backgroundState.shouldRedraw,\r\n              })}\r\n            />\r\n          )}\r\n        </div>\r\n        <PolygonCanvasButtonDiv>\r\n          <StyledButton\r\n            type=\"button\"\r\n            onClick={() => {\r\n              polygonGroupsDispatch({\r\n                type: \"RANDOMIZE_POLYGON\",\r\n                group: navigationState.currentGroup,\r\n                polygon: navigationState.currentPolygon,\r\n              })\r\n            }}\r\n          >\r\n            Randomize\r\n          </StyledButton>\r\n          {showGroup ? (\r\n            <StyledButton\r\n              type=\"button\"\r\n              onClick={() => {\r\n                setShowGroup(false)\r\n              }}\r\n            >\r\n              Show Polygon\r\n            </StyledButton>\r\n          ) : (\r\n            <StyledButton\r\n              type=\"button\"\r\n              onClick={() => {\r\n                setShowGroup(true)\r\n              }}\r\n            >\r\n              Show Group\r\n            </StyledButton>\r\n          )}\r\n        </PolygonCanvasButtonDiv>\r\n      </PolygonCanvasWrappingDiv>\r\n      <PolygonOptionsOverflowDiv ref={scrollingElementRef}>\r\n        <PolygonRotationControls\r\n          key={`${rotation.speed}-${rotation.enabled}-${rotation.clockwise}`}\r\n        />\r\n        <PolygonScaleControls\r\n          key={`${scale.enabled}-${scale.range.min}-${scale.range.max}-${scale.speed}`}\r\n        />\r\n        <PolygonDotsControls\r\n          key={`${dots.enabled}-${dots.size}-${\r\n            dots.strokeWidth\r\n          }-${dots.strokeColours.join(\"\")}-${dots.fillColours.join(\"\")}`}\r\n        />\r\n        <PolygonSidesControls\r\n          key={`${sides.enabled}-${sides.amount}-${\r\n            sides.strokeWidth\r\n          }-${sides.colours.join(\"\")}`}\r\n        />\r\n        <PolygonPositionControls\r\n          key={`${position.x}-${position.y}`}\r\n          scrollingParentRef={scrollingElementRef}\r\n        />\r\n      </PolygonOptionsOverflowDiv>\r\n    </PolygonPageWrappingDiv>\r\n  )\r\n}\r\n\r\nconst PolygonCardForm = styled.form`\r\n  border: 1px solid grey;\r\n  border-radius: 5px;\r\n  display: grid;\r\n  grid-auto-rows: min-content;\r\n  grid-gap: 10px;\r\n  padding: 10px;\r\n  margin-bottom: 10px;\r\n`\r\n\r\nconst PolygonCardHeadingWrappingDiv = styled.div`\r\n  padding: 10px;\r\n  border-radius: 4px 4px 0 0;\r\n  background: grey;\r\n  margin: -10px -10px 10px -10px;\r\n`\r\n\r\nconst PolygonCardH2 = styled.h2`\r\n  display: flex;\r\n  justify-content: space-between;\r\n  align-items: baseline;\r\n  font-size: 20px;\r\n  font-weight: bold;\r\n  color: whitesmoke;\r\n`\r\nconst PolygonCardUpdateNoticeSpan = styled.span`\r\n  font-size: 16px;\r\n  font-weight: 400;\r\n`\r\n\r\nconst PolygonCardButtonContainingDiv = styled.div`\r\n  display: grid;\r\n  grid-gap: 10px;\r\n  grid-auto-flow: column;\r\n`\r\n\r\nexport const PolygonControlsWrapper: React.FC<{\r\n  title: string\r\n  updateDispatch: Function\r\n  randomizeDispatch?: Function\r\n  canUpdate: boolean\r\n}> = ({ children, title, updateDispatch, randomizeDispatch, canUpdate }) => {\r\n  return (\r\n    <PolygonCardForm\r\n      onSubmit={(event) => {\r\n        event.preventDefault()\r\n      }}\r\n    >\r\n      <PolygonCardHeadingWrappingDiv>\r\n        <PolygonCardH2>\r\n          {title}\r\n          {canUpdate && (\r\n            <PolygonCardUpdateNoticeSpan>\r\n              Can Update\r\n            </PolygonCardUpdateNoticeSpan>\r\n          )}\r\n        </PolygonCardH2>\r\n      </PolygonCardHeadingWrappingDiv>\r\n      {children}\r\n      <PolygonCardButtonContainingDiv>\r\n        <StyledButton\r\n          type=\"submit\"\r\n          disabled={!canUpdate}\r\n          onClick={() => {\r\n            updateDispatch()\r\n          }}\r\n        >\r\n          Update\r\n        </StyledButton>\r\n        {randomizeDispatch && (\r\n          <StyledButton\r\n            type=\"button\"\r\n            onClick={() => {\r\n              randomizeDispatch()\r\n            }}\r\n          >\r\n            Randomize\r\n          </StyledButton>\r\n        )}\r\n      </PolygonCardButtonContainingDiv>\r\n    </PolygonCardForm>\r\n  )\r\n}\r\n\r\nexport const PolygonRotationControls: React.FC = () => {\r\n  const polygonGroupsState = useContext(polygonGroupsStateContext)\r\n  const polygonGroupsDispatch = useContext(polygonGroupsDispatchContext)\r\n  const navigationState = useContext(navigationStateContext)\r\n\r\n  const { rotation } = polygonGroupsState[navigationState.currentGroup].rings[\r\n    navigationState.currentPolygon\r\n  ]\r\n\r\n  const [speed, setRotationSpeed] = useState(rotation.speed)\r\n  const [startingRotation, setStartingRotation] = useState(\r\n    rotation.startingRotation\r\n  )\r\n  const [enabled, setEnabled] = useState(rotation.enabled)\r\n  const [clockwise, setClockwise] = useState(rotation.clockwise)\r\n  const [canUpdate, setCanUpdate] = useState(false)\r\n\r\n  useEffect(() => {\r\n    if (\r\n      rotation.speed !== speed ||\r\n      rotation.startingRotation !== startingRotation ||\r\n      rotation.enabled !== enabled ||\r\n      rotation.clockwise !== clockwise\r\n    ) {\r\n      setCanUpdate(true)\r\n    }\r\n  }, [speed, enabled, clockwise, rotation, startingRotation])\r\n\r\n  const updateDispatch = () => {\r\n    setCanUpdate(false)\r\n    polygonGroupsDispatch({\r\n      type: \"UPDATE_POLYGON_ROTATION\",\r\n      group: navigationState.currentGroup,\r\n      polygon: navigationState.currentPolygon,\r\n      rotation: { clockwise, enabled, speed, startingRotation },\r\n    })\r\n  }\r\n  const randomizeDispatch = () => {\r\n    polygonGroupsDispatch({\r\n      type: \"RANDOMIZE_POLYGON_ROTATION\",\r\n      group: navigationState.currentGroup,\r\n      polygon: navigationState.currentPolygon,\r\n    })\r\n  }\r\n  return (\r\n    <PolygonControlsWrapper\r\n      updateDispatch={updateDispatch}\r\n      randomizeDispatch={randomizeDispatch}\r\n      canUpdate={canUpdate}\r\n      title=\"Rotation\"\r\n    >\r\n      <ToggleSwitch\r\n        label=\"Enable\"\r\n        id=\"rotation-enabled\"\r\n        checked={enabled}\r\n        setFunction={setEnabled}\r\n        checkedText={{ checked: \"ON\", unchecked: \"OFF\" }}\r\n      />\r\n      <ShorterSlider\r\n        label=\"Starting Rotation\"\r\n        id=\"rotation-starting-rotation\"\r\n        min={0}\r\n        max={359}\r\n        currentValue={startingRotation}\r\n        setFunction={setStartingRotation}\r\n      />\r\n      {enabled && (\r\n        <>\r\n          <ToggleSwitch\r\n            label=\"Clockwise\"\r\n            id=\"rotation-clockwise\"\r\n            checked={clockwise}\r\n            setFunction={setClockwise}\r\n            svgBackground={rotatingDirection}\r\n            transformFlip={true}\r\n          />\r\n          <ShorterSlider\r\n            label=\"Speed\"\r\n            id=\"rotation-speed\"\r\n            min={0}\r\n            max={20}\r\n            currentValue={speed}\r\n            setFunction={setRotationSpeed}\r\n          />\r\n        </>\r\n      )}\r\n    </PolygonControlsWrapper>\r\n  )\r\n}\r\nexport const PolygonScaleControls: React.FC = () => {\r\n  const polygonGroupsState = useContext(polygonGroupsStateContext)\r\n  const polygonGroupsDispatch = useContext(polygonGroupsDispatchContext)\r\n  const navigationState = useContext(navigationStateContext)\r\n\r\n  const { scale } = polygonGroupsState[navigationState.currentGroup].rings[\r\n    navigationState.currentPolygon\r\n  ]\r\n\r\n  const [canUpdate, setCanUpdate] = useState(false)\r\n  const [enabled, setEnabled] = useState(scale.enabled)\r\n  const [speed, setSpeed] = useState(scale.speed)\r\n  const [startingSize, setStartingSize] = useState(scale.startingSize)\r\n\r\n  const rangeInitialState = {\r\n    min: 0,\r\n    max: 500,\r\n    currentMin: scale.range.min,\r\n    currentMax: scale.range.max,\r\n  }\r\n  const [rangeState, rangeDispatch] = useReducer(\r\n    sliderReducer,\r\n    rangeInitialState\r\n  )\r\n  useEffect(() => {\r\n    if (\r\n      scale.speed !== speed ||\r\n      scale.enabled !== enabled ||\r\n      scale.startingSize !== startingSize ||\r\n      scale.range.min !== rangeState.currentMin ||\r\n      scale.range.max !== rangeState.currentMax\r\n    ) {\r\n      setCanUpdate(true)\r\n    }\r\n  }, [speed, enabled, rangeState, scale, startingSize])\r\n\r\n  const updateDispatch = () => {\r\n    setCanUpdate(false)\r\n    polygonGroupsDispatch({\r\n      type: \"UPDATE_POLYGON_SCALE\",\r\n      group: navigationState.currentGroup,\r\n      polygon: navigationState.currentPolygon,\r\n      scale: {\r\n        enabled,\r\n        range: { min: rangeState.currentMin, max: rangeState.currentMax },\r\n        speed,\r\n        startingSize,\r\n      },\r\n    })\r\n  }\r\n  const randomizeDispatch = () => {\r\n    polygonGroupsDispatch({\r\n      type: \"RANDOMIZE_POLYGON_SCALE\",\r\n      group: navigationState.currentGroup,\r\n      polygon: navigationState.currentPolygon,\r\n    })\r\n  }\r\n  return (\r\n    <PolygonControlsWrapper\r\n      title=\"Scale\"\r\n      updateDispatch={updateDispatch}\r\n      randomizeDispatch={randomizeDispatch}\r\n      canUpdate={canUpdate}\r\n    >\r\n      <ToggleSwitch\r\n        label=\"Enable\"\r\n        id=\"scale-enabled\"\r\n        checked={enabled}\r\n        setFunction={setEnabled}\r\n        checkedText={{ checked: \"ON\", unchecked: \"OFF\" }}\r\n      />\r\n      <ShorterSlider\r\n        label=\"Starting Size\"\r\n        id=\"scale-starting-size\"\r\n        min={0}\r\n        max={500}\r\n        currentValue={startingSize}\r\n        setFunction={setStartingSize}\r\n      />\r\n      {enabled && (\r\n        <>\r\n          <ShorterSlider\r\n            label=\"Speed\"\r\n            id=\"scale-speed\"\r\n            max={20}\r\n            min={0}\r\n            currentValue={speed}\r\n            setFunction={setSpeed}\r\n          />\r\n          <MultiSlider\r\n            label=\"Size\"\r\n            sliderState={rangeState}\r\n            sliderReducerDispatch={rangeDispatch}\r\n          />\r\n        </>\r\n      )}\r\n    </PolygonControlsWrapper>\r\n  )\r\n}\r\nexport const PolygonDotsControls: React.FC = () => {\r\n  const polygonGroupsState = useContext(polygonGroupsStateContext)\r\n  const polygonGroupsDispatch = useContext(polygonGroupsDispatchContext)\r\n  const navigationState = useContext(navigationStateContext)\r\n\r\n  const { dots, sides } = polygonGroupsState[\r\n    navigationState.currentGroup\r\n  ].rings[navigationState.currentPolygon]\r\n\r\n  const [canUpdate, setCanUpdate] = useState(false)\r\n  const [enabled, setEnabled] = useState(dots.enabled)\r\n  const [size, setSize] = useState(dots.size)\r\n  const [strokeWidth, setStrokeWidth] = useState(dots.strokeWidth)\r\n  const [fillColours, setFillColours] = useState(dots.fillColours)\r\n  const [strokeColours, setStrokeColours] = useState(dots.strokeColours)\r\n\r\n  useEffect(() => {\r\n    if (\r\n      dots.enabled !== enabled ||\r\n      dots.size !== size ||\r\n      dots.strokeWidth !== strokeWidth ||\r\n      dots.fillColours.join(\"\") !== fillColours.join(\"\") ||\r\n      dots.strokeColours.join(\"\") !== strokeColours.join(\"\")\r\n    ) {\r\n      setCanUpdate(true)\r\n    }\r\n  }, [enabled, size, strokeWidth, dots, fillColours, strokeColours])\r\n\r\n  const updateDispatch = () => {\r\n    setCanUpdate(false)\r\n    polygonGroupsDispatch({\r\n      type: \"UPDATE_POLYGON_DOTS\",\r\n      group: navigationState.currentGroup,\r\n      polygon: navigationState.currentPolygon,\r\n      dots: { enabled, fillColours, size, strokeColours, strokeWidth },\r\n    })\r\n  }\r\n\r\n  const randomizeDispatch = () => {\r\n    polygonGroupsDispatch({\r\n      type: \"RANDOMIZE_POLYGON_DOTS\",\r\n      group: navigationState.currentGroup,\r\n      polygon: navigationState.currentPolygon,\r\n    })\r\n  }\r\n\r\n  return (\r\n    <PolygonControlsWrapper\r\n      updateDispatch={updateDispatch}\r\n      randomizeDispatch={randomizeDispatch}\r\n      title=\"Dots\"\r\n      canUpdate={canUpdate}\r\n    >\r\n      <ToggleSwitch\r\n        label=\"Enable\"\r\n        id=\"dots-enabled\"\r\n        checked={enabled}\r\n        setFunction={setEnabled}\r\n        checkedText={{ checked: \"ON\", unchecked: \"OFF\" }}\r\n      />\r\n      {enabled && (\r\n        <>\r\n          <ShorterSlider\r\n            label=\"Size\"\r\n            id=\"dots-size\"\r\n            max={20}\r\n            min={0}\r\n            currentValue={size}\r\n            setFunction={setSize}\r\n          />\r\n          <ColourPicker\r\n            label=\"Fill Colour\"\r\n            id=\"fill-colour\"\r\n            maxColours={sides.amount}\r\n            colours={fillColours}\r\n            setFunction={setFillColours}\r\n          />\r\n          <ShorterSlider\r\n            label=\"Stroke Width\"\r\n            id=\"dots-stroke-width\"\r\n            max={20}\r\n            min={0}\r\n            currentValue={strokeWidth}\r\n            setFunction={setStrokeWidth}\r\n            valueSuffix=\"px\"\r\n          />\r\n          <ColourPicker\r\n            label=\"Stroke Colours\"\r\n            id=\"stroke-colour\"\r\n            maxColours={sides.amount}\r\n            colours={strokeColours}\r\n            setFunction={setStrokeColours}\r\n          />\r\n        </>\r\n      )}\r\n    </PolygonControlsWrapper>\r\n  )\r\n}\r\nexport const PolygonSidesControls: React.FC = () => {\r\n  const polygonGroupsState = useContext(polygonGroupsStateContext)\r\n  const polygonGroupsDispatch = useContext(polygonGroupsDispatchContext)\r\n  const navigationState = useContext(navigationStateContext)\r\n\r\n  const { sides } = polygonGroupsState[navigationState.currentGroup].rings[\r\n    navigationState.currentPolygon\r\n  ]\r\n\r\n  const [canUpdate, setCanUpdate] = useState(false)\r\n  const [enabled, setEnabled] = useState(sides.enabled)\r\n  const [amount, setAmount] = useState(sides.amount)\r\n  const [strokeWidth, setStrokeWidth] = useState(sides.strokeWidth)\r\n  const [colours, setColours] = useState(sides.colours)\r\n\r\n  useEffect(() => {\r\n    if (\r\n      sides.enabled !== enabled ||\r\n      sides.amount !== amount ||\r\n      sides.strokeWidth !== strokeWidth ||\r\n      sides.colours.join(\"\") !== colours.join(\"\")\r\n    ) {\r\n      setCanUpdate(true)\r\n    }\r\n  }, [enabled, amount, strokeWidth, sides, colours])\r\n\r\n  const randomizeDispatch = () => {\r\n    polygonGroupsDispatch({\r\n      type: \"RANDOMIZE_POLYGON_SIDES\",\r\n      group: navigationState.currentGroup,\r\n      polygon: navigationState.currentPolygon,\r\n    })\r\n  }\r\n\r\n  const updateDispatch = () => {\r\n    setCanUpdate(false)\r\n    polygonGroupsDispatch({\r\n      type: \"UPDATE_POLYGON_SIDES\",\r\n      group: navigationState.currentGroup,\r\n      polygon: navigationState.currentPolygon,\r\n      sides: { amount, colours, enabled, strokeWidth },\r\n    })\r\n  }\r\n  return (\r\n    <PolygonControlsWrapper\r\n      updateDispatch={updateDispatch}\r\n      randomizeDispatch={randomizeDispatch}\r\n      title={\"Sides\"}\r\n      canUpdate={canUpdate}\r\n    >\r\n      <ToggleSwitch\r\n        label=\"Enable\"\r\n        id=\"sides-enabled\"\r\n        checked={enabled}\r\n        setFunction={setEnabled}\r\n        checkedText={{ checked: \"ON\", unchecked: \"OFF\" }}\r\n      />\r\n      <ShorterSlider\r\n        label=\"Amount\"\r\n        id=\"sides-amount\"\r\n        max={20}\r\n        min={1}\r\n        currentValue={amount}\r\n        setFunction={setAmount}\r\n      />\r\n      {enabled && (\r\n        <>\r\n          <ShorterSlider\r\n            label=\"Stroke Width\"\r\n            id=\"sides-stroke-width\"\r\n            max={20}\r\n            min={0}\r\n            currentValue={strokeWidth}\r\n            setFunction={setStrokeWidth}\r\n            valueSuffix=\"px\"\r\n          />\r\n          <ColourPicker\r\n            label=\"Colours\"\r\n            id=\"sides-colours\"\r\n            maxColours={sides.amount}\r\n            colours={colours}\r\n            setFunction={setColours}\r\n          />\r\n        </>\r\n      )}\r\n    </PolygonControlsWrapper>\r\n  )\r\n}\r\nexport const PolygonPositionControls: React.FC<{\r\n  scrollingParentRef?: React.RefObject<HTMLDivElement>\r\n}> = ({ scrollingParentRef }) => {\r\n  const polygonGroupsState = useContext(polygonGroupsStateContext)\r\n  const polygonGroupsDispatch = useContext(polygonGroupsDispatchContext)\r\n  const navigationState = useContext(navigationStateContext)\r\n\r\n  const { position } = polygonGroupsState[navigationState.currentGroup].rings[\r\n    navigationState.currentPolygon\r\n  ]\r\n\r\n  const [canUpdate, setCanUpdate] = useState(false)\r\n  const [x, setX] = useState(position.x)\r\n  const [y, setY] = useState(position.y)\r\n\r\n  useEffect(() => {\r\n    if (position.x !== x || position.y !== y) {\r\n      setCanUpdate(true)\r\n    }\r\n  }, [position, x, y])\r\n\r\n  const updateDispatch = () => {\r\n    setCanUpdate(false)\r\n    polygonGroupsDispatch({\r\n      type: \"UPDATE_POLYGON_POSITION\",\r\n      group: navigationState.currentGroup,\r\n      polygon: navigationState.currentPolygon,\r\n      position: { x, y },\r\n    })\r\n  }\r\n  return (\r\n    <PolygonControlsWrapper\r\n      updateDispatch={updateDispatch}\r\n      title={\"Position\"}\r\n      canUpdate={canUpdate}\r\n    >\r\n      <CoordinatePicker\r\n        currentX={x}\r\n        currentY={y}\r\n        setYFunction={setY}\r\n        setXFunction={setX}\r\n        scrollingParentRef={scrollingParentRef}\r\n      />\r\n    </PolygonControlsWrapper>\r\n  )\r\n}\r\n","import React, { useContext } from \"react\"\r\nimport { StyledButton } from \"common-styled-components/StyledButton\"\r\nimport { PolygonEditor } from \"./PolygonEditor\"\r\nimport { Navigation } from \"common-styled-components/Navigation\"\r\nimport { navigationDispatchContext } from \"reducer-contexts/navigation\"\r\nimport { MainContent } from \"common-styled-components/MainContent\"\r\n\r\nexport const PolygonEditorScreen = () => {\r\n  const navigationDispatch = useContext(navigationDispatchContext)\r\n  return (\r\n    <MainContent>\r\n      <PolygonEditor />\r\n      <Navigation>\r\n        <StyledButton\r\n          type=\"button\"\r\n          onClick={() => {\r\n            navigationDispatch({ type: \"GROUP_SCREEN\" })\r\n          }}\r\n        >\r\n          Edit Polygons\r\n        </StyledButton>\r\n        <StyledButton\r\n          type=\"button\"\r\n          onClick={() => {\r\n            navigationDispatch({ type: \"WATCH_SCREEN\" })\r\n          }}\r\n        >\r\n          Watch Animation\r\n        </StyledButton>\r\n      </Navigation>\r\n    </MainContent>\r\n  )\r\n}\r\n","import React, { useContext } from \"react\"\r\nimport styled from \"styled-components\"\r\n\r\nimport { navigationStateContext } from \"reducer-contexts/navigation\"\r\n\r\nimport { Screens } from \"components/Screens\"\r\nimport { IntroScreen } from \"components/IntroScreen\"\r\nimport { ViewScreen } from \"components/ViewScreen\"\r\nimport { GroupEditorScreen } from \"components/GroupEditorScreen\"\r\nimport { PolygonEditorScreen } from \"components/PolygonEditorScreen\"\r\n\r\nconst Main = styled.main`\r\n  display: grid;\r\n  grid-template-rows: minmax(100%, 100vh);\r\n  grid-template-columns: minmax(100%, 100vw);\r\n  overflow: hidden;\r\n`\r\n\r\nconst AnimationWrappingScreens = styled(Screens)`\r\n  display: grid;\r\n  grid-row: 1;\r\n  grid-column: 1;\r\n`\r\n\r\nconst App: React.FC = () => {\r\n  const navigationState = useContext(navigationStateContext)\r\n\r\n  const childMapping = {\r\n    INFO_SCREEN: 1,\r\n    WATCH_SCREEN: 2,\r\n    GROUP_SCREEN: 3,\r\n    POLYGON_SCREEN: 4,\r\n  }\r\n\r\n  return (\r\n    <Main>\r\n      <AnimationWrappingScreens\r\n        currentChild={childMapping[navigationState.currentScreen]}\r\n      >\r\n        <IntroScreen />\r\n        <ViewScreen />\r\n        <GroupEditorScreen />\r\n        <PolygonEditorScreen />\r\n      </AnimationWrappingScreens>\r\n    </Main>\r\n  )\r\n}\r\n\r\nexport default App\r\n","import React from \"react\"\r\nimport { useTransition, animated } from \"react-spring\"\r\n\r\ninterface ScreensProps {\r\n  currentChild: number\r\n  className?: string\r\n}\r\n\r\nexport const Screens: React.FC<ScreensProps> = ({\r\n  children,\r\n  currentChild,\r\n  className,\r\n}) => {\r\n  const transitions = useTransition(currentChild, (item: number) => item, {\r\n    from: {\r\n      opacity: 0,\r\n      transform: \"translate(100%,0)\",\r\n    },\r\n    enter: { opacity: 1, transform: \"translate(0%,0)\" },\r\n    leave: {\r\n      opacity: 0,\r\n      transform: \"translate(-50%,0)\",\r\n    },\r\n  })\r\n  return (\r\n    <>\r\n      {transitions.map(({ item, key, props }) => {\r\n        return (\r\n          <animated.div key={key} style={props} className={className}>\r\n            {React.Children.map(children, (child, index) => {\r\n              if (index === item - 1) {\r\n                return child\r\n              }\r\n            })}\r\n          </animated.div>\r\n        )\r\n      })}\r\n    </>\r\n  )\r\n}\r\n","import React from \"react\"\r\nimport ReactDOM from \"react-dom\"\r\nimport * as serviceWorker from \"./serviceWorker\"\r\n\r\nimport App from \"components/App\"\r\nimport { NavigationContextWrapper } from \"reducer-contexts/navigation\"\r\nimport { PolygonGroupsContextWrapper } from \"reducer-contexts/polygon-groups\"\r\nimport { BackgroundContextWrapper } from \"reducer-contexts/background\"\r\n\r\nimport \"./reset.css\"\r\nimport \"./utils.css\"\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <PolygonGroupsContextWrapper>\r\n      <BackgroundContextWrapper>\r\n        <NavigationContextWrapper>\r\n          <App />\r\n        </NavigationContextWrapper>\r\n      </BackgroundContextWrapper>\r\n    </PolygonGroupsContextWrapper>\r\n  </React.StrictMode>,\r\n  document.getElementById(\"root\")\r\n)\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.register()\r\n"],"sourceRoot":""}