{"version":3,"sources":["serviceWorker.ts","reducer-contexts/navigation.tsx","reducer-contexts/polygon-groups.tsx","components/Screens.tsx","polygon-logic/polygon-animation-calculation.tsx","polygon-logic/polygon-p5-draw.tsx","components/P5Canvas.tsx","components/MainCanvas.tsx","components/App.tsx","index.tsx"],"names":["isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","console","log","onUpdate","onSuccess","catch","error","navigationReducer","produce","draft","action","type","newScreen","currentScreen","totalScreens","navigationInitialState","NavigationContextWrapper","children","useReducer","dispatch","navigationDispatchContext","Provider","value","navigationStateContext","createContext","getDraftUpdatedByOptions","options","newState","original","Object","keys","forEach","option","getRandomArbitrary","min","max","Math","random","getRandomIntInclusive","ceil","floor","getRandomRGB","h","s","l","r","g","b","hue2rgb","p","q","t","round","hslToRgb","getRandomColoursForPolygon","amountOfSides","amountOfColours","Array","map","getRandomSides","sidesAmount","enabled","strokeWidth","amount","colours","getRandomDots","fillColours","size","strokeColours","getRandomRotation","clockwise","speed","startingRotation","getRandomScale","range","startingSize","getRandomEnabled","randomNumber","sidesEnabled","dotsEnabled","rotationEnabled","scaleEnabled","getRandomPolygon","active","position","x","y","sides","dots","rotation","scale","createRandomPolygonRings","amountOfRings","polygonGroupsReducer","push","rings","group","draftPolygon","polygon","undefined","polygonState","draftRings","polygonGroupsInitialState","polygonGroupsInit","newPolygon","PolygonGroupsContextWrapper","polygonGroupsDispatchContext","polygonGroupsStateContext","Screen","styled","animated","div","Screens","transitions","useTransition","item","from","opacity","transform","enter","leave","key","props","style","React","Children","child","index","PolygonAnimationCalculation","animationState","animationConstants","this","getInitialStyles","getInitialConstants","getInitialState","angleBetweenPoints","PI","currentAngle","cos","sin","isActive","isRotating","isScaling","isRotatingClockwise","rotationSpeed","scalingSpeed","scalingRange","polygonPoints","getInitialPoints","currentlyExpanding","currentRotation","currentSize","newRotation","updatedSize","updatedCurrentlyExpanding","newPolygonPoints","point","newPoint","dotPositions","sidesPositions","nextPoint","nextIndex","length","positions","currentFrame","getPolygonFrame","updateScale","updateRotation","getSizeConstrainedCords","cords","width","height","singlePolygonDraw","polygonAnimation","p5","translate","rotate","stokeColour","stroke","strokeWeight","line","fillColourIndex","stokeColourIndex","fill","ellipse","pop","generateAllPolygonRingGroupsSketch","polygonGroups","windowSize","polygonGroupInstances","polygonRing","setup","createCanvas","background","draw","angleMode","polygonGroupRings","getPolygonFrameAndStep","Container","P5Canvas","sketch","divRef","useRef","P5Ref","useEffect","node","current","remove","p5Instance","ref","MainCanvasWrapper","generateKey","containerSize","polygonGroupLength","polygonRingLengths","polygonGroup","join","polygonRingRotations","ring","MainCanvas","polygonContext","useContext","useState","setCurrentSize","mainWrapper","offsetHeight","offsetWidth","updateCanvasSize","timeoutId","throttledWindowUpdate","clearTimeout","setTimeout","addEventListener","removeEventListener","Main","main","App","navigationState","navigationDispatch","polygonGroupsDispatch","textAlign","fontSize","onClick","ReactDOM","render","StrictMode","document","getElementById","URL","process","href","origin","fetch","headers","response","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.756356d1.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === \"localhost\" ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === \"[::1]\" ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n)\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void\n  onUpdate?: (registration: ServiceWorkerRegistration) => void\n}\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href)\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return\n    }\n\n    window.addEventListener(\"load\", () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config)\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            \"This web app is being served cache-first by a service \" +\n              \"worker. To learn more, visit https://bit.ly/CRA-PWA\"\n          )\n        })\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config)\n      }\n    })\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing\n        if (installingWorker == null) {\n          return\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === \"installed\") {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                \"New content is available and will be used when all \" +\n                  \"tabs for this page are closed. See https://bit.ly/CRA-PWA.\"\n              )\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration)\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log(\"Content is cached for offline use.\")\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration)\n              }\n            }\n          }\n        }\n      }\n    })\n    .catch((error) => {\n      console.error(\"Error during service worker registration:\", error)\n    })\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { \"Service-Worker\": \"script\" },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get(\"content-type\")\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf(\"javascript\") === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload()\n          })\n        })\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config)\n      }\n    })\n    .catch(() => {\n      console.log(\n        \"No internet connection found. App is running in offline mode.\"\n      )\n    })\n}\n\nexport function unregister() {\n  if (\"serviceWorker\" in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister()\n      })\n      .catch((error) => {\n        console.error(error.message)\n      })\n  }\n}\n","import React, { useReducer, createContext } from \"react\"\r\nimport produce, { Draft } from \"immer\"\r\n\r\ninterface NavigationState {\r\n  currentScreen: number\r\n  totalScreens: number\r\n}\r\n\r\ninterface NextScreen {\r\n  type: \"NEXT_SCREEN\"\r\n}\r\n\r\ninterface PrevScreen {\r\n  type: \"PREV_SCREEN\"\r\n}\r\n\r\nexport type NavigationActions = PrevScreen | NextScreen\r\n\r\nexport const navigationReducer = produce(\r\n  (draft: Draft<NavigationState>, action: NavigationActions) => {\r\n    switch (action.type) {\r\n      case \"NEXT_SCREEN\": {\r\n        const newScreen = draft.currentScreen + 1\r\n        if (newScreen <= draft.totalScreens) {\r\n          draft.currentScreen = newScreen\r\n        } else {\r\n          draft.currentScreen = 1\r\n        }\r\n        break\r\n      }\r\n      case \"PREV_SCREEN\": {\r\n        const newScreen = draft.currentScreen - 1\r\n        if (newScreen <= 0) {\r\n          draft.currentScreen = draft.totalScreens\r\n        } else {\r\n          draft.currentScreen = newScreen\r\n        }\r\n        break\r\n      }\r\n    }\r\n  }\r\n)\r\n\r\nexport const navigationInitialState = { currentScreen: 1, totalScreens: 3 }\r\n\r\nexport const NavigationContextWrapper: React.FC = ({ children }) => {\r\n  const [state, dispatch] = useReducer(\r\n    navigationReducer,\r\n    navigationInitialState\r\n  )\r\n\r\n  return (\r\n    <navigationDispatchContext.Provider value={dispatch}>\r\n      <navigationStateContext.Provider value={state}>\r\n        {children}\r\n      </navigationStateContext.Provider>\r\n    </navigationDispatchContext.Provider>\r\n  )\r\n}\r\n\r\nexport const navigationDispatchContext = createContext(\r\n  {} as React.Dispatch<NavigationActions>\r\n)\r\nexport const navigationStateContext = createContext({} as NavigationState)\r\n","import React, { useReducer, createContext } from \"react\"\r\nimport produce, { Draft, original } from \"immer\"\r\n\r\nexport interface Cords {\r\n  x: number\r\n  y: number\r\n}\r\n\r\nexport interface PolygonRingRotation {\r\n  enabled: boolean\r\n  clockwise: boolean\r\n  speed: number\r\n  startingRotation: number\r\n}\r\n\r\nexport interface PolygonRingScale {\r\n  enabled: boolean\r\n  speed: number\r\n  range: {\r\n    min: number\r\n    max: number\r\n  }\r\n  startingSize: number\r\n}\r\n\r\nexport interface PolygonRingDots {\r\n  enabled: boolean\r\n  size: number\r\n  fillColours: string[]\r\n  strokeColours: string[]\r\n  strokeWidth: number\r\n}\r\nexport interface PolygonRingSides {\r\n  enabled: boolean\r\n  amount: number\r\n  strokeWidth: number\r\n  colours: string[]\r\n}\r\n\r\nexport interface PolygonRing {\r\n  active: boolean\r\n  position: Cords\r\n  rotation: PolygonRingRotation\r\n  scale: PolygonRingScale\r\n  dots: PolygonRingDots\r\n  sides: PolygonRingSides\r\n}\r\n\r\nexport interface PolygonGroup {\r\n  active: boolean\r\n  position: Cords\r\n  rings: PolygonRing[]\r\n}\r\n\r\ninterface ActionCreateGroup {\r\n  type: \"CREATE_POLYGON_GROUP\"\r\n}\r\n\r\ninterface ActionCreatePolygon {\r\n  type: \"CREATE_POLYGON\"\r\n  group: number\r\n}\r\n\r\ninterface ActionUpdatePolygonGroupPosition {\r\n  type: \"UPDATE_POLYGON_GROUP_POSITION\"\r\n  group: number\r\n  position: Cords\r\n}\r\n\r\ninterface ActionUpdatePolygonAll {\r\n  type: \"UPDATE_POLYGON_ALL\"\r\n  group: number\r\n  polygon: number\r\n  polygonState: {\r\n    active?: boolean\r\n    position?: Cords\r\n    rotation?: Partial<PolygonRingRotation>\r\n    scale?: Partial<PolygonRingScale>\r\n    dots?: Partial<PolygonRingDots>\r\n    sides?: Partial<PolygonRingSides>\r\n  }\r\n}\r\n\r\ninterface ActionUpdatePolygonActive {\r\n  type: \"UPDATE_POLYGON_ACTIVE\"\r\n  group: number\r\n  polygon: number\r\n  active: boolean\r\n}\r\ninterface ActionUpdatePolygonGroupActive {\r\n  type: \"UPDATE_POLYGON_GROUP_ACTIVE\"\r\n  group: number\r\n  active: boolean\r\n}\r\n\r\ninterface ActionUpdatePolygonPosition {\r\n  type: \"UPDATE_POLYGON_POSITION\"\r\n  group: number\r\n  polygon: number\r\n  position: Cords\r\n}\r\ninterface ActionUpdatePolygonRotation {\r\n  type: \"UPDATE_POLYGON_ROTATION\"\r\n  group: number\r\n  polygon: number\r\n  rotation: Partial<PolygonRingRotation>\r\n}\r\ninterface ActionUpdatePolygonScale {\r\n  type: \"UPDATE_POLYGON_SCALE\"\r\n  group: number\r\n  polygon: number\r\n  scale: Partial<PolygonRingScale>\r\n}\r\ninterface ActionUpdatePolygonDots {\r\n  type: \"UPDATE_POLYGON_DOTS\"\r\n  group: number\r\n  polygon: number\r\n  dots: Partial<PolygonRingDots>\r\n}\r\ninterface ActionUpdatePolygonSides {\r\n  type: \"UPDATE_POLYGON_SIDES\"\r\n  group: number\r\n  polygon: number\r\n  sides: Partial<PolygonRingSides>\r\n}\r\n\r\ninterface ActionRandomizePolygonRings {\r\n  type: \"RANDOMIZE_POLYGON_RINGS\"\r\n  group: number\r\n}\r\ninterface ActionRandomizePolygon {\r\n  type: \"RANDOMIZE_POLYGON\"\r\n  group: number\r\n  polygon: number\r\n}\r\ninterface ActionRandomizePolygonSides {\r\n  type: \"RANDOMIZE_POLYGON_SIDES\"\r\n  group: number\r\n  polygon: number\r\n}\r\ninterface ActionRandomizePolygonRotation {\r\n  type: \"RANDOMIZE_POLYGON_ROTATION\"\r\n  group: number\r\n  polygon: number\r\n}\r\ninterface ActionRandomizePolygonScale {\r\n  type: \"RANDOMIZE_POLYGON_SCALE\"\r\n  group: number\r\n  polygon: number\r\n}\r\ninterface ActionRandomizePolygonDots {\r\n  type: \"RANDOMIZE_POLYGON_DOTS\"\r\n  group: number\r\n  polygon: number\r\n}\r\n\r\nexport type PolygonGroupsActions =\r\n  | ActionCreateGroup\r\n  | ActionCreatePolygon\r\n  | ActionUpdatePolygonAll\r\n  | ActionUpdatePolygonGroupPosition\r\n  | ActionUpdatePolygonPosition\r\n  | ActionUpdatePolygonRotation\r\n  | ActionUpdatePolygonScale\r\n  | ActionUpdatePolygonDots\r\n  | ActionUpdatePolygonSides\r\n  | ActionUpdatePolygonActive\r\n  | ActionUpdatePolygonGroupActive\r\n  | ActionRandomizePolygonRings\r\n  | ActionRandomizePolygon\r\n  | ActionRandomizePolygonSides\r\n  | ActionRandomizePolygonRotation\r\n  | ActionRandomizePolygonScale\r\n  | ActionRandomizePolygonDots\r\n\r\n/**\r\n * Takes in the current draft for the matching options\r\n * and returns a updated draft with the new options so\r\n * it can be set to the new state\r\n *\r\n * @template T\r\n * @param {T} draft\r\n * @param {Partial<T>} options\r\n * @returns {T}\r\n */\r\nfunction getDraftUpdatedByOptions<T>(draft: T, options: Partial<T>): T {\r\n  const newState = { ...original(draft) } as Partial<T>\r\n  const optionKeys = Object.keys(options) as [keyof T]\r\n  optionKeys.forEach((option) => {\r\n    newState[option] = options[option]\r\n  })\r\n\r\n  return newState as T\r\n}\r\n\r\n// Randomizing Functions taken from MDN: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/random\r\n\r\nfunction getRandomArbitrary(min: number, max: number): number {\r\n  return Math.random() * (max - min) + min\r\n}\r\n\r\nfunction getRandomIntInclusive(min: number, max: number): number {\r\n  min = Math.ceil(min)\r\n  max = Math.floor(max)\r\n  return Math.floor(Math.random() * (max - min + 1)) + min\r\n}\r\n\r\nfunction getRandomBoolean(): boolean {\r\n  return getRandomIntInclusive(0, 1) === 1 ? true : false\r\n}\r\n\r\n/**\r\n * Taken from https://stackoverflow.com/questions/2353211/hsl-to-rgb-color-conversion/9493060#9493060\r\n *\r\n * Converts an HSL color value to RGB. Conversion formula\r\n * adapted from http://en.wikipedia.org/wiki/HSL_color_space.\r\n * Assumes h, s, and l are contained in the set [0, 1] and\r\n * returns r, g, and b in the set [0, 255].\r\n *\r\n *\r\n * @param   {number}  h       The hue\r\n * @param   {number}  s       The saturation\r\n * @param   {number}  l       The lightness\r\n * @return  {Array}           The RGB representation\r\n */\r\nfunction hslToRgb(h: number, s: number, l: number): [number, number, number] {\r\n  var r, g, b\r\n\r\n  if (s === 0) {\r\n    r = g = b = l // achromatic\r\n  } else {\r\n    var hue2rgb = function hue2rgb(p: number, q: number, t: number) {\r\n      if (t < 0) t += 1\r\n      if (t > 1) t -= 1\r\n      if (t < 1 / 6) return p + (q - p) * 6 * t\r\n      if (t < 1 / 2) return q\r\n      if (t < 2 / 3) return p + (q - p) * (2 / 3 - t) * 6\r\n      return p\r\n    }\r\n\r\n    var q = l < 0.5 ? l * (1 + s) : l + s - l * s\r\n    var p = 2 * l - q\r\n    r = hue2rgb(p, q, h + 1 / 3)\r\n    g = hue2rgb(p, q, h)\r\n    b = hue2rgb(p, q, h - 1 / 3)\r\n  }\r\n\r\n  return [Math.round(r * 255), Math.round(g * 255), Math.round(b * 255)]\r\n}\r\n\r\nfunction getRandomRGB(): string {\r\n  const h = getRandomArbitrary(0, 1)\r\n  const s = getRandomArbitrary(0.5, 0.7)\r\n  const l = getRandomArbitrary(0.5, 0.7)\r\n  const [r, g, b] = hslToRgb(h, s, l)\r\n  return `rgb(${r},${g},${b})`\r\n}\r\n\r\nfunction getRandomColoursForPolygon(amountOfSides: number): string[] {\r\n  const amountOfColours = getRandomIntInclusive(1, amountOfSides)\r\n\r\n  return [...Array(amountOfColours)].map(() => getRandomRGB())\r\n}\r\n\r\nfunction getRandomSides(): PolygonRingSides {\r\n  const sidesAmount = getRandomIntInclusive(3, 12)\r\n  return {\r\n    enabled: true,\r\n    strokeWidth: getRandomIntInclusive(1, 10),\r\n    amount: sidesAmount,\r\n    colours: getRandomColoursForPolygon(sidesAmount),\r\n  }\r\n}\r\nfunction getRandomDots(amountOfSides: number): PolygonRingDots {\r\n  return {\r\n    enabled: true,\r\n    fillColours: getRandomColoursForPolygon(amountOfSides),\r\n    size: getRandomIntInclusive(5, 10),\r\n    strokeWidth: getRandomIntInclusive(0, 10),\r\n    strokeColours: getRandomColoursForPolygon(amountOfSides),\r\n  }\r\n}\r\nfunction getRandomRotation(): PolygonRingRotation {\r\n  return {\r\n    enabled: true,\r\n    clockwise: getRandomBoolean(),\r\n    speed: getRandomIntInclusive(1, 5),\r\n    startingRotation: getRandomIntInclusive(1, 360),\r\n  }\r\n}\r\nfunction getRandomScale(): PolygonRingScale {\r\n  const min = getRandomIntInclusive(0, 20)\r\n  const max = getRandomIntInclusive(200, 500)\r\n\r\n  return {\r\n    enabled: true,\r\n    range: { min, max },\r\n    speed: getRandomIntInclusive(1, 5),\r\n    startingSize: getRandomIntInclusive(min, max),\r\n  }\r\n}\r\n\r\nfunction getRandomEnabled(): {\r\n  sidesEnabled: boolean\r\n  dotsEnabled: boolean\r\n  rotationEnabled: boolean\r\n  scaleEnabled: boolean\r\n} {\r\n  const randomNumber = getRandomIntInclusive(0, 100)\r\n\r\n  let enabledFields\r\n  if (randomNumber <= 48) {\r\n    // Full motion Sides\r\n    enabledFields = {\r\n      sidesEnabled: true,\r\n      dotsEnabled: false,\r\n      rotationEnabled: true,\r\n      scaleEnabled: true,\r\n    }\r\n  } else if (randomNumber <= 50) {\r\n    // Rotating Sides\r\n    enabledFields = {\r\n      sidesEnabled: true,\r\n      dotsEnabled: false,\r\n      rotationEnabled: true,\r\n      scaleEnabled: false,\r\n    }\r\n  } else if (randomNumber <= 90) {\r\n    // Full Motion Dots\r\n    enabledFields = {\r\n      sidesEnabled: false,\r\n      dotsEnabled: true,\r\n      rotationEnabled: true,\r\n      scaleEnabled: true,\r\n    }\r\n  } else if (randomNumber <= 95) {\r\n    // Rotating Dots\r\n    enabledFields = {\r\n      sidesEnabled: false,\r\n      dotsEnabled: true,\r\n      rotationEnabled: true,\r\n      scaleEnabled: false,\r\n    }\r\n  } else {\r\n    // Dots & Sides Full Motion\r\n    enabledFields = {\r\n      sidesEnabled: true,\r\n      dotsEnabled: true,\r\n      rotationEnabled: true,\r\n      scaleEnabled: true,\r\n    }\r\n  }\r\n  return enabledFields\r\n}\r\n\r\nfunction getRandomPolygon({\r\n  active = true,\r\n  position = { x: 0, y: 0 },\r\n}: Partial<PolygonRing> = {}): PolygonRing {\r\n  const sides = getRandomSides()\r\n  const dots = getRandomDots(sides.amount)\r\n  const rotation = getRandomRotation()\r\n  const scale = getRandomScale()\r\n  const {\r\n    sidesEnabled,\r\n    scaleEnabled,\r\n    rotationEnabled,\r\n    dotsEnabled,\r\n  } = getRandomEnabled()\r\n\r\n  sides.enabled = sidesEnabled\r\n  dots.enabled = dotsEnabled\r\n  scale.enabled = scaleEnabled\r\n  rotation.enabled = rotationEnabled\r\n\r\n  return { active, position, sides, dots, rotation, scale }\r\n}\r\n\r\nfunction createRandomPolygonRings(): PolygonRing[] {\r\n  const amountOfRings = getRandomIntInclusive(2, 8)\r\n\r\n  return [...Array(amountOfRings)].map(() => getRandomPolygon())\r\n}\r\n\r\ntype PolygonGroupsReducer = React.Reducer<\r\n  Readonly<PolygonGroup[]>,\r\n  PolygonGroupsActions\r\n>\r\nexport const polygonGroupsReducer: PolygonGroupsReducer = produce(\r\n  (draft: Draft<PolygonGroup[]>, action: PolygonGroupsActions) => {\r\n    switch (action.type) {\r\n      case \"CREATE_POLYGON_GROUP\": {\r\n        draft.push({ active: true, position: { x: 0, y: 0 }, rings: [] })\r\n        break\r\n      }\r\n      case \"CREATE_POLYGON\": {\r\n        draft[action.group].rings.push({\r\n          active: true,\r\n          position: { x: 0, y: 0 },\r\n          dots: {\r\n            enabled: true,\r\n            fillColours: [\"black\"],\r\n            size: 1,\r\n            strokeColours: [\"black\"],\r\n            strokeWidth: 1,\r\n          },\r\n          rotation: {\r\n            clockwise: true,\r\n            enabled: true,\r\n            speed: 1,\r\n            startingRotation: 1,\r\n          },\r\n          scale: {\r\n            enabled: true,\r\n            speed: 1,\r\n            range: { max: 10, min: 0 },\r\n            startingSize: 5,\r\n          },\r\n          sides: {\r\n            enabled: true,\r\n            strokeWidth: 1,\r\n            colours: [\"black\"],\r\n            amount: 6,\r\n          },\r\n        })\r\n        break\r\n      }\r\n      case \"UPDATE_POLYGON_GROUP_POSITION\": {\r\n        draft[action.group].position = action.position\r\n        break\r\n      }\r\n      case \"UPDATE_POLYGON_GROUP_ACTIVE\": {\r\n        draft[action.group].active = action.active\r\n        break\r\n      }\r\n      case \"UPDATE_POLYGON_ALL\": {\r\n        const draftPolygon = draft[action.group].rings[action.polygon]\r\n        if (action.polygonState.active !== undefined) {\r\n          draftPolygon.active = action.polygonState.active\r\n        }\r\n        if (action.polygonState.position !== undefined) {\r\n          draftPolygon.position = action.polygonState.position\r\n        }\r\n        if (action.polygonState.dots !== undefined) {\r\n          draftPolygon.dots = getDraftUpdatedByOptions<PolygonRingDots>(\r\n            draftPolygon.dots,\r\n            action.polygonState.dots\r\n          )\r\n        }\r\n        if (action.polygonState.rotation !== undefined) {\r\n          draftPolygon.rotation = getDraftUpdatedByOptions<PolygonRingRotation>(\r\n            draftPolygon.rotation,\r\n            action.polygonState.rotation\r\n          )\r\n        }\r\n        if (action.polygonState.sides !== undefined) {\r\n          draftPolygon.sides = getDraftUpdatedByOptions<PolygonRingSides>(\r\n            draftPolygon.sides,\r\n            action.polygonState.sides\r\n          )\r\n        }\r\n        if (action.polygonState.scale !== undefined) {\r\n          draftPolygon.scale = getDraftUpdatedByOptions<PolygonRingScale>(\r\n            draftPolygon.scale,\r\n            action.polygonState.scale\r\n          )\r\n        }\r\n        break\r\n      }\r\n      case \"UPDATE_POLYGON_POSITION\": {\r\n        draft[action.group].rings[action.polygon].position = action.position\r\n        break\r\n      }\r\n      case \"UPDATE_POLYGON_ACTIVE\": {\r\n        draft[action.group].rings[action.polygon].active = action.active\r\n        break\r\n      }\r\n      case \"UPDATE_POLYGON_DOTS\": {\r\n        const draftPolygon = draft[action.group].rings[action.polygon]\r\n        draftPolygon.dots = getDraftUpdatedByOptions<PolygonRingDots>(\r\n          draftPolygon.dots,\r\n          action.dots\r\n        )\r\n        break\r\n      }\r\n      case \"UPDATE_POLYGON_ROTATION\": {\r\n        const draftPolygon = draft[action.group].rings[action.polygon]\r\n        draftPolygon.rotation = getDraftUpdatedByOptions<PolygonRingRotation>(\r\n          draftPolygon.rotation,\r\n          action.rotation\r\n        )\r\n        break\r\n      }\r\n      case \"UPDATE_POLYGON_SIDES\": {\r\n        const draftPolygon = draft[action.group].rings[action.polygon]\r\n        draftPolygon.sides = getDraftUpdatedByOptions<PolygonRingSides>(\r\n          draftPolygon.sides,\r\n          action.sides\r\n        )\r\n        break\r\n      }\r\n      case \"UPDATE_POLYGON_SCALE\": {\r\n        const draftPolygon = draft[action.group].rings[action.polygon]\r\n        draftPolygon.scale = getDraftUpdatedByOptions<PolygonRingScale>(\r\n          draftPolygon.scale,\r\n          action.scale\r\n        )\r\n        break\r\n      }\r\n      case \"RANDOMIZE_POLYGON_RINGS\": {\r\n        const draftGroups = draft[action.group]\r\n        draftGroups.rings = createRandomPolygonRings()\r\n        break\r\n      }\r\n      case \"RANDOMIZE_POLYGON\": {\r\n        const draftRings = draft[action.group].rings\r\n        draftRings[action.polygon] = getRandomPolygon(\r\n          original(draftRings[action.polygon])\r\n        )\r\n        break\r\n      }\r\n      case \"RANDOMIZE_POLYGON_SIDES\": {\r\n        const draftPolygon = draft[action.group].rings[action.polygon]\r\n        draftPolygon.sides = getRandomSides()\r\n        break\r\n      }\r\n      case \"RANDOMIZE_POLYGON_ROTATION\": {\r\n        const draftPolygon = draft[action.group].rings[action.polygon]\r\n        draftPolygon.rotation = getRandomRotation()\r\n        break\r\n      }\r\n      case \"RANDOMIZE_POLYGON_SCALE\": {\r\n        const draftPolygon = draft[action.group].rings[action.polygon]\r\n        draftPolygon.scale = getRandomScale()\r\n        break\r\n      }\r\n      case \"RANDOMIZE_POLYGON_DOTS\": {\r\n        const draftPolygon = draft[action.group].rings[action.polygon]\r\n        const sides = draftPolygon.sides.amount\r\n        draftPolygon.dots = getRandomDots(sides)\r\n        break\r\n      }\r\n    }\r\n  }\r\n)\r\n\r\nconst polygonGroupsInitialState: PolygonGroup[] = [\r\n  {\r\n    active: true,\r\n    position: { x: 0, y: 0 },\r\n    rings: [\r\n      {\r\n        active: true,\r\n        position: { x: 0, y: 0 },\r\n        dots: {\r\n          enabled: true,\r\n          fillColours: [\"black\"],\r\n          size: 1,\r\n          strokeColours: [\"black\"],\r\n          strokeWidth: 1,\r\n        },\r\n        rotation: {\r\n          clockwise: true,\r\n          enabled: true,\r\n          speed: 1,\r\n          startingRotation: 1,\r\n        },\r\n        scale: {\r\n          enabled: true,\r\n          speed: 1,\r\n          range: { max: 10, min: 0 },\r\n          startingSize: 5,\r\n        },\r\n        sides: {\r\n          enabled: true,\r\n          strokeWidth: 1,\r\n          colours: [\"black\"],\r\n          amount: 6,\r\n        },\r\n      },\r\n    ],\r\n  },\r\n]\r\n\r\nfunction polygonGroupsInit(\r\n  polygonGroupsInitialState: PolygonGroup[]\r\n): PolygonGroup[] {\r\n  const newPolygon = [...polygonGroupsInitialState]\r\n  newPolygon[0].rings = createRandomPolygonRings()\r\n  return newPolygon\r\n}\r\n\r\nexport const PolygonGroupsContextWrapper: React.FC = ({ children }) => {\r\n  const [state, dispatch] = useReducer(\r\n    polygonGroupsReducer,\r\n    polygonGroupsInitialState,\r\n    polygonGroupsInit\r\n  )\r\n\r\n  return (\r\n    <polygonGroupsDispatchContext.Provider value={dispatch}>\r\n      <polygonGroupsStateContext.Provider value={state}>\r\n        {children}\r\n      </polygonGroupsStateContext.Provider>\r\n    </polygonGroupsDispatchContext.Provider>\r\n  )\r\n}\r\n\r\nexport const polygonGroupsDispatchContext = createContext(\r\n  {} as React.Dispatch<PolygonGroupsActions>\r\n)\r\nexport const polygonGroupsStateContext = createContext(\r\n  [] as Readonly<PolygonGroup[]>\r\n)\r\n","import React from \"react\"\r\nimport { useTransition, animated } from \"react-spring\"\r\nimport styled from \"styled-components\"\r\n\r\ninterface ScreensProps {\r\n  currentScreen: number\r\n}\r\n\r\nconst Screen = styled(animated.div)`\r\n  grid-row: 1;\r\n  grid-column: 1;\r\n`\r\n\r\nconst Screens: React.FC<ScreensProps> = ({ children, currentScreen }) => {\r\n  const transitions = useTransition(currentScreen, (item: number) => item, {\r\n    from: {\r\n      opacity: 0,\r\n      transform: \"translate(100%,0)\",\r\n    },\r\n    enter: { opacity: 1, transform: \"translate(0%,0)\" },\r\n    leave: {\r\n      opacity: 0,\r\n      transform: \"translate(-50%,0)\",\r\n    },\r\n  })\r\n  return (\r\n    <>\r\n      {transitions.map(({ item, key, props }) => {\r\n        return (\r\n          <Screen key={key} style={props}>\r\n            {React.Children.map(children, (child, index) => {\r\n              if (index === item - 1) {\r\n                return child\r\n              }\r\n            })}\r\n          </Screen>\r\n        )\r\n      })}\r\n    </>\r\n  )\r\n}\r\n\r\nexport default Screens\r\n","import { PolygonRing, Cords } from \"reducer-contexts/polygon-groups\"\r\n\r\nexport interface PolygonAnimation {\r\n  position: Cords\r\n  currentRotation: number\r\n  dots: {\r\n    enabled: boolean\r\n    fillColours: string[]\r\n    strokeColours: string[]\r\n    strokeWidth: number\r\n    size: number\r\n    position: Cords[]\r\n  }\r\n  sides: {\r\n    enabled: boolean\r\n    strokeColours: string[]\r\n    strokeWidth: number\r\n    positions: [Cords, Cords][]\r\n  }\r\n}\r\n\r\ninterface PolygonPoint extends Cords {\r\n  cos: number\r\n  sin: number\r\n}\r\n\r\ninterface PolygonAnimationConstants {\r\n  position: Cords\r\n  rotationSpeed: number\r\n  scalingSpeed: number\r\n  scalingRange: { min: number; max: number }\r\n  isActive: boolean\r\n  isRotating: boolean\r\n  isScaling: boolean\r\n  isRotatingClockwise: boolean\r\n}\r\n\r\ninterface PolygonAnimationState {\r\n  currentRotation: number\r\n  currentSize: number\r\n  currentlyExpanding: boolean\r\n  polygonPoints: PolygonPoint[]\r\n}\r\n\r\ninterface PolygonStyle {\r\n  sides: {\r\n    enabled: boolean\r\n    colours: string[]\r\n    strokeWidth: number\r\n  }\r\n  dots: {\r\n    enabled: boolean\r\n    strokeColours: string[]\r\n    fillColours: string[]\r\n    strokeWidth: number\r\n    size: number\r\n  }\r\n}\r\n\r\nexport class PolygonAnimationCalculation {\r\n  private style: PolygonStyle\r\n  private animationState: PolygonAnimationState\r\n  private animationConstants: PolygonAnimationConstants\r\n\r\n  constructor(polygon: PolygonRing) {\r\n    this.style = this.getInitialStyles(polygon)\r\n    this.animationConstants = this.getInitialConstants(polygon)\r\n    this.animationState = this.getInitialState(polygon)\r\n  }\r\n\r\n  private getInitialStyles({ sides, dots }: PolygonRing): PolygonStyle {\r\n    return {\r\n      sides: {\r\n        colours: sides.colours,\r\n        strokeWidth: sides.strokeWidth,\r\n        enabled: sides.enabled,\r\n      },\r\n      dots: {\r\n        enabled: dots.enabled,\r\n        size: dots.size,\r\n        fillColours: dots.fillColours,\r\n        strokeColours: dots.strokeColours,\r\n        strokeWidth: dots.strokeWidth,\r\n      },\r\n    }\r\n  }\r\n\r\n  private getInitialPoints(\r\n    sides: number,\r\n    startingSize: number\r\n  ): PolygonPoint[] {\r\n    const twoPi = Math.PI * 2\r\n    const angleBetweenPoints = twoPi / sides\r\n\r\n    let currentAngle = angleBetweenPoints\r\n    return [...Array(sides)].map(() => {\r\n      currentAngle += angleBetweenPoints\r\n      const cos = Math.cos(currentAngle)\r\n      const sin = Math.sin(currentAngle)\r\n      const x = Math.round(cos * startingSize)\r\n      const y = Math.round(sin * startingSize)\r\n\r\n      return { x, y, sin, cos }\r\n    })\r\n  }\r\n\r\n  private getInitialConstants({\r\n    active,\r\n    rotation,\r\n    scale,\r\n    position,\r\n  }: PolygonRing): PolygonAnimationConstants {\r\n    return {\r\n      position,\r\n      isActive: active,\r\n      isRotating: rotation.enabled,\r\n      isScaling: scale.enabled,\r\n      isRotatingClockwise: rotation.clockwise,\r\n      rotationSpeed: rotation.speed,\r\n      scalingSpeed: scale.speed,\r\n      scalingRange: scale.range,\r\n    }\r\n  }\r\n\r\n  private getInitialState({\r\n    scale,\r\n    rotation,\r\n    sides,\r\n  }: PolygonRing): PolygonAnimationState {\r\n    const polygonPoints = this.getInitialPoints(\r\n      sides.amount,\r\n      scale.startingSize\r\n    )\r\n    const currentlyExpanding =\r\n      scale.startingSize <= (scale.range.max - scale.range.min) / 2\r\n    return {\r\n      currentRotation: rotation.startingRotation,\r\n      currentSize: scale.startingSize,\r\n      currentlyExpanding,\r\n      polygonPoints,\r\n    }\r\n  }\r\n\r\n  private updateRotation() {\r\n    const {\r\n      isRotating,\r\n      isRotatingClockwise,\r\n      rotationSpeed,\r\n    } = this.animationConstants\r\n    const { currentRotation } = this.animationState\r\n\r\n    let newRotation: number\r\n    if (isRotating) {\r\n      if (isRotatingClockwise) {\r\n        newRotation = currentRotation + rotationSpeed\r\n      } else {\r\n        newRotation = currentRotation - rotationSpeed\r\n      }\r\n      if (newRotation >= 360) {\r\n        const amountOver = currentRotation - 360\r\n        newRotation = 0 + amountOver\r\n      } else if (newRotation <= -360) {\r\n        const amountOver = currentRotation - 360\r\n        newRotation = 0 - amountOver\r\n      }\r\n\r\n      this.animationState.currentRotation = newRotation\r\n    }\r\n  }\r\n\r\n  private updateScale() {\r\n    const { isScaling, scalingSpeed, scalingRange } = this.animationConstants\r\n    const {\r\n      currentlyExpanding,\r\n      polygonPoints,\r\n      currentSize,\r\n    } = this.animationState\r\n\r\n    if (isScaling) {\r\n      let updatedSize: number\r\n      let updatedCurrentlyExpanding = currentlyExpanding\r\n      if (currentlyExpanding) {\r\n        updatedSize = currentSize + scalingSpeed\r\n      } else {\r\n        updatedSize = currentSize - scalingSpeed\r\n      }\r\n\r\n      if (updatedSize >= scalingRange.max) {\r\n        updatedSize = scalingRange.max\r\n        updatedCurrentlyExpanding = false\r\n      } else if (updatedSize <= scalingRange.min) {\r\n        updatedSize = scalingRange.min\r\n        updatedCurrentlyExpanding = true\r\n      }\r\n\r\n      const newPolygonPoints = polygonPoints.map((point) => {\r\n        const { cos, sin } = point\r\n        const newPoint = { ...point }\r\n\r\n        newPoint.x = Math.round(cos * updatedSize)\r\n        newPoint.y = Math.round(sin * updatedSize)\r\n\r\n        return newPoint\r\n      })\r\n\r\n      this.animationState.currentSize = updatedSize\r\n      this.animationState.currentlyExpanding = updatedCurrentlyExpanding\r\n      this.animationState.polygonPoints = newPolygonPoints\r\n    }\r\n  }\r\n\r\n  public getPolygonFrame(): PolygonAnimation {\r\n    const { dots, sides } = this.style\r\n    const { currentRotation, polygonPoints } = this.animationState\r\n    const { position } = this.animationConstants\r\n    const dotPositions = polygonPoints.map((point) => {\r\n      return { x: point.x, y: point.y }\r\n    })\r\n    const sidesPositions: [Cords, Cords][] = polygonPoints.map(\r\n      (point, index) => {\r\n        const totalPoints = polygonPoints.length\r\n        const nextIndex = index + 1\r\n        let nextPoint: Cords\r\n        if (nextIndex === totalPoints) {\r\n          nextPoint = { x: polygonPoints[0].x, y: polygonPoints[0].y }\r\n        } else {\r\n          nextPoint = {\r\n            x: polygonPoints[nextIndex].x,\r\n            y: polygonPoints[nextIndex].y,\r\n          }\r\n        }\r\n        return [{ x: point.x, y: point.y }, nextPoint]\r\n      }\r\n    )\r\n\r\n    return {\r\n      position,\r\n      currentRotation,\r\n      dots: {\r\n        enabled: dots.enabled,\r\n        size: dots.size,\r\n        position: dotPositions,\r\n        fillColours: dots.fillColours,\r\n        strokeColours: dots.strokeColours,\r\n        strokeWidth: dots.strokeWidth,\r\n      },\r\n      sides: {\r\n        enabled: sides.enabled,\r\n        positions: sidesPositions,\r\n        strokeWidth: sides.strokeWidth,\r\n        strokeColours: sides.colours,\r\n      },\r\n    }\r\n  }\r\n  public getPolygonFrameAndStep(): PolygonAnimation {\r\n    const { isActive } = this.animationConstants\r\n    const currentFrame = this.getPolygonFrame()\r\n    if (isActive) {\r\n      this.updateScale()\r\n      this.updateRotation()\r\n    }\r\n    return currentFrame\r\n  }\r\n}\r\n","import { P5 } from \"types/p5\"\r\nimport {\r\n  PolygonAnimationCalculation,\r\n  PolygonAnimation,\r\n} from \"polygon-logic/polygon-animation-calculation\"\r\n// Disabled because PolygonRing is only used as a type and is getting flagged\r\n// eslint-disable-next-line\r\nimport { PolygonRing, PolygonGroup } from \"reducer-contexts/polygon-groups\"\r\n\r\nfunction getSizeConstrainedCords(\r\n  size: { width: number; height: number },\r\n  cords: { x: number; y: number }\r\n): { x: number; y: number } {\r\n  const x = Math.floor((size.width * (cords.x / 100)) / 2)\r\n  const y = Math.floor((size.height * (cords.y / 100)) / 2)\r\n  return { x, y }\r\n}\r\n\r\nfunction singlePolygonDraw(\r\n  polygonAnimation: PolygonAnimation,\r\n  size: { width: number; height: number },\r\n  p5: P5\r\n) {\r\n  const { currentRotation, dots, sides, position } = polygonAnimation\r\n  const { x, y } = getSizeConstrainedCords(size, position)\r\n\r\n  p5.push()\r\n  p5.translate(x, y)\r\n  p5.rotate(currentRotation)\r\n  if (sides.enabled) {\r\n    sides.positions.forEach((cords, index) => {\r\n      const stokeColour = index % sides.strokeColours.length\r\n      p5.stroke(sides.strokeColours[stokeColour])\r\n      p5.strokeWeight(sides.strokeWidth)\r\n      p5.line(cords[0].x, cords[0].y, cords[1].x, cords[1].y)\r\n    })\r\n  }\r\n  if (dots.enabled) {\r\n    p5.push()\r\n    dots.position.forEach((cords, index) => {\r\n      const fillColourIndex = index % dots.fillColours.length\r\n      const stokeColourIndex = index % dots.strokeColours.length\r\n      const { x, y } = cords\r\n      p5.fill(dots.fillColours[fillColourIndex])\r\n      p5.strokeWeight(dots.strokeWidth)\r\n      p5.stroke(dots.strokeColours[stokeColourIndex])\r\n      p5.ellipse(x, y, dots.size)\r\n    })\r\n    p5.pop()\r\n  }\r\n  p5.pop()\r\n}\r\n\r\nexport function generatePolygonRingSketch(\r\n  PolygonRing: Readonly<PolygonRing>,\r\n  windowSize: { height: number; width: number }\r\n) {\r\n  const polygonRingInstance = new PolygonAnimationCalculation(PolygonRing)\r\n\r\n  return (p5: P5) => {\r\n    p5.setup = () => {\r\n      p5.createCanvas(windowSize.width, windowSize.height)\r\n      p5.background(\"grey\")\r\n    }\r\n    p5.draw = () => {\r\n      polygonRingInstance.getPolygonFrameAndStep()\r\n      p5.angleMode(\"degrees\")\r\n      p5.translate(windowSize.width / 2, windowSize.height / 2)\r\n      singlePolygonDraw(\r\n        polygonRingInstance.getPolygonFrameAndStep(),\r\n        windowSize,\r\n        p5\r\n      )\r\n    }\r\n  }\r\n}\r\n\r\nexport function generatePolygonGroupSketch(\r\n  polygonGroup: Readonly<PolygonGroup>,\r\n  windowSize: { height: number; width: number }\r\n) {\r\n  const polygonRingInstances = polygonGroup.rings.map((polygonRing) => {\r\n    return new PolygonAnimationCalculation(polygonRing)\r\n  })\r\n\r\n  return (p5: P5) => {\r\n    p5.setup = () => {\r\n      p5.createCanvas(windowSize.width, windowSize.height)\r\n      p5.background(\"grey\")\r\n    }\r\n    p5.draw = () => {\r\n      p5.angleMode(\"degrees\")\r\n      p5.background(\"grey\")\r\n      p5.translate(windowSize.width / 2, windowSize.height / 2)\r\n      p5.push()\r\n      for (const polygonRing of polygonRingInstances) {\r\n        singlePolygonDraw(polygonRing.getPolygonFrameAndStep(), windowSize, p5)\r\n      }\r\n      p5.pop()\r\n    }\r\n  }\r\n}\r\n\r\nexport function generateAllPolygonRingGroupsSketch(\r\n  polygonGroups: Readonly<PolygonGroup[]>,\r\n  windowSize: { height: number; width: number }\r\n) {\r\n  const polygonGroupInstances = polygonGroups.map(({ rings }) =>\r\n    rings.map((polygonRing) => {\r\n      return new PolygonAnimationCalculation(polygonRing)\r\n    })\r\n  )\r\n\r\n  return (p5: P5) => {\r\n    p5.setup = () => {\r\n      p5.createCanvas(windowSize.width, windowSize.height)\r\n      p5.background(\"lightgrey\")\r\n    }\r\n    p5.draw = () => {\r\n      p5.angleMode(\"degrees\")\r\n      p5.background(\"rgba(255,255,255, 0.05)\")\r\n      p5.translate(windowSize.width / 2, windowSize.height / 2)\r\n      polygonGroupInstances.forEach((polygonGroupRings, index) => {\r\n        p5.push()\r\n        const { x, y } = getSizeConstrainedCords(\r\n          windowSize,\r\n          polygonGroups[index].position\r\n        )\r\n        p5.translate(x, y)\r\n        for (const polygonRingInstance of polygonGroupRings) {\r\n          singlePolygonDraw(\r\n            polygonRingInstance.getPolygonFrameAndStep(),\r\n            windowSize,\r\n            p5\r\n          )\r\n        }\r\n        p5.pop()\r\n      })\r\n    }\r\n  }\r\n}\r\n","import React, { useEffect, useRef } from \"react\"\r\nimport p5 from \"p5\"\r\nimport { P5 } from \"types/p5\"\r\nimport styled from \"styled-components\"\r\n\r\nconst Container = styled.div`\r\n  width: 100%;\r\n  height: 100%;\r\n`\r\ninterface P5CanvasProps {\r\n  sketch: (p5: P5) => void\r\n}\r\n\r\nexport const P5Canvas: React.FC<P5CanvasProps> = ({ sketch }) => {\r\n  const divRef = useRef<HTMLDivElement>(null)\r\n  const P5Ref = useRef<P5>()\r\n\r\n  useEffect(() => {\r\n    const node = divRef.current as HTMLDivElement\r\n    if (P5Ref.current !== undefined) {\r\n      P5Ref.current.remove()\r\n    }\r\n    const p5Instance = new p5(sketch, node)\r\n    P5Ref.current = p5Instance\r\n\r\n    return () => {\r\n      const P5Instance = P5Ref.current as P5\r\n      P5Instance.remove()\r\n    }\r\n  }, [P5Ref, divRef, sketch])\r\n\r\n  return <Container ref={divRef} />\r\n}\r\n","import React, { useContext, useEffect, useRef, useState } from \"react\"\r\nimport styled from \"styled-components\"\r\n\r\nimport {\r\n  polygonGroupsStateContext,\r\n  PolygonGroup,\r\n} from \"reducer-contexts/polygon-groups\"\r\nimport { generateAllPolygonRingGroupsSketch } from \"polygon-logic/polygon-p5-draw\"\r\n\r\nimport { P5Canvas } from \"components/P5Canvas\"\r\n\r\nconst MainCanvasWrapper = styled.div`\r\n  background: white;\r\n  width: 100%;\r\n  height: 100%;\r\n  max-width: 100vw;\r\n  text-align: center;\r\n  font-size: 200;\r\n`\r\n\r\nfunction generateKey(\r\n  polygonGroups: Readonly<PolygonGroup[]>,\r\n  containerSize: { height: number; width: number }\r\n): string {\r\n  const polygonGroupLength = polygonGroups.length\r\n  const polygonRingLengths = polygonGroups\r\n    .map((polygonGroup) => polygonGroup.rings.length)\r\n    .join(\"-\")\r\n  const polygonRingRotations = polygonGroups\r\n    .map((polygonGroup) =>\r\n      polygonGroup.rings.map((ring) => ring.rotation.startingRotation).join(\"-\")\r\n    )\r\n    .join(\"-\")\r\n\r\n  return `${polygonGroupLength}-${polygonRingLengths}-${polygonRingRotations}-${containerSize.width}-${containerSize.height}`\r\n}\r\n\r\nexport const MainCanvas: React.FC = () => {\r\n  const polygonContext = useContext(polygonGroupsStateContext)\r\n  const [currentSize, setCurrentSize] = useState({ height: 0, width: 0 })\r\n  const mainWrapper = useRef(\r\n    null\r\n  ) as React.MutableRefObject<null | HTMLDivElement>\r\n\r\n  /**\r\n   * Updates the canvas size when the ref for the wrapping component\r\n   * comes back.\r\n   *\r\n   * Also listens to the window resize and updates the canvas size if\r\n   * it changes. But its throttled by 250ms\r\n   */\r\n  useEffect(() => {\r\n    if (mainWrapper?.current) {\r\n      setCurrentSize({\r\n        height: mainWrapper.current.offsetHeight,\r\n        width: mainWrapper.current.offsetWidth,\r\n      })\r\n    }\r\n  }, [mainWrapper, setCurrentSize])\r\n\r\n  useEffect(() => {\r\n    function updateCanvasSize() {\r\n      if (mainWrapper?.current) {\r\n        setCurrentSize({\r\n          height: mainWrapper.current.offsetHeight,\r\n          width: mainWrapper.current.offsetWidth,\r\n        })\r\n      }\r\n    }\r\n\r\n    updateCanvasSize()\r\n\r\n    let timeoutId: number\r\n    const throttledWindowUpdate = () => {\r\n      clearTimeout(timeoutId)\r\n      timeoutId = setTimeout(() => updateCanvasSize(), 250)\r\n    }\r\n\r\n    window.addEventListener(\"resize\", throttledWindowUpdate)\r\n    return () => {\r\n      window.removeEventListener(\"resize\", throttledWindowUpdate)\r\n    }\r\n  }, [mainWrapper, setCurrentSize])\r\n\r\n  return (\r\n    <MainCanvasWrapper ref={mainWrapper}>\r\n      <P5Canvas\r\n        sketch={generateAllPolygonRingGroupsSketch(polygonContext, currentSize)}\r\n        key={generateKey(polygonContext, currentSize)}\r\n      />\r\n    </MainCanvasWrapper>\r\n  )\r\n}\r\n","import React, { useContext } from \"react\"\r\nimport styled from \"styled-components\"\r\n\r\nimport {\r\n  navigationStateContext,\r\n  navigationDispatchContext,\r\n} from \"reducer-contexts/navigation\"\r\n\r\nimport { polygonGroupsDispatchContext } from \"reducer-contexts/polygon-groups\"\r\n\r\nimport Screens from \"components/Screens\"\r\nimport { MainCanvas } from \"components/MainCanvas\"\r\n\r\nconst Main = styled.main`\r\n  display: grid;\r\n  grid-template-rows: minmax(90%, 90vh) minmax(10vh, 10px);\r\n  overflow: hidden;\r\n`\r\n\r\nconst App: React.FC = () => {\r\n  const navigationState = useContext(navigationStateContext)\r\n  const navigationDispatch = useContext(navigationDispatchContext)\r\n  const polygonGroupsDispatch = useContext(polygonGroupsDispatchContext)\r\n\r\n  return (\r\n    <Main>\r\n      <Screens currentScreen={navigationState.currentScreen}>\r\n        <MainCanvas />\r\n\r\n        <h1\r\n          style={{\r\n            background: \"purple\",\r\n            width: \"100%\",\r\n            height: \"100%\",\r\n            textAlign: \"center\",\r\n            fontSize: 200,\r\n          }}\r\n        >\r\n          Hello\r\n        </h1>\r\n        <h1\r\n          style={{\r\n            background: \"pink\",\r\n            width: \"100%\",\r\n            height: \"100%\",\r\n            textAlign: \"center\",\r\n            fontSize: 200,\r\n          }}\r\n        >\r\n          World\r\n        </h1>\r\n      </Screens>\r\n      <div>\r\n        <h1>Hello</h1>\r\n        <button\r\n          onClick={() => {\r\n            navigationDispatch({ type: \"PREV_SCREEN\" })\r\n          }}\r\n        >\r\n          Previous\r\n        </button>\r\n        <button\r\n          onClick={() => {\r\n            navigationDispatch({ type: \"NEXT_SCREEN\" })\r\n          }}\r\n        >\r\n          Next\r\n        </button>\r\n        <br />\r\n        <button\r\n          onClick={() => {\r\n            polygonGroupsDispatch({ type: \"RANDOMIZE_POLYGON_RINGS\", group: 0 })\r\n          }}\r\n        >\r\n          Randomize!\r\n        </button>\r\n      </div>\r\n    </Main>\r\n  )\r\n}\r\n\r\nexport default App\r\n","import React from \"react\"\r\nimport ReactDOM from \"react-dom\"\r\nimport * as serviceWorker from \"./serviceWorker\"\r\n\r\nimport App from \"components/App\"\r\nimport { NavigationContextWrapper } from \"reducer-contexts/navigation\"\r\nimport { PolygonGroupsContextWrapper } from \"reducer-contexts/polygon-groups\"\r\n\r\nimport \"./reset.css\"\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <PolygonGroupsContextWrapper>\r\n      <NavigationContextWrapper>\r\n        <App />\r\n      </NavigationContextWrapper>\r\n    </PolygonGroupsContextWrapper>\r\n  </React.StrictMode>,\r\n  document.getElementById(\"root\")\r\n)\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.register()\r\n"],"sourceRoot":""}