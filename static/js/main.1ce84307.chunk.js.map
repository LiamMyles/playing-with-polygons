{"version":3,"sources":["serviceWorker.ts","reducer-contexts/navigation.tsx","components/Screens.tsx","reducer-contexts/polygon-groups.tsx","polygon-logic/polygon-animation-calculation.tsx","polygon-logic/polygon-p5-draw.tsx","components/P5Canvas.tsx","components/MainCanvas.tsx","components/App.tsx","index.tsx"],"names":["isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","console","log","onUpdate","onSuccess","catch","error","navigationReducer","produce","draft","action","type","newScreen","currentScreen","totalScreens","navigationInitialState","NavigationContextWrapper","children","useReducer","dispatch","Provider","value","navigationDispatch","createContext","navigationState","Screen","styled","animated","div","Screens","transitions","useTransition","item","from","opacity","transform","enter","leave","map","key","props","style","React","Children","child","index","getDraftUpdatedByOptions","options","newState","original","Object","keys","forEach","option","getRandomArbitrary","min","max","Math","random","getRandomIntInclusive","ceil","floor","getRandomBoolean","getRandomRGB","h","s","l","r","g","b","hue2rgb","p","q","t","round","hslToRgb","getRandomColoursForPolygon","amountOfSides","amountOfColours","Array","getRandomSides","sidesAmount","enabled","strokeWidth","amount","colours","getRandomDots","fillColours","size","strokeColours","getRandomRotation","clockwise","speed","startingRotation","getRandomScale","inputMin","inputMax","getRandomMinAndMaxInt","range","startingSize","getRandomPolygon","active","position","x","y","sides","dots","rotation","scale","polygonGroupsReducer","push","rings","group","draftPolygon","polygon","undefined","polygonState","amountOfRings","createRandomPolygonRings","draftRings","polygonGroupsInitialState","PolygonGroupsContextWrapper","polygonGroupsDispatchContext","polygonGroupsStateContext","PolygonAnimationCalculation","animationState","animationConstants","this","getInitialStyles","getInitialConstants","getInitialState","angleBetweenPoints","PI","currentAngle","cos","sin","isActive","isRotating","isScaling","isRotatingClockwise","rotationSpeed","scalingSpeed","scalingRange","polygonPoints","getInitialPoints","currentlyExpanding","currentRotation","currentSize","newRotation","updatedSize","updatedCurrentlyExpanding","newPolygonPoints","point","newPoint","dotPositions","sidesPositions","nextPoint","nextIndex","length","positions","currentFrame","getPolygonFrame","updateScale","updateRotation","singlePolygonDraw","polygonAnimation","p5","width","height","translate","rotate","cords","stokeColour","stroke","strokeWeight","line","fillColourIndex","stokeColourIndex","fill","ellipse","pop","Container","P5Canvas","sketch","divRef","useRef","P5Ref","useEffect","node","current","remove","p5Instance","ref","generateKey","polygonGroups","containerSize","polygonGroupLength","polygonRingLengths","polygonGroup","join","polygonRingRotations","ring","MainCanvas","polygonDispatch","useContext","polygonContext","useState","setCurrentSize","mainWrapper","offsetHeight","offsetWidth","updateCanvasSize","timeoutId","throttledWindowUpdate","clearTimeout","setTimeout","addEventListener","removeEventListener","sketchAll","windowSize","polygonGroupInstances","polygonRing","setup","createCanvas","background","draw","angleMode","polygonGroupRings","getPolygonFrameAndStep","generateAllPolygonRingGroupsSketch","maxWidth","textAlign","fontSize","Main","main","App","navigationStateContext","navigationDispatchContext","onClick","ReactDOM","render","StrictMode","document","getElementById","URL","process","href","origin","fetch","headers","response","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.1ce84307.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === \"localhost\" ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === \"[::1]\" ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n)\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void\n  onUpdate?: (registration: ServiceWorkerRegistration) => void\n}\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href)\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return\n    }\n\n    window.addEventListener(\"load\", () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config)\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            \"This web app is being served cache-first by a service \" +\n              \"worker. To learn more, visit https://bit.ly/CRA-PWA\"\n          )\n        })\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config)\n      }\n    })\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing\n        if (installingWorker == null) {\n          return\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === \"installed\") {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                \"New content is available and will be used when all \" +\n                  \"tabs for this page are closed. See https://bit.ly/CRA-PWA.\"\n              )\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration)\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log(\"Content is cached for offline use.\")\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration)\n              }\n            }\n          }\n        }\n      }\n    })\n    .catch((error) => {\n      console.error(\"Error during service worker registration:\", error)\n    })\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { \"Service-Worker\": \"script\" },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get(\"content-type\")\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf(\"javascript\") === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload()\n          })\n        })\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config)\n      }\n    })\n    .catch(() => {\n      console.log(\n        \"No internet connection found. App is running in offline mode.\"\n      )\n    })\n}\n\nexport function unregister() {\n  if (\"serviceWorker\" in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister()\n      })\n      .catch((error) => {\n        console.error(error.message)\n      })\n  }\n}\n","import React, { useReducer, createContext } from \"react\"\r\nimport produce, { Draft } from \"immer\"\r\n\r\ninterface NavigationState {\r\n  currentScreen: number\r\n  totalScreens: number\r\n}\r\n\r\ninterface NextScreen {\r\n  type: \"NEXT_SCREEN\"\r\n}\r\n\r\ninterface PrevScreen {\r\n  type: \"PREV_SCREEN\"\r\n}\r\n\r\nexport type NavigationActions = PrevScreen | NextScreen\r\n\r\nexport const navigationReducer = produce(\r\n  (draft: Draft<NavigationState>, action: NavigationActions) => {\r\n    switch (action.type) {\r\n      case \"NEXT_SCREEN\": {\r\n        const newScreen = draft.currentScreen + 1\r\n        if (newScreen <= draft.totalScreens) {\r\n          draft.currentScreen = newScreen\r\n        } else {\r\n          draft.currentScreen = 1\r\n        }\r\n        break\r\n      }\r\n      case \"PREV_SCREEN\": {\r\n        const newScreen = draft.currentScreen - 1\r\n        if (newScreen <= 0) {\r\n          draft.currentScreen = draft.totalScreens\r\n        } else {\r\n          draft.currentScreen = newScreen\r\n        }\r\n        break\r\n      }\r\n    }\r\n  }\r\n)\r\n\r\nexport const navigationInitialState = { currentScreen: 1, totalScreens: 3 }\r\n\r\nexport const NavigationContextWrapper: React.FC = ({ children }) => {\r\n  const [state, dispatch] = useReducer(\r\n    navigationReducer,\r\n    navigationInitialState\r\n  )\r\n\r\n  return (\r\n    <navigationDispatch.Provider value={dispatch}>\r\n      <navigationState.Provider value={state}>\r\n        {children}\r\n      </navigationState.Provider>\r\n    </navigationDispatch.Provider>\r\n  )\r\n}\r\n\r\nexport const navigationDispatch = createContext(\r\n  {} as React.Dispatch<NavigationActions>\r\n)\r\nexport const navigationState = createContext({} as NavigationState)\r\n","import React from \"react\"\r\nimport { useTransition, animated } from \"react-spring\"\r\nimport styled from \"styled-components\"\r\n\r\ninterface ScreensProps {\r\n  currentScreen: number\r\n}\r\n\r\nconst Screen = styled(animated.div)`\r\n  grid-row: 1;\r\n  grid-column: 1;\r\n`\r\n\r\nconst Screens: React.FC<ScreensProps> = ({ children, currentScreen }) => {\r\n  const transitions = useTransition(currentScreen, (item: number) => item, {\r\n    from: {\r\n      opacity: 0,\r\n      transform: \"translate(100%,0)\",\r\n    },\r\n    enter: { opacity: 1, transform: \"translate(0%,0)\" },\r\n    leave: {\r\n      opacity: 0,\r\n      transform: \"translate(-50%,0)\",\r\n    },\r\n  })\r\n  return (\r\n    <>\r\n      {transitions.map(({ item, key, props }) => {\r\n        return (\r\n          <Screen key={key} style={props}>\r\n            {React.Children.map(children, (child, index) => {\r\n              if (index === item - 1) {\r\n                return child\r\n              }\r\n            })}\r\n          </Screen>\r\n        )\r\n      })}\r\n    </>\r\n  )\r\n}\r\n\r\nexport default Screens\r\n","import React, { useReducer, createContext } from \"react\"\r\nimport produce, { Draft, original } from \"immer\"\r\n\r\nexport interface Cords {\r\n  x: number\r\n  y: number\r\n}\r\n\r\nexport interface PolygonRingRotation {\r\n  enabled: boolean\r\n  clockwise: boolean\r\n  speed: number\r\n  startingRotation: number\r\n}\r\n\r\nexport interface PolygonRingScale {\r\n  enabled: boolean\r\n  speed: number\r\n  range: {\r\n    min: number\r\n    max: number\r\n  }\r\n  startingSize: number\r\n}\r\n\r\nexport interface PolygonRingDots {\r\n  enabled: boolean\r\n  size: number\r\n  fillColours: string[]\r\n  strokeColours: string[]\r\n  strokeWidth: number\r\n}\r\nexport interface PolygonRingSides {\r\n  enabled: boolean\r\n  amount: number\r\n  strokeWidth: number\r\n  colours: string[]\r\n}\r\n\r\nexport interface PolygonRing {\r\n  active: boolean\r\n  position: Cords\r\n  rotation: PolygonRingRotation\r\n  scale: PolygonRingScale\r\n  dots: PolygonRingDots\r\n  sides: PolygonRingSides\r\n}\r\n\r\nexport interface PolygonGroup {\r\n  active: boolean\r\n  position: Cords\r\n  rings: PolygonRing[]\r\n}\r\n\r\nexport type PolygonInitialState = PolygonGroup[]\r\n\r\ninterface ActionCreateGroup {\r\n  type: \"CREATE_POLYGON_GROUP\"\r\n}\r\n\r\ninterface ActionCreatePolygon {\r\n  type: \"CREATE_POLYGON\"\r\n  group: number\r\n}\r\n\r\ninterface ActionUpdatePolygonGroupPosition {\r\n  type: \"UPDATE_POLYGON_GROUP_POSITION\"\r\n  group: number\r\n  position: Cords\r\n}\r\n\r\ninterface ActionUpdatePolygonAll {\r\n  type: \"UPDATE_POLYGON_ALL\"\r\n  group: number\r\n  polygon: number\r\n  polygonState: {\r\n    active?: boolean\r\n    position?: Cords\r\n    rotation?: Partial<PolygonRingRotation>\r\n    scale?: Partial<PolygonRingScale>\r\n    dots?: Partial<PolygonRingDots>\r\n    sides?: Partial<PolygonRingSides>\r\n  }\r\n}\r\n\r\ninterface ActionUpdatePolygonActive {\r\n  type: \"UPDATE_POLYGON_ACTIVE\"\r\n  group: number\r\n  polygon: number\r\n  active: boolean\r\n}\r\ninterface ActionUpdatePolygonGroupActive {\r\n  type: \"UPDATE_POLYGON_GROUP_ACTIVE\"\r\n  group: number\r\n  active: boolean\r\n}\r\n\r\ninterface ActionUpdatePolygonPosition {\r\n  type: \"UPDATE_POLYGON_POSITION\"\r\n  group: number\r\n  polygon: number\r\n  position: Cords\r\n}\r\ninterface ActionUpdatePolygonRotation {\r\n  type: \"UPDATE_POLYGON_ROTATION\"\r\n  group: number\r\n  polygon: number\r\n  rotation: Partial<PolygonRingRotation>\r\n}\r\ninterface ActionUpdatePolygonScale {\r\n  type: \"UPDATE_POLYGON_SCALE\"\r\n  group: number\r\n  polygon: number\r\n  scale: Partial<PolygonRingScale>\r\n}\r\ninterface ActionUpdatePolygonDots {\r\n  type: \"UPDATE_POLYGON_DOTS\"\r\n  group: number\r\n  polygon: number\r\n  dots: Partial<PolygonRingDots>\r\n}\r\ninterface ActionUpdatePolygonSides {\r\n  type: \"UPDATE_POLYGON_SIDES\"\r\n  group: number\r\n  polygon: number\r\n  sides: Partial<PolygonRingSides>\r\n}\r\n\r\ninterface ActionRandomizePolygonRings {\r\n  type: \"RANDOMIZE_POLYGON_RINGS\"\r\n  group: number\r\n}\r\ninterface ActionRandomizePolygon {\r\n  type: \"RANDOMIZE_POLYGON\"\r\n  group: number\r\n  polygon: number\r\n}\r\ninterface ActionRandomizePolygonSides {\r\n  type: \"RANDOMIZE_POLYGON_SIDES\"\r\n  group: number\r\n  polygon: number\r\n}\r\ninterface ActionRandomizePolygonRotation {\r\n  type: \"RANDOMIZE_POLYGON_ROTATION\"\r\n  group: number\r\n  polygon: number\r\n}\r\ninterface ActionRandomizePolygonScale {\r\n  type: \"RANDOMIZE_POLYGON_SCALE\"\r\n  group: number\r\n  polygon: number\r\n}\r\ninterface ActionRandomizePolygonDots {\r\n  type: \"RANDOMIZE_POLYGON_DOTS\"\r\n  group: number\r\n  polygon: number\r\n}\r\n\r\nexport type PolygonGroupsActions =\r\n  | ActionCreateGroup\r\n  | ActionCreatePolygon\r\n  | ActionUpdatePolygonAll\r\n  | ActionUpdatePolygonGroupPosition\r\n  | ActionUpdatePolygonPosition\r\n  | ActionUpdatePolygonRotation\r\n  | ActionUpdatePolygonScale\r\n  | ActionUpdatePolygonDots\r\n  | ActionUpdatePolygonSides\r\n  | ActionUpdatePolygonActive\r\n  | ActionUpdatePolygonGroupActive\r\n  | ActionRandomizePolygonRings\r\n  | ActionRandomizePolygon\r\n  | ActionRandomizePolygonSides\r\n  | ActionRandomizePolygonRotation\r\n  | ActionRandomizePolygonScale\r\n  | ActionRandomizePolygonDots\r\n\r\n/**\r\n * Takes in the current draft for the matching options\r\n * and returns a updated draft with the new options so\r\n * it can be set to the new state\r\n *\r\n * @template T\r\n * @param {T} draft\r\n * @param {Partial<T>} options\r\n * @returns {T}\r\n */\r\nfunction getDraftUpdatedByOptions<T>(draft: T, options: Partial<T>): T {\r\n  const newState = { ...original(draft) } as Partial<T>\r\n  const optionKeys = Object.keys(options) as [keyof T]\r\n  optionKeys.forEach((option) => {\r\n    newState[option] = options[option]\r\n  })\r\n\r\n  return newState as T\r\n}\r\n\r\n// Randomizing Functions taken from MDN: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/random\r\n\r\nfunction getRandomArbitrary(min: number, max: number): number {\r\n  return Math.random() * (max - min) + min\r\n}\r\n\r\nfunction getRandomIntInclusive(min: number, max: number): number {\r\n  min = Math.ceil(min)\r\n  max = Math.floor(max)\r\n  return Math.floor(Math.random() * (max - min + 1)) + min\r\n}\r\n\r\nfunction getRandomMinAndMaxInt(\r\n  inputMin: number,\r\n  inputMax: number\r\n): { min: number; max: number } {\r\n  const min = getRandomIntInclusive(inputMin, inputMax - 1)\r\n  const max = getRandomIntInclusive(min + 1, inputMax)\r\n  return { min, max }\r\n}\r\n\r\nfunction getRandomBoolean(): boolean {\r\n  return getRandomIntInclusive(0, 1) === 1 ? true : false\r\n}\r\n\r\n/**\r\n * Taken from https://stackoverflow.com/questions/2353211/hsl-to-rgb-color-conversion/9493060#9493060\r\n *\r\n * Converts an HSL color value to RGB. Conversion formula\r\n * adapted from http://en.wikipedia.org/wiki/HSL_color_space.\r\n * Assumes h, s, and l are contained in the set [0, 1] and\r\n * returns r, g, and b in the set [0, 255].\r\n *\r\n *\r\n * @param   {number}  h       The hue\r\n * @param   {number}  s       The saturation\r\n * @param   {number}  l       The lightness\r\n * @return  {Array}           The RGB representation\r\n */\r\nfunction hslToRgb(h: number, s: number, l: number): [number, number, number] {\r\n  var r, g, b\r\n\r\n  if (s === 0) {\r\n    r = g = b = l // achromatic\r\n  } else {\r\n    var hue2rgb = function hue2rgb(p: number, q: number, t: number) {\r\n      if (t < 0) t += 1\r\n      if (t > 1) t -= 1\r\n      if (t < 1 / 6) return p + (q - p) * 6 * t\r\n      if (t < 1 / 2) return q\r\n      if (t < 2 / 3) return p + (q - p) * (2 / 3 - t) * 6\r\n      return p\r\n    }\r\n\r\n    var q = l < 0.5 ? l * (1 + s) : l + s - l * s\r\n    var p = 2 * l - q\r\n    r = hue2rgb(p, q, h + 1 / 3)\r\n    g = hue2rgb(p, q, h)\r\n    b = hue2rgb(p, q, h - 1 / 3)\r\n  }\r\n\r\n  return [Math.round(r * 255), Math.round(g * 255), Math.round(b * 255)]\r\n}\r\n\r\nfunction getRandomRGB(): string {\r\n  const h = getRandomArbitrary(0, 1)\r\n  const s = getRandomArbitrary(0.5, 0.7)\r\n  const l = getRandomArbitrary(0.5, 0.7)\r\n  const [r, g, b] = hslToRgb(h, s, l)\r\n  return `rgb(${r},${g},${b})`\r\n}\r\n\r\nfunction getRandomColoursForPolygon(amountOfSides: number): string[] {\r\n  const amountOfColours = getRandomIntInclusive(1, amountOfSides)\r\n\r\n  return [...Array(amountOfColours)].map(() => getRandomRGB())\r\n}\r\n\r\nfunction getRandomSides(): PolygonRingSides {\r\n  const sidesAmount = getRandomIntInclusive(3, 12)\r\n  return {\r\n    enabled: getRandomBoolean(),\r\n    strokeWidth: getRandomIntInclusive(0, 10),\r\n    amount: sidesAmount,\r\n    colours: getRandomColoursForPolygon(sidesAmount),\r\n  }\r\n}\r\nfunction getRandomDots(amountOfSides: number): PolygonRingDots {\r\n  return {\r\n    enabled: getRandomBoolean(),\r\n    fillColours: getRandomColoursForPolygon(amountOfSides),\r\n    size: getRandomIntInclusive(1, 10),\r\n    strokeWidth: getRandomIntInclusive(0, 10),\r\n    strokeColours: getRandomColoursForPolygon(amountOfSides),\r\n  }\r\n}\r\nfunction getRandomRotation(): PolygonRingRotation {\r\n  return {\r\n    enabled: getRandomBoolean(),\r\n    clockwise: getRandomBoolean(),\r\n    speed: getRandomIntInclusive(1, 5),\r\n    startingRotation: getRandomIntInclusive(1, 360),\r\n  }\r\n}\r\nfunction getRandomScale(): PolygonRingScale {\r\n  const { min, max } = getRandomMinAndMaxInt(1, 300)\r\n  return {\r\n    enabled: getRandomBoolean(),\r\n    range: { min, max },\r\n    speed: getRandomIntInclusive(1, 5),\r\n    startingSize: getRandomIntInclusive(min, max),\r\n  }\r\n}\r\n\r\nfunction getRandomPolygon({\r\n  active = true,\r\n  position = { x: 0, y: 0 },\r\n}: Partial<PolygonRing> = {}): PolygonRing {\r\n  const sides = getRandomSides()\r\n  const dots = getRandomDots(sides.amount)\r\n  const rotation = getRandomRotation()\r\n  const scale = getRandomScale()\r\n\r\n  return { active, position, sides, dots, rotation, scale }\r\n}\r\n\r\nfunction createRandomPolygonRings(): PolygonRing[] {\r\n  const amountOfRings = getRandomIntInclusive(2, 6)\r\n\r\n  return [...Array(amountOfRings)].map(() => getRandomPolygon())\r\n}\r\n\r\ntype PolygonGroupsReducer = React.Reducer<\r\n  Readonly<PolygonInitialState>,\r\n  PolygonGroupsActions\r\n>\r\nexport const polygonGroupsReducer: PolygonGroupsReducer = produce(\r\n  (draft: Draft<PolygonInitialState>, action: PolygonGroupsActions) => {\r\n    switch (action.type) {\r\n      case \"CREATE_POLYGON_GROUP\": {\r\n        draft.push({ active: true, position: { x: 0, y: 0 }, rings: [] })\r\n        break\r\n      }\r\n      case \"CREATE_POLYGON\": {\r\n        draft[action.group].rings.push({\r\n          active: true,\r\n          position: { x: 0, y: 0 },\r\n          dots: {\r\n            enabled: true,\r\n            fillColours: [\"black\"],\r\n            size: 1,\r\n            strokeColours: [\"black\"],\r\n            strokeWidth: 1,\r\n          },\r\n          rotation: {\r\n            clockwise: true,\r\n            enabled: true,\r\n            speed: 1,\r\n            startingRotation: 1,\r\n          },\r\n          scale: {\r\n            enabled: true,\r\n            speed: 1,\r\n            range: { max: 10, min: 0 },\r\n            startingSize: 5,\r\n          },\r\n          sides: {\r\n            enabled: true,\r\n            strokeWidth: 1,\r\n            colours: [\"black\"],\r\n            amount: 6,\r\n          },\r\n        })\r\n        break\r\n      }\r\n      case \"UPDATE_POLYGON_GROUP_POSITION\": {\r\n        draft[action.group].position = action.position\r\n        break\r\n      }\r\n      case \"UPDATE_POLYGON_GROUP_ACTIVE\": {\r\n        draft[action.group].active = action.active\r\n        break\r\n      }\r\n      case \"UPDATE_POLYGON_ALL\": {\r\n        const draftPolygon = draft[action.group].rings[action.polygon]\r\n        if (action.polygonState.active !== undefined) {\r\n          draftPolygon.active = action.polygonState.active\r\n        }\r\n        if (action.polygonState.position !== undefined) {\r\n          draftPolygon.position = action.polygonState.position\r\n        }\r\n        if (action.polygonState.dots !== undefined) {\r\n          draftPolygon.dots = getDraftUpdatedByOptions<PolygonRingDots>(\r\n            draftPolygon.dots,\r\n            action.polygonState.dots\r\n          )\r\n        }\r\n        if (action.polygonState.rotation !== undefined) {\r\n          draftPolygon.rotation = getDraftUpdatedByOptions<PolygonRingRotation>(\r\n            draftPolygon.rotation,\r\n            action.polygonState.rotation\r\n          )\r\n        }\r\n        if (action.polygonState.sides !== undefined) {\r\n          draftPolygon.sides = getDraftUpdatedByOptions<PolygonRingSides>(\r\n            draftPolygon.sides,\r\n            action.polygonState.sides\r\n          )\r\n        }\r\n        if (action.polygonState.scale !== undefined) {\r\n          draftPolygon.scale = getDraftUpdatedByOptions<PolygonRingScale>(\r\n            draftPolygon.scale,\r\n            action.polygonState.scale\r\n          )\r\n        }\r\n        break\r\n      }\r\n      case \"UPDATE_POLYGON_POSITION\": {\r\n        draft[action.group].rings[action.polygon].position = action.position\r\n        break\r\n      }\r\n      case \"UPDATE_POLYGON_ACTIVE\": {\r\n        draft[action.group].rings[action.polygon].active = action.active\r\n        break\r\n      }\r\n      case \"UPDATE_POLYGON_DOTS\": {\r\n        const draftPolygon = draft[action.group].rings[action.polygon]\r\n        draftPolygon.dots = getDraftUpdatedByOptions<PolygonRingDots>(\r\n          draftPolygon.dots,\r\n          action.dots\r\n        )\r\n        break\r\n      }\r\n      case \"UPDATE_POLYGON_ROTATION\": {\r\n        const draftPolygon = draft[action.group].rings[action.polygon]\r\n        draftPolygon.rotation = getDraftUpdatedByOptions<PolygonRingRotation>(\r\n          draftPolygon.rotation,\r\n          action.rotation\r\n        )\r\n        break\r\n      }\r\n      case \"UPDATE_POLYGON_SIDES\": {\r\n        const draftPolygon = draft[action.group].rings[action.polygon]\r\n        draftPolygon.sides = getDraftUpdatedByOptions<PolygonRingSides>(\r\n          draftPolygon.sides,\r\n          action.sides\r\n        )\r\n        break\r\n      }\r\n      case \"UPDATE_POLYGON_SCALE\": {\r\n        const draftPolygon = draft[action.group].rings[action.polygon]\r\n        draftPolygon.scale = getDraftUpdatedByOptions<PolygonRingScale>(\r\n          draftPolygon.scale,\r\n          action.scale\r\n        )\r\n        break\r\n      }\r\n      case \"RANDOMIZE_POLYGON_RINGS\": {\r\n        const draftGroups = draft[action.group]\r\n        draftGroups.rings = createRandomPolygonRings()\r\n        break\r\n      }\r\n      case \"RANDOMIZE_POLYGON\": {\r\n        const draftRings = draft[action.group].rings\r\n        draftRings[action.polygon] = getRandomPolygon(\r\n          original(draftRings[action.polygon])\r\n        )\r\n        break\r\n      }\r\n      case \"RANDOMIZE_POLYGON_SIDES\": {\r\n        const draftPolygon = draft[action.group].rings[action.polygon]\r\n        draftPolygon.sides = getRandomSides()\r\n        break\r\n      }\r\n      case \"RANDOMIZE_POLYGON_ROTATION\": {\r\n        const draftPolygon = draft[action.group].rings[action.polygon]\r\n        draftPolygon.rotation = getRandomRotation()\r\n        break\r\n      }\r\n      case \"RANDOMIZE_POLYGON_SCALE\": {\r\n        const draftPolygon = draft[action.group].rings[action.polygon]\r\n        draftPolygon.scale = getRandomScale()\r\n        break\r\n      }\r\n      case \"RANDOMIZE_POLYGON_DOTS\": {\r\n        const draftPolygon = draft[action.group].rings[action.polygon]\r\n        const sides = draftPolygon.sides.amount\r\n        draftPolygon.dots = getRandomDots(sides)\r\n        break\r\n      }\r\n    }\r\n  }\r\n)\r\n\r\nconst polygonGroupsInitialState: PolygonInitialState = [\r\n  {\r\n    active: true,\r\n    position: { x: 0, y: 0 },\r\n    rings: [\r\n      {\r\n        active: true,\r\n        position: { x: 0, y: 0 },\r\n        dots: {\r\n          enabled: true,\r\n          fillColours: [\"black\"],\r\n          size: 1,\r\n          strokeColours: [\"black\"],\r\n          strokeWidth: 1,\r\n        },\r\n        rotation: {\r\n          clockwise: true,\r\n          enabled: true,\r\n          speed: 1,\r\n          startingRotation: 1,\r\n        },\r\n        scale: {\r\n          enabled: true,\r\n          speed: 1,\r\n          range: { max: 10, min: 0 },\r\n          startingSize: 5,\r\n        },\r\n        sides: {\r\n          enabled: true,\r\n          strokeWidth: 1,\r\n          colours: [\"black\"],\r\n          amount: 6,\r\n        },\r\n      },\r\n    ],\r\n  },\r\n]\r\n\r\nexport const PolygonGroupsContextWrapper: React.FC = ({ children }) => {\r\n  const [state, dispatch] = useReducer(\r\n    polygonGroupsReducer,\r\n    polygonGroupsInitialState\r\n  )\r\n\r\n  return (\r\n    <polygonGroupsDispatchContext.Provider value={dispatch}>\r\n      <polygonGroupsStateContext.Provider value={state}>\r\n        {children}\r\n      </polygonGroupsStateContext.Provider>\r\n    </polygonGroupsDispatchContext.Provider>\r\n  )\r\n}\r\n\r\nexport const polygonGroupsDispatchContext = createContext(\r\n  {} as React.Dispatch<PolygonGroupsActions>\r\n)\r\nexport const polygonGroupsStateContext = createContext(\r\n  [] as Readonly<PolygonInitialState>\r\n)\r\n","import { PolygonRing, Cords } from \"reducer-contexts/polygon-groups\"\r\n\r\nexport interface PolygonAnimation {\r\n  position: Cords\r\n  currentRotation: number\r\n  dots: {\r\n    enabled: boolean\r\n    fillColours: string[]\r\n    strokeColours: string[]\r\n    strokeWidth: number\r\n    size: number\r\n    position: Cords[]\r\n  }\r\n  sides: {\r\n    enabled: boolean\r\n    strokeColours: string[]\r\n    strokeWidth: number\r\n    positions: [Cords, Cords][]\r\n  }\r\n}\r\n\r\ninterface PolygonPoint extends Cords {\r\n  cos: number\r\n  sin: number\r\n}\r\n\r\ninterface PolygonAnimationConstants {\r\n  position: Cords\r\n  rotationSpeed: number\r\n  scalingSpeed: number\r\n  scalingRange: { min: number; max: number }\r\n  isActive: boolean\r\n  isRotating: boolean\r\n  isScaling: boolean\r\n  isRotatingClockwise: boolean\r\n}\r\n\r\ninterface PolygonAnimationState {\r\n  currentRotation: number\r\n  currentSize: number\r\n  currentlyExpanding: boolean\r\n  polygonPoints: PolygonPoint[]\r\n}\r\n\r\ninterface PolygonStyle {\r\n  sides: {\r\n    enabled: boolean\r\n    colours: string[]\r\n    strokeWidth: number\r\n  }\r\n  dots: {\r\n    enabled: boolean\r\n    strokeColours: string[]\r\n    fillColours: string[]\r\n    strokeWidth: number\r\n    size: number\r\n  }\r\n}\r\n\r\nexport class PolygonAnimationCalculation {\r\n  private style: PolygonStyle\r\n  private animationState: PolygonAnimationState\r\n  private animationConstants: PolygonAnimationConstants\r\n\r\n  constructor(polygon: PolygonRing) {\r\n    this.style = this.getInitialStyles(polygon)\r\n    this.animationConstants = this.getInitialConstants(polygon)\r\n    this.animationState = this.getInitialState(polygon)\r\n  }\r\n\r\n  private getInitialStyles({ sides, dots }: PolygonRing): PolygonStyle {\r\n    return {\r\n      sides: {\r\n        colours: sides.colours,\r\n        strokeWidth: sides.strokeWidth,\r\n        enabled: sides.enabled,\r\n      },\r\n      dots: {\r\n        enabled: dots.enabled,\r\n        size: dots.size,\r\n        fillColours: dots.fillColours,\r\n        strokeColours: dots.strokeColours,\r\n        strokeWidth: dots.strokeWidth,\r\n      },\r\n    }\r\n  }\r\n\r\n  private getInitialPoints(\r\n    sides: number,\r\n    startingSize: number\r\n  ): PolygonPoint[] {\r\n    const twoPi = Math.PI * 2\r\n    const angleBetweenPoints = twoPi / sides\r\n\r\n    let currentAngle = angleBetweenPoints\r\n    return [...Array(sides)].map(() => {\r\n      currentAngle += angleBetweenPoints\r\n      const cos = Math.cos(currentAngle)\r\n      const sin = Math.sin(currentAngle)\r\n      const x = Math.round(cos * startingSize)\r\n      const y = Math.round(sin * startingSize)\r\n\r\n      return { x, y, sin, cos }\r\n    })\r\n  }\r\n\r\n  private getInitialConstants({\r\n    active,\r\n    rotation,\r\n    scale,\r\n    position,\r\n  }: PolygonRing): PolygonAnimationConstants {\r\n    return {\r\n      position,\r\n      isActive: active,\r\n      isRotating: rotation.enabled,\r\n      isScaling: scale.enabled,\r\n      isRotatingClockwise: rotation.clockwise,\r\n      rotationSpeed: rotation.speed,\r\n      scalingSpeed: scale.speed,\r\n      scalingRange: scale.range,\r\n    }\r\n  }\r\n\r\n  private getInitialState({\r\n    scale,\r\n    rotation,\r\n    sides,\r\n  }: PolygonRing): PolygonAnimationState {\r\n    const polygonPoints = this.getInitialPoints(\r\n      sides.amount,\r\n      scale.startingSize\r\n    )\r\n    const currentlyExpanding =\r\n      scale.startingSize <= (scale.range.max - scale.range.min) / 2\r\n    return {\r\n      currentRotation: rotation.startingRotation,\r\n      currentSize: scale.startingSize,\r\n      currentlyExpanding,\r\n      polygonPoints,\r\n    }\r\n  }\r\n\r\n  private updateRotation() {\r\n    const {\r\n      isRotating,\r\n      isRotatingClockwise,\r\n      rotationSpeed,\r\n    } = this.animationConstants\r\n    const { currentRotation } = this.animationState\r\n\r\n    let newRotation: number\r\n    if (isRotating) {\r\n      if (isRotatingClockwise) {\r\n        newRotation = currentRotation + rotationSpeed\r\n      } else {\r\n        newRotation = currentRotation - rotationSpeed\r\n      }\r\n      if (newRotation >= 360) {\r\n        const amountOver = currentRotation - 360\r\n        newRotation = 0 + amountOver\r\n      } else if (newRotation <= -360) {\r\n        const amountOver = currentRotation - 360\r\n        newRotation = 0 - amountOver\r\n      }\r\n\r\n      this.animationState.currentRotation = newRotation\r\n    }\r\n  }\r\n\r\n  private updateScale() {\r\n    const { isScaling, scalingSpeed, scalingRange } = this.animationConstants\r\n    const {\r\n      currentlyExpanding,\r\n      polygonPoints,\r\n      currentSize,\r\n    } = this.animationState\r\n\r\n    if (isScaling) {\r\n      let updatedSize: number\r\n      let updatedCurrentlyExpanding = currentlyExpanding\r\n      if (currentlyExpanding) {\r\n        updatedSize = currentSize + scalingSpeed\r\n      } else {\r\n        updatedSize = currentSize - scalingSpeed\r\n      }\r\n\r\n      if (updatedSize >= scalingRange.max) {\r\n        updatedSize = scalingRange.max\r\n        updatedCurrentlyExpanding = false\r\n      } else if (updatedSize <= scalingRange.min) {\r\n        updatedSize = scalingRange.min\r\n        updatedCurrentlyExpanding = true\r\n      }\r\n\r\n      const newPolygonPoints = polygonPoints.map((point) => {\r\n        const { cos, sin } = point\r\n        const newPoint = { ...point }\r\n\r\n        newPoint.x = Math.round(cos * updatedSize)\r\n        newPoint.y = Math.round(sin * updatedSize)\r\n\r\n        return newPoint\r\n      })\r\n\r\n      this.animationState.currentSize = updatedSize\r\n      this.animationState.currentlyExpanding = updatedCurrentlyExpanding\r\n      this.animationState.polygonPoints = newPolygonPoints\r\n    }\r\n  }\r\n\r\n  public getPolygonFrame(): PolygonAnimation {\r\n    const { dots, sides } = this.style\r\n    const { currentRotation, polygonPoints } = this.animationState\r\n    const { position } = this.animationConstants\r\n    const dotPositions = polygonPoints.map((point) => {\r\n      return { x: point.x, y: point.y }\r\n    })\r\n    const sidesPositions: [Cords, Cords][] = polygonPoints.map(\r\n      (point, index) => {\r\n        const totalPoints = polygonPoints.length\r\n        const nextIndex = index + 1\r\n        let nextPoint: Cords\r\n        if (nextIndex === totalPoints) {\r\n          nextPoint = { x: polygonPoints[0].x, y: polygonPoints[0].y }\r\n        } else {\r\n          nextPoint = {\r\n            x: polygonPoints[nextIndex].x,\r\n            y: polygonPoints[nextIndex].y,\r\n          }\r\n        }\r\n        return [{ x: point.x, y: point.y }, nextPoint]\r\n      }\r\n    )\r\n\r\n    return {\r\n      position,\r\n      currentRotation,\r\n      dots: {\r\n        enabled: dots.enabled,\r\n        size: dots.size,\r\n        position: dotPositions,\r\n        fillColours: dots.fillColours,\r\n        strokeColours: dots.strokeColours,\r\n        strokeWidth: dots.strokeWidth,\r\n      },\r\n      sides: {\r\n        enabled: sides.enabled,\r\n        positions: sidesPositions,\r\n        strokeWidth: sides.strokeWidth,\r\n        strokeColours: sides.colours,\r\n      },\r\n    }\r\n  }\r\n  public getPolygonFrameAndStep(): PolygonAnimation {\r\n    const { isActive } = this.animationConstants\r\n    const currentFrame = this.getPolygonFrame()\r\n    if (isActive) {\r\n      this.updateScale()\r\n      this.updateRotation()\r\n    }\r\n    return currentFrame\r\n  }\r\n}\r\n","import { P5 } from \"types/p5\"\nimport {\n  PolygonAnimationCalculation,\n  PolygonAnimation,\n} from \"polygon-logic/polygon-animation-calculation\"\n// eslint-disable-next-line\nimport { PolygonRing, PolygonGroup } from \"reducer-contexts/polygon-groups\"\n\nfunction singlePolygonDraw(\n  polygonAnimation: PolygonAnimation,\n  size: { width: number; height: number },\n  p5: P5\n) {\n  const { currentRotation, dots, sides, position } = polygonAnimation\n  const x = Math.floor((size.width * (position.x / 100)) / 2)\n  const y = Math.floor((size.height * (position.y / 100)) / 2)\n\n  p5.push()\n  p5.translate(x, y)\n  p5.rotate(currentRotation)\n  if (sides.enabled) {\n    sides.positions.forEach((cords, index) => {\n      const stokeColour = index % sides.strokeColours.length\n      p5.stroke(sides.strokeColours[stokeColour])\n      p5.strokeWeight(sides.strokeWidth)\n      p5.line(cords[0].x, cords[0].y, cords[1].x, cords[1].y)\n    })\n  }\n  if (dots.enabled) {\n    p5.push()\n    dots.position.forEach((cords, index) => {\n      const fillColourIndex = index % dots.fillColours.length\n      const stokeColourIndex = index % dots.strokeColours.length\n      const { x, y } = cords\n      p5.fill(dots.fillColours[fillColourIndex])\n      p5.strokeWeight(dots.strokeWidth)\n      p5.stroke(dots.strokeColours[stokeColourIndex])\n      p5.ellipse(x, y, dots.size)\n    })\n    p5.pop()\n  }\n  p5.pop()\n}\n\nexport function generatePolygonRingSketch(\n  PolygonRing: Readonly<PolygonRing>,\n  windowSize: { height: number; width: number }\n) {\n  const polygonRingInstance = new PolygonAnimationCalculation(PolygonRing)\n\n  return (p5: P5) => {\n    p5.setup = () => {\n      p5.createCanvas(windowSize.width, windowSize.height)\n      p5.background(\"grey\")\n    }\n    p5.draw = () => {\n      polygonRingInstance.getPolygonFrameAndStep()\n      p5.angleMode(\"degrees\")\n      p5.translate(windowSize.width / 2, windowSize.height / 2)\n      singlePolygonDraw(\n        polygonRingInstance.getPolygonFrameAndStep(),\n        windowSize,\n        p5\n      )\n    }\n  }\n}\n\nexport function generatePolygonGroupSketch(\n  polygonGroup: Readonly<PolygonGroup>,\n  windowSize: { height: number; width: number }\n) {\n  const polygonRingInstances = polygonGroup.rings.map((polygonRing) => {\n    return new PolygonAnimationCalculation(polygonRing)\n  })\n\n  return (p5: P5) => {\n    p5.setup = () => {\n      p5.createCanvas(windowSize.width, windowSize.height)\n      p5.background(\"grey\")\n    }\n    p5.draw = () => {\n      p5.angleMode(\"degrees\")\n      p5.background(\"grey\")\n      p5.translate(windowSize.width / 2, windowSize.height / 2)\n      p5.push()\n      for (const polygonRing of polygonRingInstances) {\n        singlePolygonDraw(polygonRing.getPolygonFrameAndStep(), windowSize, p5)\n      }\n      p5.pop()\n    }\n  }\n}\n\nexport function generateAllPolygonRingGroupsSketch(\n  polygonGroups: Readonly<PolygonGroup[]>,\n  windowSize: { height: number; width: number }\n) {\n  const polygonGroupInstances = polygonGroups.map(({ rings }) =>\n    rings.map((polygonRing) => {\n      return new PolygonAnimationCalculation(polygonRing)\n    })\n  )\n\n  return (p5: P5) => {\n    p5.setup = () => {\n      p5.createCanvas(windowSize.width, windowSize.height)\n      p5.background(\"lightgrey\")\n    }\n    p5.draw = () => {\n      p5.angleMode(\"degrees\")\n      p5.background(\"lightgrey\")\n      p5.translate(windowSize.width / 2, windowSize.height / 2)\n      for (const polygonGroupRings of polygonGroupInstances) {\n        p5.push()\n        // p5.translate(0, 0) -- TODO Placeholder for group translation, needs some thinking. Might just change it to offset in the ring\n        for (const polygonRingInstance of polygonGroupRings) {\n          singlePolygonDraw(\n            polygonRingInstance.getPolygonFrameAndStep(),\n            windowSize,\n            p5\n          )\n        }\n        p5.pop()\n      }\n    }\n  }\n}\n","import React, { useEffect, useRef } from \"react\"\nimport p5 from \"p5\"\nimport { P5 } from \"types/p5\"\nimport styled from \"styled-components\"\n\nconst Container = styled.div`\n  width: 100%;\n  height: 100%;\n`\ninterface P5CanvasProps {\n  sketch: (p5: P5) => void\n}\n\nexport const P5Canvas: React.FC<P5CanvasProps> = ({ sketch }) => {\n  const divRef = useRef<HTMLDivElement>(null)\n  const P5Ref = useRef<P5>()\n\n  useEffect(() => {\n    const node = divRef.current as HTMLDivElement\n    if (P5Ref.current !== undefined) {\n      P5Ref.current.remove()\n    }\n    const p5Instance = new p5(sketch, node)\n    P5Ref.current = p5Instance\n\n    return () => {\n      const P5Instance = P5Ref.current as P5\n      P5Instance.remove()\n    }\n  }, [P5Ref, divRef, sketch])\n\n  return <Container ref={divRef} />\n}\n","import React, { useContext, useEffect, useRef, useState } from \"react\"\r\n\r\nimport {\r\n  polygonGroupsDispatchContext,\r\n  polygonGroupsStateContext,\r\n  PolygonGroup,\r\n} from \"reducer-contexts/polygon-groups\"\r\nimport { generateAllPolygonRingGroupsSketch } from \"polygon-logic/polygon-p5-draw\"\r\n\r\nimport { P5Canvas } from \"components/P5Canvas\"\r\n\r\nfunction generateKey(\r\n  polygonGroups: Readonly<PolygonGroup[]>,\r\n  containerSize: { height: number; width: number }\r\n): string {\r\n  const polygonGroupLength = polygonGroups.length\r\n  const polygonRingLengths = polygonGroups\r\n    .map((polygonGroup) => polygonGroup.rings.length)\r\n    .join(\"-\")\r\n  const polygonRingRotations = polygonGroups\r\n    .map((polygonGroup) =>\r\n      polygonGroup.rings.map((ring) => ring.rotation.startingRotation).join(\"-\")\r\n    )\r\n    .join(\"-\")\r\n\r\n  return `${polygonGroupLength}-${polygonRingLengths}-${polygonRingRotations}-${containerSize.width}-${containerSize.height}`\r\n}\r\n\r\nexport const MainCanvas: React.FC = () => {\r\n  const polygonDispatch = useContext(polygonGroupsDispatchContext)\r\n  const polygonContext = useContext(polygonGroupsStateContext)\r\n  const [currentSize, setCurrentSize] = useState({ height: 0, width: 0 })\r\n  const mainWrapper = useRef(\r\n    null\r\n  ) as React.MutableRefObject<null | HTMLDivElement>\r\n\r\n  /**\r\n   * Updates the canvas size when the ref for the wrapping component\r\n   * comes back.\r\n   *\r\n   * Also listens to the window resize and updates the canvas size if\r\n   * it changes. But its throttled by 250ms\r\n   */\r\n  useEffect(() => {\r\n    if (mainWrapper?.current) {\r\n      setCurrentSize({\r\n        height: mainWrapper.current.offsetHeight,\r\n        width: mainWrapper.current.offsetWidth,\r\n      })\r\n    }\r\n  }, [mainWrapper, setCurrentSize])\r\n\r\n  useEffect(() => {\r\n    function updateCanvasSize() {\r\n      if (mainWrapper?.current) {\r\n        setCurrentSize({\r\n          height: mainWrapper.current.offsetHeight,\r\n          width: mainWrapper.current.offsetWidth,\r\n        })\r\n      }\r\n    }\r\n\r\n    updateCanvasSize()\r\n\r\n    let timeoutId: number\r\n    const throttledWindowUpdate = () => {\r\n      clearTimeout(timeoutId)\r\n      timeoutId = setTimeout(() => updateCanvasSize(), 250)\r\n    }\r\n\r\n    window.addEventListener(\"resize\", throttledWindowUpdate)\r\n    return () => {\r\n      window.removeEventListener(\"resize\", throttledWindowUpdate)\r\n    }\r\n  }, [mainWrapper, setCurrentSize])\r\n\r\n  useEffect(() => {\r\n    polygonDispatch({ type: \"RANDOMIZE_POLYGON\", group: 0, polygon: 0 })\r\n    polygonDispatch({ type: \"RANDOMIZE_POLYGON\", group: 0, polygon: 1 })\r\n    polygonDispatch({ type: \"RANDOMIZE_POLYGON\", group: 0, polygon: 2 })\r\n    polygonDispatch({ type: \"RANDOMIZE_POLYGON\", group: 0, polygon: 3 })\r\n    polygonDispatch({\r\n      type: \"UPDATE_POLYGON_POSITION\",\r\n      group: 0,\r\n      polygon: 0,\r\n      position: { x: 0, y: 50 },\r\n    })\r\n    polygonDispatch({\r\n      type: \"UPDATE_POLYGON_POSITION\",\r\n      group: 0,\r\n      polygon: 1,\r\n      position: { x: 50, y: 0 },\r\n    })\r\n    polygonDispatch({\r\n      type: \"UPDATE_POLYGON_POSITION\",\r\n      group: 0,\r\n      polygon: 2,\r\n      position: { x: -50, y: 0 },\r\n    })\r\n    polygonDispatch({\r\n      type: \"UPDATE_POLYGON_POSITION\",\r\n      group: 0,\r\n      polygon: 3,\r\n      position: { x: 0, y: -50 },\r\n    })\r\n  }, [polygonDispatch, mainWrapper])\r\n\r\n  const sketchAll = generateAllPolygonRingGroupsSketch(\r\n    polygonContext,\r\n    currentSize\r\n  )\r\n  return (\r\n    <div\r\n      ref={mainWrapper}\r\n      style={{\r\n        background: \"white\",\r\n        width: \"100%\",\r\n        height: \"100%\",\r\n        maxWidth: \"100vw\",\r\n        textAlign: \"center\",\r\n        fontSize: 200,\r\n      }}\r\n    >\r\n      <P5Canvas\r\n        sketch={sketchAll}\r\n        key={generateKey(polygonContext, currentSize)}\r\n      />\r\n    </div>\r\n  )\r\n}\r\n","import React, { useContext } from \"react\"\r\nimport styled from \"styled-components\"\r\n\r\nimport {\r\n  navigationState as navigationStateContext,\r\n  navigationDispatch as navigationDispatchContext,\r\n} from \"reducer-contexts/navigation\"\r\n\r\nimport Screens from \"components/Screens\"\r\nimport { MainCanvas } from \"components/MainCanvas\"\r\n\r\nconst Main = styled.main`\r\n  display: grid;\r\n  grid-template-rows: minmax(90%, 90vh) minmax(10vh, 10px);\r\n  overflow: hidden;\r\n`\r\n\r\nconst App: React.FC = () => {\r\n  const navigationState = useContext(navigationStateContext)\r\n  const navigationDispatch = useContext(navigationDispatchContext)\r\n\r\n  return (\r\n    <Main>\r\n      <Screens currentScreen={navigationState.currentScreen}>\r\n        <MainCanvas />\r\n\r\n        <h1\r\n          style={{\r\n            background: \"purple\",\r\n            width: \"100%\",\r\n            height: \"100%\",\r\n            textAlign: \"center\",\r\n            fontSize: 200,\r\n          }}\r\n        >\r\n          Hello\r\n        </h1>\r\n        <h1\r\n          style={{\r\n            background: \"pink\",\r\n            width: \"100%\",\r\n            height: \"100%\",\r\n            textAlign: \"center\",\r\n            fontSize: 200,\r\n          }}\r\n        >\r\n          World\r\n        </h1>\r\n      </Screens>\r\n      <div>\r\n        <h1>Hello</h1>\r\n        <button\r\n          onClick={() => {\r\n            navigationDispatch({ type: \"PREV_SCREEN\" })\r\n          }}\r\n        >\r\n          Previous\r\n        </button>\r\n        <button\r\n          onClick={() => {\r\n            navigationDispatch({ type: \"NEXT_SCREEN\" })\r\n          }}\r\n        >\r\n          Next\r\n        </button>\r\n      </div>\r\n    </Main>\r\n  )\r\n}\r\n\r\nexport default App\r\n","import React from \"react\"\r\nimport ReactDOM from \"react-dom\"\r\nimport * as serviceWorker from \"./serviceWorker\"\r\n\r\nimport App from \"components/App\"\r\nimport { NavigationContextWrapper } from \"reducer-contexts/navigation\"\r\nimport { PolygonGroupsContextWrapper } from \"reducer-contexts/polygon-groups\"\r\n\r\nimport \"./reset.css\"\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <PolygonGroupsContextWrapper>\r\n      <NavigationContextWrapper>\r\n        <App />\r\n      </NavigationContextWrapper>\r\n    </PolygonGroupsContextWrapper>\r\n  </React.StrictMode>,\r\n  document.getElementById(\"root\")\r\n)\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.register()\r\n"],"sourceRoot":""}