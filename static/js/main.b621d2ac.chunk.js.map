{"version":3,"sources":["rotating-ring.svg","serviceWorker.ts","reducer-contexts/navigation.tsx","reducer-contexts/polygon-groups.tsx","components/Screens.tsx","polygon-logic/polygon-animation-calculation.tsx","polygon-logic/polygon-p5-draw.tsx","components/P5Canvas.tsx","components/MainCanvas.tsx","components/GroupsDisplay.tsx","components/ToggleSwitch.tsx","components/Slider.tsx","components/MultiSlider.tsx","components/ColourPicker.tsx","components/CoordinatePicker.tsx","components/PolygonDisplay.tsx","components/App.tsx","index.tsx"],"names":["module","exports","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","console","log","onUpdate","onSuccess","catch","error","navigationReducer","produce","draft","action","type","currentScreen","currentGroup","currentPolygon","navigationInitialState","NavigationContextWrapper","children","useReducer","dispatch","navigationDispatchContext","Provider","value","navigationStateContext","createContext","getDraftUpdatedByOptions","options","newState","original","Object","keys","forEach","option","getRandomArbitrary","min","max","Math","random","getRandomIntInclusive","ceil","floor","getRandomRGB","h","s","l","r","g","b","hue2rgb","p","q","t","round","hslToRgb","componentToHex","c","hex","toString","length","rgbToHex","getRandomColoursForPolygon","amountOfSides","amountOfColours","Array","map","getRandomSides","sidesAmount","enabled","strokeWidth","amount","colours","getRandomDots","fillColours","size","strokeColours","getRandomRotation","clockwise","speed","startingRotation","getRandomScale","range","startingSize","getRandomEnabled","randomNumber","sidesEnabled","dotsEnabled","rotationEnabled","scaleEnabled","getRandomPolygon","active","position","x","y","sides","dots","rotation","scale","createRandomPolygonRings","amountOfRings","polygonGroupsReducer","push","rings","group","draftPolygon","polygon","undefined","polygonState","draftRings","originalDraft","totalGroups","splice","polygonGroupsInitialState","polygonGroupsInit","newPolygon","PolygonGroupsContextWrapper","polygonGroupsDispatchContext","polygonGroupsStateContext","Screens","currentChild","className","transitions","useTransition","item","from","opacity","transform","enter","leave","key","props","div","style","React","Children","child","index","PolygonAnimationCalculation","animationState","animationConstants","this","getInitialStyles","getInitialConstants","getInitialState","angleBetweenPoints","PI","currentAngle","cos","sin","isActive","isRotating","isScaling","isRotatingClockwise","rotationSpeed","scalingSpeed","scalingRange","polygonPoints","getInitialPoints","currentlyExpanding","currentRotation","currentSize","newRotation","updatedSize","updatedCurrentlyExpanding","newPolygonPoints","point","newPoint","dotPositions","sidesPositions","nextPoint","nextIndex","positions","currentFrame","getPolygonFrame","updateScale","updateRotation","getSizeConstrainedCords","cords","width","height","singlePolygonDraw","polygonAnimation","p5","translate","rotate","stokeColour","stroke","strokeWeight","line","fillColourIndex","stokeColourIndex","fill","ellipse","pop","generatePolygonRingSketch","PolygonRing","windowSize","polygonRingInstance","setup","createCanvas","background","draw","getPolygonFrameAndStep","angleMode","generatePolygonGroupSketch","polygonGroup","polygonRingInstances","polygonRing","generateAllPolygonRingGroupsSketch","polygonGroups","polygonGroupInstances","polygonGroupRings","P5Canvas","sketch","divRef","useRef","P5Ref","useEffect","node","current","remove","p5Instance","ref","MainCanvasWrapper","styled","generateKey","containerSize","polygonGroupLength","polygonRingLengths","join","polygonRingRotations","ring","MainCanvas","polygonContext","useContext","useState","setCurrentSize","mainWrapper","offsetHeight","offsetWidth","updateCanvasSize","timeoutId","throttledWindowUpdate","clearTimeout","setTimeout","addEventListener","removeEventListener","GroupsUl","ul","GroupsLi","li","AddGroupButton","button","GroupCanvasGroupDiv","CanvasWrappingDiv","GroupRandomizeButton","GroupDeleteButton","GroupsDisplay","polygonGroupsState","polygonGroupsDispatch","totalPolygonGroups","groupIndex","isLastPolygonGroup","Fragment","aria-label","onClick","disabled","polygonRings","groupNumber","RingsUl","RingsLi","RingCanvasDiv","RingButton","RingEditButton","RingRandomizeButton","RingDeleteButton","AddRingButton","PolygonRingsDisplay","navigationDispatch","totalPolygons","polygonIndex","isLastPolygon","CheckboxInput","input","checkedText","svgBackground","transformFlip","svgBackgroundCss","css","unchecked","checked","ToggleSwitch","label","id","setFunction","onChange","currentTarget","htmlFor","SliderInputRange","Slider","currentValue","vertical","simpleThumb","orient","convertedValue","Number","parseInt","isNaN","sliderReducer","currentMax","currentMin","increaseCurrent","toUpdate","noMoreThan","decreaseCurrent","noLessThan","constrainValue","isMinThumb","newValue","SliderWrappingDiv","SliderValueDiv","area","SliderLabelH3","h3","SliderRailDiv","SliderRailThumbDiv","sliderDispatch","sliderRailRef","sliderState","minNewValue","maxNewValue","left","right","onKeyDown","event","onPointerDown","dispatchChange","diffX","handlePointerMove","pointerType","offsetLeft","pageX","clientX","preventDefault","stopPropagation","handleTouchMove","touches","handelCleanUp","document","focus","handlePointerDrag","onFocus","classList","add","onBlur","role","tabIndex","aria-valuemin","aria-valuenow","aria-valuetext","aria-valuemax","SliderRailThumbDivMin","SliderRailThumbDivMax","MultiSlider","sliderReducerDispatch","ColourPickerWrapperDiv","ColourPickerWrapperUl","ColourPickerLi","ColourPickerLabel","ColourPickerInput","ColourPickerDeleteButton","ColourPickerAddButton","ColourPicker","maxColours","aria-labelledby","colour","substr","defaultValue","newColours","CoordinatePickerWrappingDiv","YSliderWrappingDiv","XSliderWrappingDiv","XSlider","YSlider","CoordinatePositionsDiv","CoordinatePanelDiv","CoordinateThumbDiv","getNewValueForRange","oldValue","oldMin","oldMax","newMin","newMax","CoordinatePicker","currentY","setYFunction","currentX","setXFunction","scrollingParentRef","yToTopPosition","xToTopPosition","positionStyles","top","coordinatePanel","elementClassList","pointerMove","newX","diffY","pageY","clientY","offsetTop","scrollTop","newY","pointerUp","PolygonPageWrappingDiv","PolygonCanvasWrappingDiv","PolygonCanvasDiv","PolygonRandomizeButton","PolygonOptionsOverflowDiv","PolygonDisplay","navigationState","scrollingElementRef","polygonToDisplay","PolygonCardDiv","PolygonCardH2","h2","PolygonCardButtonContainingDiv","PolygonCardButton","PolygonCardUpdateButton","PolygonCardRandomizeButton","PolygonControlsWrapper","title","updateDispatch","randomizeDispatch","canUpdate","PolygonRotationControls","setRotationSpeed","setEnabled","setClockwise","setCanUpdate","rotatingDirection","PolygonScaleControls","setSpeed","rangeInitialState","rangeState","rangeDispatch","PolygonDotsControls","setSize","setStrokeWidth","setFillColours","setStrokeColours","PolygonSidesControls","setAmount","setColours","PolygonPositionControls","setX","setY","Main","main","MainContent","Navigation","nav","App","MAIN_SCREEN","GROUP_SCREEN","POLYGON_SCREEN","ReactDOM","render","StrictMode","getElementById","URL","process","href","origin","fetch","headers","response","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.b621d2ac.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/rotating-ring.37becaf0.svg\";","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === \"localhost\" ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === \"[::1]\" ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n)\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void\n  onUpdate?: (registration: ServiceWorkerRegistration) => void\n}\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href)\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return\n    }\n\n    window.addEventListener(\"load\", () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config)\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            \"This web app is being served cache-first by a service \" +\n              \"worker. To learn more, visit https://bit.ly/CRA-PWA\"\n          )\n        })\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config)\n      }\n    })\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing\n        if (installingWorker == null) {\n          return\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === \"installed\") {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                \"New content is available and will be used when all \" +\n                  \"tabs for this page are closed. See https://bit.ly/CRA-PWA.\"\n              )\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration)\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log(\"Content is cached for offline use.\")\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration)\n              }\n            }\n          }\n        }\n      }\n    })\n    .catch((error) => {\n      console.error(\"Error during service worker registration:\", error)\n    })\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { \"Service-Worker\": \"script\" },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get(\"content-type\")\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf(\"javascript\") === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload()\n          })\n        })\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config)\n      }\n    })\n    .catch(() => {\n      console.log(\n        \"No internet connection found. App is running in offline mode.\"\n      )\n    })\n}\n\nexport function unregister() {\n  if (\"serviceWorker\" in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister()\n      })\n      .catch((error) => {\n        console.error(error.message)\n      })\n  }\n}\n","import React, { useReducer, createContext } from \"react\"\r\nimport produce, { Draft } from \"immer\"\r\n\r\nexport interface NavigationState {\r\n  currentScreen: \"MAIN_SCREEN\" | \"GROUP_SCREEN\" | \"POLYGON_SCREEN\"\r\n  currentGroup: number\r\n  currentPolygon: number\r\n}\r\ninterface MainScreen {\r\n  type: \"MAIN_SCREEN\"\r\n}\r\ninterface GroupScreen {\r\n  type: \"GROUP_SCREEN\"\r\n}\r\ninterface PolygonScreen {\r\n  type: \"POLYGON_SCREEN\"\r\n  currentGroup: number\r\n  currentPolygon: number\r\n}\r\n\r\nexport type NavigationActions = MainScreen | GroupScreen | PolygonScreen\r\n\r\nexport const navigationReducer = produce(\r\n  (draft: Draft<NavigationState>, action: NavigationActions) => {\r\n    switch (action.type) {\r\n      case \"MAIN_SCREEN\":\r\n      case \"GROUP_SCREEN\": {\r\n        draft.currentScreen = action.type\r\n        break\r\n      }\r\n      case \"POLYGON_SCREEN\": {\r\n        draft.currentScreen = action.type\r\n        draft.currentGroup = action.currentGroup\r\n        draft.currentPolygon = action.currentPolygon\r\n        break\r\n      }\r\n    }\r\n  }\r\n)\r\n\r\nexport const navigationInitialState: NavigationState = {\r\n  currentScreen: \"MAIN_SCREEN\",\r\n  currentGroup: 0,\r\n  currentPolygon: 0,\r\n}\r\n\r\nexport const NavigationContextWrapper: React.FC = ({ children }) => {\r\n  const [state, dispatch] = useReducer(\r\n    navigationReducer,\r\n    navigationInitialState\r\n  )\r\n\r\n  return (\r\n    <navigationDispatchContext.Provider value={dispatch}>\r\n      <navigationStateContext.Provider value={state}>\r\n        {children}\r\n      </navigationStateContext.Provider>\r\n    </navigationDispatchContext.Provider>\r\n  )\r\n}\r\n\r\nexport const navigationDispatchContext = createContext(\r\n  {} as React.Dispatch<NavigationActions>\r\n)\r\nexport const navigationStateContext = createContext({} as NavigationState)\r\n","import React, { useReducer, createContext } from \"react\"\r\nimport produce, { Draft, original } from \"immer\"\r\n\r\nexport interface Cords {\r\n  x: number\r\n  y: number\r\n}\r\n\r\nexport interface PolygonRingRotation {\r\n  enabled: boolean\r\n  clockwise: boolean\r\n  speed: number\r\n  startingRotation: number\r\n}\r\n\r\nexport interface PolygonRingScale {\r\n  enabled: boolean\r\n  speed: number\r\n  range: {\r\n    min: number\r\n    max: number\r\n  }\r\n  startingSize: number\r\n}\r\n\r\nexport interface PolygonRingDots {\r\n  enabled: boolean\r\n  size: number\r\n  fillColours: string[]\r\n  strokeColours: string[]\r\n  strokeWidth: number\r\n}\r\nexport interface PolygonRingSides {\r\n  enabled: boolean\r\n  amount: number\r\n  strokeWidth: number\r\n  colours: string[]\r\n}\r\n\r\nexport interface PolygonRing {\r\n  active: boolean\r\n  position: Cords\r\n  rotation: PolygonRingRotation\r\n  scale: PolygonRingScale\r\n  dots: PolygonRingDots\r\n  sides: PolygonRingSides\r\n}\r\n\r\nexport interface PolygonGroup {\r\n  active: boolean\r\n  position: Cords\r\n  rings: PolygonRing[]\r\n}\r\n\r\ninterface ActionCreateGroup {\r\n  type: \"CREATE_POLYGON_GROUP\"\r\n}\r\n\r\ninterface ActionCreatePolygon {\r\n  type: \"CREATE_POLYGON\"\r\n  group: number\r\n}\r\n\r\ninterface ActionUpdatePolygonGroupPosition {\r\n  type: \"UPDATE_POLYGON_GROUP_POSITION\"\r\n  group: number\r\n  position: Cords\r\n}\r\n\r\ninterface ActionUpdatePolygonAll {\r\n  type: \"UPDATE_POLYGON_ALL\"\r\n  group: number\r\n  polygon: number\r\n  polygonState: {\r\n    active?: boolean\r\n    position?: Cords\r\n    rotation?: Partial<PolygonRingRotation>\r\n    scale?: Partial<PolygonRingScale>\r\n    dots?: Partial<PolygonRingDots>\r\n    sides?: Partial<PolygonRingSides>\r\n  }\r\n}\r\n\r\ninterface ActionUpdatePolygonActive {\r\n  type: \"UPDATE_POLYGON_ACTIVE\"\r\n  group: number\r\n  polygon: number\r\n  active: boolean\r\n}\r\ninterface ActionUpdatePolygonGroupActive {\r\n  type: \"UPDATE_POLYGON_GROUP_ACTIVE\"\r\n  group: number\r\n  active: boolean\r\n}\r\n\r\ninterface ActionUpdatePolygonPosition {\r\n  type: \"UPDATE_POLYGON_POSITION\"\r\n  group: number\r\n  polygon: number\r\n  position: Cords\r\n}\r\ninterface ActionUpdatePolygonRotation {\r\n  type: \"UPDATE_POLYGON_ROTATION\"\r\n  group: number\r\n  polygon: number\r\n  rotation: Partial<PolygonRingRotation>\r\n}\r\ninterface ActionUpdatePolygonScale {\r\n  type: \"UPDATE_POLYGON_SCALE\"\r\n  group: number\r\n  polygon: number\r\n  scale: Partial<PolygonRingScale>\r\n}\r\ninterface ActionUpdatePolygonDots {\r\n  type: \"UPDATE_POLYGON_DOTS\"\r\n  group: number\r\n  polygon: number\r\n  dots: Partial<PolygonRingDots>\r\n}\r\ninterface ActionUpdatePolygonSides {\r\n  type: \"UPDATE_POLYGON_SIDES\"\r\n  group: number\r\n  polygon: number\r\n  sides: Partial<PolygonRingSides>\r\n}\r\n\r\ninterface ActionRandomizePolygonRings {\r\n  type: \"RANDOMIZE_POLYGON_RINGS\"\r\n  group: number\r\n}\r\ninterface ActionRandomizePolygon {\r\n  type: \"RANDOMIZE_POLYGON\"\r\n  group: number\r\n  polygon: number\r\n}\r\ninterface ActionRandomizePolygonSides {\r\n  type: \"RANDOMIZE_POLYGON_SIDES\"\r\n  group: number\r\n  polygon: number\r\n}\r\ninterface ActionRandomizePolygonRotation {\r\n  type: \"RANDOMIZE_POLYGON_ROTATION\"\r\n  group: number\r\n  polygon: number\r\n}\r\ninterface ActionRandomizePolygonScale {\r\n  type: \"RANDOMIZE_POLYGON_SCALE\"\r\n  group: number\r\n  polygon: number\r\n}\r\ninterface ActionRandomizePolygonDots {\r\n  type: \"RANDOMIZE_POLYGON_DOTS\"\r\n  group: number\r\n  polygon: number\r\n}\r\n\r\ninterface ActionDeletePolygonGroup {\r\n  type: \"DELETE_POLYGON_GROUP\"\r\n  group: number\r\n}\r\ninterface ActionDeletePolygonGroupRing {\r\n  type: \"DELETE_POLYGON_GROUP_RING\"\r\n  group: number\r\n  polygon: number\r\n}\r\n\r\nexport type PolygonGroupsActions =\r\n  | ActionCreateGroup\r\n  | ActionCreatePolygon\r\n  | ActionUpdatePolygonAll\r\n  | ActionUpdatePolygonGroupPosition\r\n  | ActionUpdatePolygonPosition\r\n  | ActionUpdatePolygonRotation\r\n  | ActionUpdatePolygonScale\r\n  | ActionUpdatePolygonDots\r\n  | ActionUpdatePolygonSides\r\n  | ActionUpdatePolygonActive\r\n  | ActionUpdatePolygonGroupActive\r\n  | ActionRandomizePolygonRings\r\n  | ActionRandomizePolygon\r\n  | ActionRandomizePolygonSides\r\n  | ActionRandomizePolygonRotation\r\n  | ActionRandomizePolygonScale\r\n  | ActionRandomizePolygonDots\r\n  | ActionDeletePolygonGroup\r\n  | ActionDeletePolygonGroupRing\r\n\r\n/**\r\n * Takes in the current draft for the matching options\r\n * and returns a updated draft with the new options so\r\n * it can be set to the new state\r\n *\r\n * @template T\r\n * @param {T} draft\r\n * @param {Partial<T>} options\r\n * @returns {T}\r\n */\r\nfunction getDraftUpdatedByOptions<T>(draft: T, options: Partial<T>): T {\r\n  const newState = { ...original(draft) } as Partial<T>\r\n  const optionKeys = Object.keys(options) as [keyof T]\r\n  optionKeys.forEach((option) => {\r\n    newState[option] = options[option]\r\n  })\r\n\r\n  return newState as T\r\n}\r\n\r\n// Randomizing Functions taken from MDN: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/random\r\n\r\nfunction getRandomArbitrary(min: number, max: number): number {\r\n  return Math.random() * (max - min) + min\r\n}\r\n\r\nfunction getRandomIntInclusive(min: number, max: number): number {\r\n  min = Math.ceil(min)\r\n  max = Math.floor(max)\r\n  return Math.floor(Math.random() * (max - min + 1)) + min\r\n}\r\n\r\nfunction getRandomBoolean(): boolean {\r\n  return getRandomIntInclusive(0, 1) === 1 ? true : false\r\n}\r\n\r\n/**\r\n * Taken from https://stackoverflow.com/questions/2353211/hsl-to-rgb-color-conversion/9493060#9493060\r\n *\r\n * Converts an HSL color value to RGB. Conversion formula\r\n * adapted from http://en.wikipedia.org/wiki/HSL_color_space.\r\n * Assumes h, s, and l are contained in the set [0, 1] and\r\n * returns r, g, and b in the set [0, 255].\r\n *\r\n *\r\n * @param   {number}  h       The hue\r\n * @param   {number}  s       The saturation\r\n * @param   {number}  l       The lightness\r\n * @return  {Array}           The RGB representation\r\n */\r\nfunction hslToRgb(h: number, s: number, l: number): [number, number, number] {\r\n  var r, g, b\r\n\r\n  if (s === 0) {\r\n    r = g = b = l // achromatic\r\n  } else {\r\n    var hue2rgb = function hue2rgb(p: number, q: number, t: number) {\r\n      if (t < 0) t += 1\r\n      if (t > 1) t -= 1\r\n      if (t < 1 / 6) return p + (q - p) * 6 * t\r\n      if (t < 1 / 2) return q\r\n      if (t < 2 / 3) return p + (q - p) * (2 / 3 - t) * 6\r\n      return p\r\n    }\r\n\r\n    var q = l < 0.5 ? l * (1 + s) : l + s - l * s\r\n    var p = 2 * l - q\r\n    r = hue2rgb(p, q, h + 1 / 3)\r\n    g = hue2rgb(p, q, h)\r\n    b = hue2rgb(p, q, h - 1 / 3)\r\n  }\r\n\r\n  return [Math.round(r * 255), Math.round(g * 255), Math.round(b * 255)]\r\n}\r\n\r\nfunction getRandomRGB(): [number, number, number] {\r\n  const h = getRandomArbitrary(0, 1)\r\n  const s = getRandomArbitrary(0.5, 0.7)\r\n  const l = getRandomArbitrary(0.5, 0.7)\r\n  const [r, g, b] = hslToRgb(h, s, l)\r\n  return [r, g, b]\r\n}\r\n\r\n// https://stackoverflow.com/questions/5623838/rgb-to-hex-and-hex-to-rgb\r\nfunction componentToHex(c: number) {\r\n  var hex = c.toString(16)\r\n  return hex.length === 1 ? \"0\" + hex : hex\r\n}\r\n\r\nfunction rgbToHex(r: number, g: number, b: number): string {\r\n  return \"#\" + componentToHex(r) + componentToHex(g) + componentToHex(b)\r\n}\r\n\r\nfunction getRandomColoursForPolygon(amountOfSides: number): string[] {\r\n  const amountOfColours = getRandomIntInclusive(1, amountOfSides)\r\n\r\n  return [...Array(amountOfColours)].map(() => rgbToHex(...getRandomRGB()))\r\n}\r\n\r\nfunction getRandomSides(): PolygonRingSides {\r\n  const sidesAmount = getRandomIntInclusive(3, 12)\r\n  return {\r\n    enabled: true,\r\n    strokeWidth: getRandomIntInclusive(1, 10),\r\n    amount: sidesAmount,\r\n    colours: getRandomColoursForPolygon(sidesAmount),\r\n  }\r\n}\r\nfunction getRandomDots(amountOfSides: number): PolygonRingDots {\r\n  return {\r\n    enabled: true,\r\n    fillColours: getRandomColoursForPolygon(amountOfSides),\r\n    size: getRandomIntInclusive(5, 10),\r\n    strokeWidth: getRandomIntInclusive(0, 10),\r\n    strokeColours: getRandomColoursForPolygon(amountOfSides),\r\n  }\r\n}\r\nfunction getRandomRotation(): PolygonRingRotation {\r\n  return {\r\n    enabled: true,\r\n    clockwise: getRandomBoolean(),\r\n    speed: getRandomIntInclusive(1, 5),\r\n    startingRotation: getRandomIntInclusive(1, 360),\r\n  }\r\n}\r\nfunction getRandomScale(): PolygonRingScale {\r\n  const min = getRandomIntInclusive(0, 20)\r\n  const max = getRandomIntInclusive(200, 500)\r\n\r\n  return {\r\n    enabled: true,\r\n    range: { min, max },\r\n    speed: getRandomIntInclusive(1, 5),\r\n    startingSize: getRandomIntInclusive(min, max),\r\n  }\r\n}\r\n\r\nfunction getRandomEnabled(): {\r\n  sidesEnabled: boolean\r\n  dotsEnabled: boolean\r\n  rotationEnabled: boolean\r\n  scaleEnabled: boolean\r\n} {\r\n  const randomNumber = getRandomIntInclusive(0, 100)\r\n\r\n  let enabledFields\r\n  if (randomNumber <= 48) {\r\n    // Full motion Sides\r\n    enabledFields = {\r\n      sidesEnabled: true,\r\n      dotsEnabled: false,\r\n      rotationEnabled: true,\r\n      scaleEnabled: true,\r\n    }\r\n  } else if (randomNumber <= 50) {\r\n    // Rotating Sides\r\n    enabledFields = {\r\n      sidesEnabled: true,\r\n      dotsEnabled: false,\r\n      rotationEnabled: true,\r\n      scaleEnabled: false,\r\n    }\r\n  } else if (randomNumber <= 90) {\r\n    // Full Motion Dots\r\n    enabledFields = {\r\n      sidesEnabled: false,\r\n      dotsEnabled: true,\r\n      rotationEnabled: true,\r\n      scaleEnabled: true,\r\n    }\r\n  } else if (randomNumber <= 95) {\r\n    // Rotating Dots\r\n    enabledFields = {\r\n      sidesEnabled: false,\r\n      dotsEnabled: true,\r\n      rotationEnabled: true,\r\n      scaleEnabled: false,\r\n    }\r\n  } else {\r\n    // Dots & Sides Full Motion\r\n    enabledFields = {\r\n      sidesEnabled: true,\r\n      dotsEnabled: true,\r\n      rotationEnabled: true,\r\n      scaleEnabled: true,\r\n    }\r\n  }\r\n  return enabledFields\r\n}\r\n\r\nfunction getRandomPolygon({\r\n  active = true,\r\n  position = { x: 0, y: 0 },\r\n}: Partial<PolygonRing> = {}): PolygonRing {\r\n  const sides = getRandomSides()\r\n  const dots = getRandomDots(sides.amount)\r\n  const rotation = getRandomRotation()\r\n  const scale = getRandomScale()\r\n  const {\r\n    sidesEnabled,\r\n    scaleEnabled,\r\n    rotationEnabled,\r\n    dotsEnabled,\r\n  } = getRandomEnabled()\r\n\r\n  sides.enabled = sidesEnabled\r\n  dots.enabled = dotsEnabled\r\n  scale.enabled = scaleEnabled\r\n  rotation.enabled = rotationEnabled\r\n\r\n  return { active, position, sides, dots, rotation, scale }\r\n}\r\n\r\nfunction createRandomPolygonRings(): PolygonRing[] {\r\n  const amountOfRings = getRandomIntInclusive(2, 8)\r\n\r\n  return [...Array(amountOfRings)].map(() => getRandomPolygon())\r\n}\r\n\r\ntype PolygonGroupsReducer = React.Reducer<\r\n  Readonly<PolygonGroup[]>,\r\n  PolygonGroupsActions\r\n>\r\nexport const polygonGroupsReducer: PolygonGroupsReducer = produce(\r\n  (draft: Draft<PolygonGroup[]>, action: PolygonGroupsActions) => {\r\n    switch (action.type) {\r\n      case \"CREATE_POLYGON_GROUP\": {\r\n        draft.push({\r\n          active: true,\r\n          position: { x: 0, y: 0 },\r\n          rings: createRandomPolygonRings(),\r\n        })\r\n        break\r\n      }\r\n      case \"CREATE_POLYGON\": {\r\n        draft[action.group].rings.push(getRandomPolygon())\r\n        break\r\n      }\r\n      case \"UPDATE_POLYGON_GROUP_POSITION\": {\r\n        draft[action.group].position = action.position\r\n        break\r\n      }\r\n      case \"UPDATE_POLYGON_GROUP_ACTIVE\": {\r\n        draft[action.group].active = action.active\r\n        break\r\n      }\r\n      case \"UPDATE_POLYGON_ALL\": {\r\n        const draftPolygon = draft[action.group].rings[action.polygon]\r\n        if (action.polygonState.active !== undefined) {\r\n          draftPolygon.active = action.polygonState.active\r\n        }\r\n        if (action.polygonState.position !== undefined) {\r\n          draftPolygon.position = action.polygonState.position\r\n        }\r\n        if (action.polygonState.dots !== undefined) {\r\n          draftPolygon.dots = getDraftUpdatedByOptions<PolygonRingDots>(\r\n            draftPolygon.dots,\r\n            action.polygonState.dots\r\n          )\r\n        }\r\n        if (action.polygonState.rotation !== undefined) {\r\n          draftPolygon.rotation = getDraftUpdatedByOptions<PolygonRingRotation>(\r\n            draftPolygon.rotation,\r\n            action.polygonState.rotation\r\n          )\r\n        }\r\n        if (action.polygonState.sides !== undefined) {\r\n          draftPolygon.sides = getDraftUpdatedByOptions<PolygonRingSides>(\r\n            draftPolygon.sides,\r\n            action.polygonState.sides\r\n          )\r\n        }\r\n        if (action.polygonState.scale !== undefined) {\r\n          draftPolygon.scale = getDraftUpdatedByOptions<PolygonRingScale>(\r\n            draftPolygon.scale,\r\n            action.polygonState.scale\r\n          )\r\n        }\r\n        break\r\n      }\r\n      case \"UPDATE_POLYGON_POSITION\": {\r\n        draft[action.group].rings[action.polygon].position = action.position\r\n        break\r\n      }\r\n      case \"UPDATE_POLYGON_ACTIVE\": {\r\n        draft[action.group].rings[action.polygon].active = action.active\r\n        break\r\n      }\r\n      case \"UPDATE_POLYGON_DOTS\": {\r\n        const draftPolygon = draft[action.group].rings[action.polygon]\r\n        draftPolygon.dots = getDraftUpdatedByOptions<PolygonRingDots>(\r\n          draftPolygon.dots,\r\n          action.dots\r\n        )\r\n        break\r\n      }\r\n      case \"UPDATE_POLYGON_ROTATION\": {\r\n        const draftPolygon = draft[action.group].rings[action.polygon]\r\n        draftPolygon.rotation = getDraftUpdatedByOptions<PolygonRingRotation>(\r\n          draftPolygon.rotation,\r\n          action.rotation\r\n        )\r\n        break\r\n      }\r\n      case \"UPDATE_POLYGON_SIDES\": {\r\n        const draftPolygon = draft[action.group].rings[action.polygon]\r\n        draftPolygon.sides = getDraftUpdatedByOptions<PolygonRingSides>(\r\n          draftPolygon.sides,\r\n          action.sides\r\n        )\r\n        break\r\n      }\r\n      case \"UPDATE_POLYGON_SCALE\": {\r\n        const draftPolygon = draft[action.group].rings[action.polygon]\r\n        draftPolygon.scale = getDraftUpdatedByOptions<PolygonRingScale>(\r\n          draftPolygon.scale,\r\n          action.scale\r\n        )\r\n        break\r\n      }\r\n      case \"RANDOMIZE_POLYGON_RINGS\": {\r\n        const draftGroups = draft[action.group]\r\n        draftGroups.rings = createRandomPolygonRings()\r\n        break\r\n      }\r\n      case \"RANDOMIZE_POLYGON\": {\r\n        const draftRings = draft[action.group].rings\r\n        draftRings[action.polygon] = getRandomPolygon(\r\n          original(draftRings[action.polygon])\r\n        )\r\n        break\r\n      }\r\n      case \"RANDOMIZE_POLYGON_SIDES\": {\r\n        const draftPolygon = draft[action.group].rings[action.polygon]\r\n        draftPolygon.sides = getRandomSides()\r\n        break\r\n      }\r\n      case \"RANDOMIZE_POLYGON_ROTATION\": {\r\n        const draftPolygon = draft[action.group].rings[action.polygon]\r\n        draftPolygon.rotation = getRandomRotation()\r\n        break\r\n      }\r\n      case \"RANDOMIZE_POLYGON_SCALE\": {\r\n        const draftPolygon = draft[action.group].rings[action.polygon]\r\n        draftPolygon.scale = getRandomScale()\r\n        break\r\n      }\r\n      case \"RANDOMIZE_POLYGON_DOTS\": {\r\n        const draftPolygon = draft[action.group].rings[action.polygon]\r\n        const sides = draftPolygon.sides.amount\r\n        draftPolygon.dots = getRandomDots(sides)\r\n        break\r\n      }\r\n      case \"DELETE_POLYGON_GROUP\": {\r\n        const originalDraft = original(draft)\r\n        const totalGroups = originalDraft ? originalDraft.length : 1\r\n        if (originalDraft && totalGroups > 1) {\r\n          draft.splice(action.group, 1)\r\n        }\r\n        break\r\n      }\r\n      case \"DELETE_POLYGON_GROUP_RING\": {\r\n        const originalDraft = original(draft)\r\n        const totalRings = originalDraft\r\n          ? originalDraft[action.group].rings.length\r\n          : 1\r\n        if (totalRings > 1) {\r\n          draft[action.group].rings.splice(action.polygon, 1)\r\n        }\r\n        break\r\n      }\r\n    }\r\n  }\r\n)\r\n\r\nconst polygonGroupsInitialState: PolygonGroup[] = [\r\n  {\r\n    active: true,\r\n    position: { x: 0, y: 0 },\r\n    rings: [\r\n      {\r\n        active: true,\r\n        position: { x: 0, y: 0 },\r\n        dots: {\r\n          enabled: true,\r\n          fillColours: [\"black\"],\r\n          size: 1,\r\n          strokeColours: [\"black\"],\r\n          strokeWidth: 1,\r\n        },\r\n        rotation: {\r\n          clockwise: true,\r\n          enabled: true,\r\n          speed: 1,\r\n          startingRotation: 1,\r\n        },\r\n        scale: {\r\n          enabled: true,\r\n          speed: 1,\r\n          range: { max: 10, min: 0 },\r\n          startingSize: 5,\r\n        },\r\n        sides: {\r\n          enabled: true,\r\n          strokeWidth: 1,\r\n          colours: [\"black\"],\r\n          amount: 6,\r\n        },\r\n      },\r\n    ],\r\n  },\r\n]\r\n\r\nfunction polygonGroupsInit(\r\n  polygonGroupsInitialState: PolygonGroup[]\r\n): PolygonGroup[] {\r\n  const newPolygon = [...polygonGroupsInitialState]\r\n  newPolygon[0].rings = createRandomPolygonRings()\r\n  return newPolygon\r\n}\r\n\r\nexport const PolygonGroupsContextWrapper: React.FC = ({ children }) => {\r\n  const [state, dispatch] = useReducer(\r\n    polygonGroupsReducer,\r\n    polygonGroupsInitialState,\r\n    polygonGroupsInit\r\n  )\r\n\r\n  return (\r\n    <polygonGroupsDispatchContext.Provider value={dispatch}>\r\n      <polygonGroupsStateContext.Provider value={state}>\r\n        {children}\r\n      </polygonGroupsStateContext.Provider>\r\n    </polygonGroupsDispatchContext.Provider>\r\n  )\r\n}\r\n\r\nexport const polygonGroupsDispatchContext = createContext(\r\n  {} as React.Dispatch<PolygonGroupsActions>\r\n)\r\nexport const polygonGroupsStateContext = createContext(\r\n  [] as Readonly<PolygonGroup[]>\r\n)\r\n","import React from \"react\"\r\nimport { useTransition, animated } from \"react-spring\"\r\n\r\ninterface ScreensProps {\r\n  currentChild: number\r\n  className?: string\r\n}\r\n\r\nconst Screens: React.FC<ScreensProps> = ({\r\n  children,\r\n  currentChild,\r\n  className,\r\n}) => {\r\n  const transitions = useTransition(currentChild, (item: number) => item, {\r\n    from: {\r\n      opacity: 0,\r\n      transform: \"translate(100%,0)\",\r\n    },\r\n    enter: { opacity: 1, transform: \"translate(0%,0)\" },\r\n    leave: {\r\n      opacity: 0,\r\n      transform: \"translate(-50%,0)\",\r\n    },\r\n  })\r\n  return (\r\n    <>\r\n      {transitions.map(({ item, key, props }) => {\r\n        return (\r\n          <animated.div key={key} style={props} className={className}>\r\n            {React.Children.map(children, (child, index) => {\r\n              if (index === item - 1) {\r\n                return child\r\n              }\r\n            })}\r\n          </animated.div>\r\n        )\r\n      })}\r\n    </>\r\n  )\r\n}\r\n\r\nexport default Screens\r\n","import { PolygonRing, Cords } from \"reducer-contexts/polygon-groups\"\r\n\r\nexport interface PolygonAnimation {\r\n  position: Cords\r\n  currentRotation: number\r\n  dots: {\r\n    enabled: boolean\r\n    fillColours: string[]\r\n    strokeColours: string[]\r\n    strokeWidth: number\r\n    size: number\r\n    position: Cords[]\r\n  }\r\n  sides: {\r\n    enabled: boolean\r\n    strokeColours: string[]\r\n    strokeWidth: number\r\n    positions: [Cords, Cords][]\r\n  }\r\n}\r\n\r\ninterface PolygonPoint extends Cords {\r\n  cos: number\r\n  sin: number\r\n}\r\n\r\ninterface PolygonAnimationConstants {\r\n  position: Cords\r\n  rotationSpeed: number\r\n  scalingSpeed: number\r\n  scalingRange: { min: number; max: number }\r\n  isActive: boolean\r\n  isRotating: boolean\r\n  isScaling: boolean\r\n  isRotatingClockwise: boolean\r\n}\r\n\r\ninterface PolygonAnimationState {\r\n  currentRotation: number\r\n  currentSize: number\r\n  currentlyExpanding: boolean\r\n  polygonPoints: PolygonPoint[]\r\n}\r\n\r\ninterface PolygonStyle {\r\n  sides: {\r\n    enabled: boolean\r\n    colours: string[]\r\n    strokeWidth: number\r\n  }\r\n  dots: {\r\n    enabled: boolean\r\n    strokeColours: string[]\r\n    fillColours: string[]\r\n    strokeWidth: number\r\n    size: number\r\n  }\r\n}\r\n\r\nexport class PolygonAnimationCalculation {\r\n  private style: PolygonStyle\r\n  private animationState: PolygonAnimationState\r\n  private animationConstants: PolygonAnimationConstants\r\n\r\n  constructor(polygon: PolygonRing) {\r\n    this.style = this.getInitialStyles(polygon)\r\n    this.animationConstants = this.getInitialConstants(polygon)\r\n    this.animationState = this.getInitialState(polygon)\r\n  }\r\n\r\n  private getInitialStyles({ sides, dots }: PolygonRing): PolygonStyle {\r\n    return {\r\n      sides: {\r\n        colours: sides.colours,\r\n        strokeWidth: sides.strokeWidth,\r\n        enabled: sides.enabled,\r\n      },\r\n      dots: {\r\n        enabled: dots.enabled,\r\n        size: dots.size,\r\n        fillColours: dots.fillColours,\r\n        strokeColours: dots.strokeColours,\r\n        strokeWidth: dots.strokeWidth,\r\n      },\r\n    }\r\n  }\r\n\r\n  private getInitialPoints(\r\n    sides: number,\r\n    startingSize: number\r\n  ): PolygonPoint[] {\r\n    const twoPi = Math.PI * 2\r\n    const angleBetweenPoints = twoPi / sides\r\n\r\n    let currentAngle = angleBetweenPoints\r\n    return [...Array(sides)].map(() => {\r\n      currentAngle += angleBetweenPoints\r\n      const cos = Math.cos(currentAngle)\r\n      const sin = Math.sin(currentAngle)\r\n      const x = Math.round(cos * startingSize)\r\n      const y = Math.round(sin * startingSize)\r\n\r\n      return { x, y, sin, cos }\r\n    })\r\n  }\r\n\r\n  private getInitialConstants({\r\n    active,\r\n    rotation,\r\n    scale,\r\n    position,\r\n  }: PolygonRing): PolygonAnimationConstants {\r\n    return {\r\n      position,\r\n      isActive: active,\r\n      isRotating: rotation.enabled,\r\n      isScaling: scale.enabled,\r\n      isRotatingClockwise: rotation.clockwise,\r\n      rotationSpeed: rotation.speed,\r\n      scalingSpeed: scale.speed,\r\n      scalingRange: scale.range,\r\n    }\r\n  }\r\n\r\n  private getInitialState({\r\n    scale,\r\n    rotation,\r\n    sides,\r\n  }: PolygonRing): PolygonAnimationState {\r\n    const polygonPoints = this.getInitialPoints(\r\n      sides.amount,\r\n      scale.startingSize\r\n    )\r\n    const currentlyExpanding =\r\n      scale.startingSize <= (scale.range.max - scale.range.min) / 2\r\n    return {\r\n      currentRotation: rotation.startingRotation,\r\n      currentSize: scale.startingSize,\r\n      currentlyExpanding,\r\n      polygonPoints,\r\n    }\r\n  }\r\n\r\n  private updateRotation() {\r\n    const {\r\n      isRotating,\r\n      isRotatingClockwise,\r\n      rotationSpeed,\r\n    } = this.animationConstants\r\n    const { currentRotation } = this.animationState\r\n\r\n    let newRotation: number\r\n    if (isRotating) {\r\n      if (isRotatingClockwise) {\r\n        newRotation = currentRotation + rotationSpeed\r\n      } else {\r\n        newRotation = currentRotation - rotationSpeed\r\n      }\r\n      if (newRotation >= 360) {\r\n        const amountOver = currentRotation - 360\r\n        newRotation = 0 + amountOver\r\n      } else if (newRotation <= -360) {\r\n        const amountOver = currentRotation - 360\r\n        newRotation = 0 - amountOver\r\n      }\r\n\r\n      this.animationState.currentRotation = newRotation\r\n    }\r\n  }\r\n\r\n  private updateScale() {\r\n    const { isScaling, scalingSpeed, scalingRange } = this.animationConstants\r\n    const {\r\n      currentlyExpanding,\r\n      polygonPoints,\r\n      currentSize,\r\n    } = this.animationState\r\n\r\n    if (isScaling) {\r\n      let updatedSize: number\r\n      let updatedCurrentlyExpanding = currentlyExpanding\r\n      if (currentlyExpanding) {\r\n        updatedSize = currentSize + scalingSpeed\r\n      } else {\r\n        updatedSize = currentSize - scalingSpeed\r\n      }\r\n\r\n      if (updatedSize >= scalingRange.max) {\r\n        updatedSize = scalingRange.max\r\n        updatedCurrentlyExpanding = false\r\n      } else if (updatedSize <= scalingRange.min) {\r\n        updatedSize = scalingRange.min\r\n        updatedCurrentlyExpanding = true\r\n      }\r\n\r\n      const newPolygonPoints = polygonPoints.map((point) => {\r\n        const { cos, sin } = point\r\n        const newPoint = { ...point }\r\n\r\n        newPoint.x = Math.round(cos * updatedSize)\r\n        newPoint.y = Math.round(sin * updatedSize)\r\n\r\n        return newPoint\r\n      })\r\n\r\n      this.animationState.currentSize = updatedSize\r\n      this.animationState.currentlyExpanding = updatedCurrentlyExpanding\r\n      this.animationState.polygonPoints = newPolygonPoints\r\n    }\r\n  }\r\n\r\n  public getPolygonFrame(): PolygonAnimation {\r\n    const { dots, sides } = this.style\r\n    const { currentRotation, polygonPoints } = this.animationState\r\n    const { position } = this.animationConstants\r\n    const dotPositions = polygonPoints.map((point) => {\r\n      return { x: point.x, y: point.y }\r\n    })\r\n    const sidesPositions: [Cords, Cords][] = polygonPoints.map(\r\n      (point, index) => {\r\n        const totalPoints = polygonPoints.length\r\n        const nextIndex = index + 1\r\n        let nextPoint: Cords\r\n        if (nextIndex === totalPoints) {\r\n          nextPoint = { x: polygonPoints[0].x, y: polygonPoints[0].y }\r\n        } else {\r\n          nextPoint = {\r\n            x: polygonPoints[nextIndex].x,\r\n            y: polygonPoints[nextIndex].y,\r\n          }\r\n        }\r\n        return [{ x: point.x, y: point.y }, nextPoint]\r\n      }\r\n    )\r\n\r\n    return {\r\n      position,\r\n      currentRotation,\r\n      dots: {\r\n        enabled: dots.enabled,\r\n        size: dots.size,\r\n        position: dotPositions,\r\n        fillColours: dots.fillColours,\r\n        strokeColours: dots.strokeColours,\r\n        strokeWidth: dots.strokeWidth,\r\n      },\r\n      sides: {\r\n        enabled: sides.enabled,\r\n        positions: sidesPositions,\r\n        strokeWidth: sides.strokeWidth,\r\n        strokeColours: sides.colours,\r\n      },\r\n    }\r\n  }\r\n  public getPolygonFrameAndStep(): PolygonAnimation {\r\n    const { isActive } = this.animationConstants\r\n    const currentFrame = this.getPolygonFrame()\r\n    if (isActive) {\r\n      this.updateScale()\r\n      this.updateRotation()\r\n    }\r\n    return currentFrame\r\n  }\r\n}\r\n","import { P5 } from \"types/p5\"\r\nimport {\r\n  PolygonAnimationCalculation,\r\n  PolygonAnimation,\r\n} from \"polygon-logic/polygon-animation-calculation\"\r\n// Disabled because PolygonRing is only used as a type and is getting flagged\r\n// eslint-disable-next-line\r\nimport { PolygonRing, PolygonGroup } from \"reducer-contexts/polygon-groups\"\r\n\r\nfunction getSizeConstrainedCords(\r\n  size: { width: number; height: number },\r\n  cords: { x: number; y: number }\r\n): { x: number; y: number } {\r\n  const x = Math.floor((size.width * (cords.x / 100)) / 2)\r\n  let y = Math.floor((size.height * (cords.y / 100)) / 2)\r\n  //Flip the y axis to have +100 at the top and -100 at the bottom\r\n  if (y < 0) {\r\n    y = y / -1\r\n  } else {\r\n    y = y / -1\r\n  }\r\n\r\n  return { x, y }\r\n}\r\n\r\nfunction singlePolygonDraw(\r\n  polygonAnimation: PolygonAnimation,\r\n  size: { width: number; height: number },\r\n  p5: P5,\r\n  scale?: number\r\n) {\r\n  const { currentRotation, dots, sides, position } = polygonAnimation\r\n  const { x, y } = getSizeConstrainedCords(size, position)\r\n\r\n  p5.push()\r\n  p5.translate(x, y)\r\n  if (scale) {\r\n    p5.scale(scale)\r\n  }\r\n  p5.rotate(currentRotation)\r\n  if (sides.enabled) {\r\n    sides.positions.forEach((cords, index) => {\r\n      const stokeColour = index % sides.strokeColours.length\r\n      p5.stroke(sides.strokeColours[stokeColour])\r\n      p5.strokeWeight(sides.strokeWidth)\r\n      p5.line(cords[0].x, cords[0].y, cords[1].x, cords[1].y)\r\n    })\r\n  }\r\n  if (dots.enabled) {\r\n    p5.push()\r\n    dots.position.forEach((cords, index) => {\r\n      const fillColourIndex = index % dots.fillColours.length\r\n      const stokeColourIndex = index % dots.strokeColours.length\r\n      const { x, y } = cords\r\n      p5.fill(dots.fillColours[fillColourIndex])\r\n      p5.strokeWeight(dots.strokeWidth)\r\n      p5.stroke(dots.strokeColours[stokeColourIndex])\r\n      p5.ellipse(x, y, dots.size)\r\n    })\r\n    p5.pop()\r\n  }\r\n  p5.pop()\r\n}\r\n\r\nexport function generatePolygonRingSketch(\r\n  PolygonRing: Readonly<PolygonRing>,\r\n  windowSize: { height: number; width: number },\r\n  scale?: number\r\n) {\r\n  const polygonRingInstance = new PolygonAnimationCalculation(PolygonRing)\r\n\r\n  return (p5: P5) => {\r\n    p5.setup = () => {\r\n      p5.createCanvas(windowSize.width, windowSize.height)\r\n      p5.background(\"#f6f6f6\")\r\n    }\r\n    p5.draw = () => {\r\n      polygonRingInstance.getPolygonFrameAndStep()\r\n      p5.angleMode(\"degrees\")\r\n      p5.background(\"rgba(255,255,255, 0.05)\")\r\n      p5.translate(windowSize.width / 2, windowSize.height / 2)\r\n      singlePolygonDraw(\r\n        polygonRingInstance.getPolygonFrameAndStep(),\r\n        windowSize,\r\n        p5,\r\n        scale\r\n      )\r\n    }\r\n  }\r\n}\r\n\r\nexport function generatePolygonGroupSketch(\r\n  polygonGroup: Readonly<PolygonGroup>,\r\n  windowSize: { height: number; width: number },\r\n  scale?: number\r\n) {\r\n  const polygonRingInstances = polygonGroup.rings.map((polygonRing) => {\r\n    return new PolygonAnimationCalculation(polygonRing)\r\n  })\r\n\r\n  return (p5: P5) => {\r\n    p5.setup = () => {\r\n      p5.createCanvas(windowSize.width, windowSize.height)\r\n      p5.background(\"#f6f6f6\")\r\n    }\r\n    p5.draw = () => {\r\n      p5.angleMode(\"degrees\")\r\n      p5.background(\"rgba(255,255,255, 0.05)\")\r\n      p5.translate(windowSize.width / 2, windowSize.height / 2)\r\n      p5.push()\r\n      for (const polygonRing of polygonRingInstances) {\r\n        singlePolygonDraw(\r\n          polygonRing.getPolygonFrameAndStep(),\r\n          windowSize,\r\n          p5,\r\n          scale\r\n        )\r\n      }\r\n      p5.pop()\r\n    }\r\n  }\r\n}\r\n\r\nexport function generateAllPolygonRingGroupsSketch(\r\n  polygonGroups: Readonly<PolygonGroup[]>,\r\n  windowSize: { height: number; width: number }\r\n) {\r\n  const polygonGroupInstances = polygonGroups.map(({ rings }) =>\r\n    rings.map((polygonRing) => {\r\n      return new PolygonAnimationCalculation(polygonRing)\r\n    })\r\n  )\r\n\r\n  return (p5: P5) => {\r\n    p5.setup = () => {\r\n      p5.createCanvas(windowSize.width, windowSize.height)\r\n      p5.background(\"#f6f6f6\")\r\n    }\r\n    p5.draw = () => {\r\n      p5.angleMode(\"degrees\")\r\n      p5.background(\"rgba(255,255,255, 0.05)\")\r\n      p5.translate(windowSize.width / 2, windowSize.height / 2)\r\n      polygonGroupInstances.forEach((polygonGroupRings, index) => {\r\n        p5.push()\r\n        const { x, y } = getSizeConstrainedCords(\r\n          windowSize,\r\n          polygonGroups[index].position\r\n        )\r\n        p5.translate(x, y)\r\n        for (const polygonRingInstance of polygonGroupRings) {\r\n          singlePolygonDraw(\r\n            polygonRingInstance.getPolygonFrameAndStep(),\r\n            windowSize,\r\n            p5\r\n          )\r\n        }\r\n        p5.pop()\r\n      })\r\n    }\r\n  }\r\n}\r\n","import React, { useEffect, useRef } from \"react\"\r\nimport p5 from \"p5\"\r\nimport { P5 } from \"types/p5\"\r\n\r\ninterface P5CanvasProps {\r\n  sketch: (p5: P5) => void\r\n}\r\n\r\nexport const P5Canvas: React.FC<P5CanvasProps> = ({ sketch }) => {\r\n  const divRef = useRef<HTMLDivElement>(null)\r\n  const P5Ref = useRef<P5>()\r\n\r\n  useEffect(() => {\r\n    const node = divRef.current as HTMLDivElement\r\n    if (P5Ref.current !== undefined) {\r\n      P5Ref.current.remove()\r\n    }\r\n    const p5Instance = new p5(sketch, node)\r\n    P5Ref.current = p5Instance\r\n\r\n    return () => {\r\n      const P5Instance = P5Ref.current as P5\r\n      P5Instance.remove()\r\n    }\r\n  }, [P5Ref, divRef, sketch])\r\n\r\n  return <div ref={divRef} />\r\n}\r\n","import React, { useContext, useEffect, useRef, useState } from \"react\"\r\nimport styled from \"styled-components\"\r\n\r\nimport {\r\n  polygonGroupsStateContext,\r\n  PolygonGroup,\r\n} from \"reducer-contexts/polygon-groups\"\r\nimport { generateAllPolygonRingGroupsSketch } from \"polygon-logic/polygon-p5-draw\"\r\n\r\nimport { P5Canvas } from \"components/P5Canvas\"\r\n\r\nconst MainCanvasWrapper = styled.div`\r\n  background: white;\r\n  width: 100%;\r\n  height: 100%;\r\n  max-width: 100vw;\r\n  text-align: center;\r\n  font-size: 200;\r\n`\r\n\r\nfunction generateKey(\r\n  polygonGroups: Readonly<PolygonGroup[]>,\r\n  containerSize: { height: number; width: number }\r\n): string {\r\n  const polygonGroupLength = polygonGroups.length\r\n  const polygonRingLengths = polygonGroups\r\n    .map((polygonGroup) => polygonGroup.rings.length)\r\n    .join(\"-\")\r\n  const polygonRingRotations = polygonGroups\r\n    .map((polygonGroup) =>\r\n      polygonGroup.rings.map((ring) => ring.rotation.startingRotation).join(\"-\")\r\n    )\r\n    .join(\"-\")\r\n\r\n  return `${polygonGroupLength}-${polygonRingLengths}-${polygonRingRotations}-${containerSize.width}-${containerSize.height}`\r\n}\r\n\r\nexport const MainCanvas: React.FC = () => {\r\n  const polygonContext = useContext(polygonGroupsStateContext)\r\n  const [currentSize, setCurrentSize] = useState({ height: 0, width: 0 })\r\n  const mainWrapper = useRef(\r\n    null\r\n  ) as React.MutableRefObject<null | HTMLDivElement>\r\n\r\n  /**\r\n   * Updates the canvas size when the ref for the wrapping component\r\n   * comes back.\r\n   *\r\n   * Also listens to the window resize and updates the canvas size if\r\n   * it changes. But its throttled by 250ms\r\n   */\r\n  useEffect(() => {\r\n    if (mainWrapper?.current) {\r\n      setCurrentSize({\r\n        height: mainWrapper.current.offsetHeight,\r\n        width: mainWrapper.current.offsetWidth,\r\n      })\r\n    }\r\n  }, [mainWrapper, setCurrentSize])\r\n\r\n  useEffect(() => {\r\n    function updateCanvasSize() {\r\n      if (mainWrapper?.current) {\r\n        setCurrentSize({\r\n          height: mainWrapper.current.offsetHeight,\r\n          width: mainWrapper.current.offsetWidth,\r\n        })\r\n      }\r\n    }\r\n\r\n    updateCanvasSize()\r\n\r\n    let timeoutId: number\r\n    const throttledWindowUpdate = () => {\r\n      clearTimeout(timeoutId)\r\n      timeoutId = setTimeout(() => updateCanvasSize(), 250)\r\n    }\r\n\r\n    window.addEventListener(\"resize\", throttledWindowUpdate)\r\n    return () => {\r\n      window.removeEventListener(\"resize\", throttledWindowUpdate)\r\n    }\r\n  }, [mainWrapper, setCurrentSize])\r\n\r\n  return (\r\n    <MainCanvasWrapper ref={mainWrapper}>\r\n      <P5Canvas\r\n        sketch={generateAllPolygonRingGroupsSketch(polygonContext, currentSize)}\r\n        key={generateKey(polygonContext, currentSize)}\r\n      />\r\n    </MainCanvasWrapper>\r\n  )\r\n}\r\n","import React, { useContext } from \"react\"\r\nimport styled from \"styled-components\"\r\n\r\nimport {\r\n  polygonGroupsStateContext,\r\n  polygonGroupsDispatchContext,\r\n  PolygonRing,\r\n} from \"reducer-contexts/polygon-groups\"\r\n\r\nimport { navigationDispatchContext } from \"reducer-contexts/navigation\"\r\n\r\nimport {\r\n  generatePolygonGroupSketch,\r\n  generatePolygonRingSketch,\r\n} from \"polygon-logic/polygon-p5-draw\"\r\n\r\nimport { P5Canvas } from \"components/P5Canvas\"\r\n\r\nconst GroupsUl = styled.ul`\r\n  display: grid;\r\n  grid-gap: 10px;\r\n  background: lightgrey;\r\n  list-style: none;\r\n  overflow-y: scroll;\r\n  height: 100%;\r\n`\r\n\r\nconst GroupsLi = styled.li`\r\n  background: white;\r\n  display: grid;\r\n  grid-gap: 10px;\r\n  grid-auto-rows: min-content;\r\n  border: 2px solid darkgrey;\r\n  border-radius: 10px;\r\n  margin: 10px;\r\n  padding: 10px 0;\r\n`\r\nconst AddGroupButton = styled.button`\r\n  margin: 0 10px;\r\n  font-size: 18px;\r\n  border-radius: 10px;\r\n  height: 50px;\r\n  margin-bottom: 10px;\r\n  width: calc(100% - 20px);\r\n`\r\n\r\nconst GroupCanvasGroupDiv = styled.div`\r\n  display: grid;\r\n  grid-gap: 10px;\r\n  grid-template-columns: 100px 100px;\r\n  grid-template-rows: 200px 1fr;\r\n  justify-self: center;\r\n`\r\n\r\nconst CanvasWrappingDiv = styled.div`\r\n  grid-column: 1/3;\r\n  justify-self: center;\r\n`\r\nconst GroupRandomizeButton = styled.button`\r\n  justify-self: center;\r\n  align-self: center;\r\n  min-height: 50px;\r\n  border-radius: 5px;\r\n`\r\nconst GroupDeleteButton = styled.button`\r\n  justify-self: center;\r\n  align-self: center;\r\n  min-height: 50px;\r\n  border-radius: 5px;\r\n  grid-column: 2/3;\r\n`\r\n\r\nexport function GroupsDisplay() {\r\n  const polygonGroupsState = useContext(polygonGroupsStateContext)\r\n  const polygonGroupsDispatch = useContext(polygonGroupsDispatchContext)\r\n  const totalPolygonGroups = polygonGroupsState.length\r\n  return (\r\n    <GroupsUl>\r\n      {polygonGroupsState.map((polygonGroup, groupIndex) => {\r\n        const key = `${polygonGroup.rings.length}-${polygonGroup.rings[0].rotation.startingRotation}-${groupIndex}`\r\n        const isLastPolygonGroup = groupIndex === polygonGroupsState.length - 1\r\n        return (\r\n          <React.Fragment key={key}>\r\n            <GroupsLi aria-label={`Group ${groupIndex} Canvas`}>\r\n              <GroupCanvasGroupDiv>\r\n                <CanvasWrappingDiv>\r\n                  <P5Canvas\r\n                    sketch={generatePolygonGroupSketch(\r\n                      polygonGroup,\r\n                      {\r\n                        height: 200,\r\n                        width: 200,\r\n                      },\r\n                      0.2\r\n                    )}\r\n                  />\r\n                </CanvasWrappingDiv>\r\n                <GroupRandomizeButton\r\n                  onClick={() => {\r\n                    polygonGroupsDispatch({\r\n                      type: \"RANDOMIZE_POLYGON_RINGS\",\r\n                      group: groupIndex,\r\n                    })\r\n                  }}\r\n                >\r\n                  Randomize\r\n                </GroupRandomizeButton>\r\n                <GroupDeleteButton\r\n                  disabled={totalPolygonGroups === 1}\r\n                  onClick={() => {\r\n                    polygonGroupsDispatch({\r\n                      type: \"DELETE_POLYGON_GROUP\",\r\n                      group: groupIndex,\r\n                    })\r\n                  }}\r\n                >\r\n                  Delete\r\n                </GroupDeleteButton>\r\n              </GroupCanvasGroupDiv>\r\n              <PolygonRingsDisplay\r\n                polygonRings={polygonGroup.rings}\r\n                groupNumber={groupIndex}\r\n              />\r\n            </GroupsLi>\r\n            {isLastPolygonGroup && (\r\n              <li>\r\n                <AddGroupButton\r\n                  type=\"button\"\r\n                  onClick={() => {\r\n                    polygonGroupsDispatch({ type: \"CREATE_POLYGON_GROUP\" })\r\n                  }}\r\n                >\r\n                  Add Group\r\n                </AddGroupButton>\r\n              </li>\r\n            )}\r\n          </React.Fragment>\r\n        )\r\n      })}\r\n    </GroupsUl>\r\n  )\r\n}\r\n\r\nconst RingsUl = styled.ul`\r\n  display: grid;\r\n  grid-gap: 10px;\r\n  grid-auto-flow: column;\r\n  grid-auto-columns: max-content;\r\n  overflow-x: scroll;\r\n  margin: 0 10px;\r\n  padding: 10px;\r\n  border-radius: 8px;\r\n  box-shadow: inset 0px 0px 9px -2px #404040;\r\n`\r\n\r\nconst RingsLi = styled.li`\r\n  display: grid;\r\n  grid-auto-columns: 1fr;\r\n  grid-template-rows: 50px 150px 50px;\r\n  grid-template-areas:\r\n    \"EDIT EDIT RANDOM RANDOM\"\r\n    \"CANVAS CANVAS CANVAS CANVAS\"\r\n    \". DELETE DELETE .\";\r\n  grid-gap: 10px;\r\n  padding: 10px;\r\n  border: solid 2px darkgrey;\r\n  border-radius: 5px;\r\n  &:last-child {\r\n    display: flex;\r\n    align-items: center;\r\n    justify-content: center;\r\n    border: none;\r\n  }\r\n`\r\nconst RingCanvasDiv = styled.div`\r\n  grid-area: CANVAS;\r\n  justify-self: center;\r\n`\r\nconst RingButton = styled.button`\r\n  min-height: 50px;\r\n  border-radius: 5px;\r\n`\r\n\r\nconst RingEditButton = styled(RingButton)`\r\n  grid-area: EDIT;\r\n`\r\nconst RingRandomizeButton = styled(RingButton)`\r\n  grid-area: RANDOM;\r\n`\r\nconst RingDeleteButton = styled(RingButton)`\r\n  grid-area: DELETE;\r\n`\r\n\r\nconst AddRingButton = styled.button`\r\n  height: 50px;\r\n  justify-self: center;\r\n  align-self: center;\r\n  border-radius: 5px;\r\n  grid-column: 1/3;\r\n`\r\n\r\nconst PolygonRingsDisplay: React.FC<{\r\n  polygonRings: PolygonRing[]\r\n  groupNumber: number\r\n}> = ({ polygonRings, groupNumber }) => {\r\n  const polygonGroupsDispatch = useContext(polygonGroupsDispatchContext)\r\n  const navigationDispatch = useContext(navigationDispatchContext)\r\n  const totalPolygons = polygonRings.length\r\n  return (\r\n    <RingsUl>\r\n      {polygonRings.map((polygon, polygonIndex) => {\r\n        const isLastPolygon = totalPolygons === polygonIndex + 1\r\n        const key = `${polygonRings.length}-${polygon.rotation.startingRotation}-${polygonIndex}`\r\n        return (\r\n          <React.Fragment key={key}>\r\n            <RingsLi\r\n              aria-label={`Group ${groupNumber}, Ring ${polygonIndex} Canvas`}\r\n            >\r\n              <RingEditButton\r\n                type=\"button\"\r\n                onClick={() => {\r\n                  navigationDispatch({\r\n                    type: \"POLYGON_SCREEN\",\r\n                    currentGroup: groupNumber,\r\n                    currentPolygon: polygonIndex,\r\n                  })\r\n                }}\r\n              >\r\n                Edit\r\n              </RingEditButton>\r\n              <RingRandomizeButton\r\n                type=\"button\"\r\n                onClick={() => {\r\n                  polygonGroupsDispatch({\r\n                    type: \"RANDOMIZE_POLYGON\",\r\n                    group: groupNumber,\r\n                    polygon: polygonIndex,\r\n                  })\r\n                }}\r\n              >\r\n                Randomize\r\n              </RingRandomizeButton>\r\n              <RingCanvasDiv>\r\n                <P5Canvas\r\n                  sketch={generatePolygonRingSketch(\r\n                    polygon,\r\n                    {\r\n                      height: 150,\r\n                      width: 150,\r\n                    },\r\n                    0.15\r\n                  )}\r\n                />\r\n              </RingCanvasDiv>\r\n              <RingDeleteButton\r\n                type=\"button\"\r\n                disabled={totalPolygons === 1}\r\n                onClick={() => {\r\n                  polygonGroupsDispatch({\r\n                    type: \"DELETE_POLYGON_GROUP_RING\",\r\n                    group: groupNumber,\r\n                    polygon: polygonIndex,\r\n                  })\r\n                }}\r\n              >\r\n                Delete\r\n              </RingDeleteButton>\r\n            </RingsLi>\r\n            {isLastPolygon && (\r\n              <RingsLi>\r\n                <AddRingButton\r\n                  type=\"button\"\r\n                  onClick={() => {\r\n                    polygonGroupsDispatch({\r\n                      type: \"CREATE_POLYGON\",\r\n                      group: groupNumber,\r\n                    })\r\n                  }}\r\n                >\r\n                  Add Polygon\r\n                </AddRingButton>\r\n              </RingsLi>\r\n            )}\r\n          </React.Fragment>\r\n        )\r\n      })}\r\n    </RingsUl>\r\n  )\r\n}\r\n","import React from \"react\"\r\nimport styled, { css } from \"styled-components\"\r\n\r\ninterface CheckboxInputProps {\r\n  checkedText?: { checked: string; unchecked: string }\r\n  svgBackground?: string\r\n  transformFlip?: boolean\r\n}\r\nconst CheckboxInput = styled.input<CheckboxInputProps>`\r\n  ${({ checkedText, svgBackground, transformFlip }) => {\r\n    const svgBackgroundCss = css`\r\n    background-image: url(\"${svgBackground}\");\r\n    background-position: center center;\r\n    background-repeat: no-repeat;\r\n    background-size: 90%;\r\n    `\r\n\r\n    return css`\r\n      height: 0px;\r\n      width: 0px;\r\n      overflow: hidden;\r\n      clip: rect(1px, 1px, 1px, 1px);\r\n      position: absolute !important;\r\n\r\n      &:checked + label .button {\r\n        &::before {\r\n          background: grey;\r\n        }\r\n        &::after {\r\n        content: \"${checkedText ? checkedText.unchecked : \"\"}\";\r\n          background: lightgrey;\r\n          ${svgBackground ? svgBackgroundCss : \"\"}\r\n          transform: translate(0, -50%) scale(1);\r\n        }\r\n      }\r\n      &:checked:focus,\r\n      &:checked:hover {\r\n        & + label .button::after {\r\n          transform: translate(0, -50%) scale(0.9);\r\n        }\r\n      }\r\n\r\n      & + label{\r\n        display: grid;\r\n        grid-template-rows: 1em 50px;\r\n        grid-gap: 5px;\r\n      }\r\n\r\n      & + label .button {\r\n        display: block;\r\n        box-sizing: border-box;\r\n        position: relative;\r\n\r\n        &::before,\r\n        &::after {\r\n          content: \"\";\r\n          position: absolute;\r\n          left: 0;\r\n          top: 50%;\r\n          transform: translateY(-50%);\r\n        }\r\n        &::before {\r\n          background: lightgrey;\r\n          height: 50px;\r\n          width: 90px;\r\n          border-radius: 50px;\r\n          transition: border 100ms ease-in-out, background-color 200ms ease-in-out;\r\n        }\r\n        &::after {\r\n          content: \"${checkedText ? checkedText.checked : \"\"}\";\r\n          display: flex;\r\n          justify-content: center;\r\n          align-items: center;\r\n          background: grey;\r\n          transform: translate(100%, -50%) scale(1) ${\r\n            transformFlip ? \"rotateX(0deg) rotateY(180deg)\" : \"\"\r\n          };\r\n          ${svgBackground ? svgBackgroundCss : \"\"}\r\n          margin: 0 5px;\r\n          width: 40px;\r\n          height: 40px;\r\n          border-radius: 25px;\r\n          transition: transform 200ms ease-in-out, background-color 300ms ease-in-out;\r\n        }\r\n      }\r\n\r\n      &:focus,\r\n      &:hover {\r\n        & + label .button::after {\r\n          transform: translate(100%, -50%) scale(0.9) ${\r\n            transformFlip ? \"rotateX(0deg) rotateY(180deg)\" : \"\"\r\n          };\r\n        }\r\n        & + label::before {\r\n          border: solid 5px darkgrey;\r\n          height: 55px;\r\n          width: 105px;\r\n          right: -2.5px;\r\n        }\r\n      }`\r\n  }}\r\n`\r\n\r\ninterface ToggleSwitchProps extends CheckboxInputProps {\r\n  label: string\r\n  id: string\r\n  checked: boolean\r\n  setFunction: React.Dispatch<React.SetStateAction<boolean>>\r\n}\r\n\r\nexport const ToggleSwitch: React.FC<ToggleSwitchProps> = ({\r\n  label,\r\n  id,\r\n  checked,\r\n  setFunction,\r\n  checkedText,\r\n  svgBackground,\r\n  transformFlip,\r\n}) => {\r\n  return (\r\n    <div>\r\n      <CheckboxInput\r\n        type=\"checkbox\"\r\n        id={id}\r\n        checked={checked}\r\n        onChange={({ currentTarget: { checked } }) => {\r\n          setFunction(checked)\r\n        }}\r\n        checkedText={checkedText}\r\n        svgBackground={svgBackground}\r\n        transformFlip={transformFlip}\r\n      />\r\n      <label htmlFor={id}>\r\n        <span className=\"text\">{label}</span>\r\n        <span className=\"button\" />\r\n      </label>\r\n    </div>\r\n  )\r\n}\r\n","import React from \"react\"\r\nimport styled, { StyledComponent } from \"styled-components\"\r\n\r\ninterface SliderProps {\r\n  label: string\r\n  id: string\r\n  min: number\r\n  max: number\r\n  currentValue: number\r\n  vertical?: boolean\r\n  simpleThumb?: boolean\r\n  setFunction: React.Dispatch<React.SetStateAction<number>>\r\n  className?: string\r\n}\r\n\r\nconst SliderInputRange = styled.input`\r\n  &[orient=\"vertical\"] {\r\n    writing-mode: bt-lr;\r\n    -webkit-appearance: slider-vertical;\r\n    &::-webkit-slider-thumb {\r\n      margin-right: -3.2px;\r\n    }\r\n    &:focus::-webkit-slider-thumb {\r\n      margin-right: -5.2px;\r\n    }\r\n    &::-webkit-slider-runnable-track {\r\n      width: 10px;\r\n      height: 100%;\r\n    }\r\n    &::-moz-range-track {\r\n      width: 10px;\r\n      height: 100%;\r\n    }\r\n  }\r\n  -webkit-appearance: none;\r\n  margin: 10px 0;\r\n  width: 100%;\r\n  &:focus {\r\n    outline: none;\r\n  }\r\n  &:not(.simpleThumb) {\r\n    &::-webkit-slider-thumb {\r\n      box-shadow: 0px 0px 0px #000000, 0px 0px 0px #0d0d0d;\r\n      border: 0px solid #000000;\r\n      height: 20px;\r\n      width: 39px;\r\n      border-radius: 15px;\r\n      background: grey;\r\n      cursor: pointer;\r\n      -webkit-appearance: none;\r\n      margin-top: -5.2px;\r\n    }\r\n    &:focus::-webkit-slider-thumb {\r\n      background: radial-gradient(\r\n        rgb(255, 255, 255) 0%,\r\n        rgb(141, 141, 141) 50%,\r\n        rgb(63, 63, 63) 100%\r\n      );\r\n      outline: none;\r\n      border: solid grey 2px;\r\n      margin-top: -7.2px;\r\n    }\r\n    &::-moz-range-thumb {\r\n      box-shadow: 0px 0px 0px #000000, 0px 0px 0px #0d0d0d;\r\n      border: 0px solid #000000;\r\n      height: 20px;\r\n      width: 39px;\r\n      border-radius: 15px;\r\n      background: grey;\r\n      cursor: pointer;\r\n    }\r\n\r\n    &:focus::-moz-range-thumb {\r\n      background: radial-gradient(\r\n        rgb(255, 255, 255) 0%,\r\n        rgb(141, 141, 141) 50%,\r\n        rgb(63, 63, 63) 100%\r\n      );\r\n      outline: none;\r\n      border: solid grey 2px;\r\n    }\r\n  }\r\n  &::-moz-range-thumb {\r\n    box-shadow: 0px 0px 0px #000000, 0px 0px 0px #0d0d0d;\r\n    border: 0px solid #000000;\r\n    height: 18px;\r\n    width: 18px;\r\n    border-radius: 50px;\r\n    background: grey;\r\n    cursor: pointer;\r\n  }\r\n\r\n  &::-webkit-slider-thumb {\r\n    margin-top: -3.2px;\r\n  }\r\n\r\n  &:focus::-webkit-slider-thumb {\r\n    margin-top: -5.2px;\r\n  }\r\n  &::-webkit-slider-runnable-track {\r\n    width: 100%;\r\n    height: 10px;\r\n    cursor: pointer;\r\n    box-shadow: 0px 0px 0px #000000, 0px 0px 0px #0d0d0d;\r\n    background: lightgrey;\r\n    border-radius: 25px;\r\n    border: 0px solid #000101;\r\n  }\r\n  &::-moz-range-track {\r\n    width: 100%;\r\n    height: 10px;\r\n    cursor: pointer;\r\n    box-shadow: 0px 0px 0px #000000, 0px 0px 0px #0d0d0d;\r\n    background: lightgrey;\r\n    border-radius: 25px;\r\n    border: 0px solid #000101;\r\n  }\r\n  &:focus::-moz-range-track {\r\n    outline: none;\r\n    background: linear-gradient(\r\n      225deg,\r\n      rgb(63, 63, 63) 0%,\r\n      rgb(141, 141, 141) 25%,\r\n      rgb(255, 255, 255) 50%,\r\n      rgb(141, 141, 141) 75%,\r\n      rgb(63, 63, 63) 100%\r\n    );\r\n    border: solid grey 2px;\r\n  }\r\n  &:focus::-webkit-slider-runnable-track {\r\n    outline: none;\r\n    background: linear-gradient(\r\n      225deg,\r\n      rgb(63, 63, 63) 0%,\r\n      rgb(141, 141, 141) 25%,\r\n      rgb(255, 255, 255) 50%,\r\n      rgb(141, 141, 141) 75%,\r\n      rgb(63, 63, 63) 100%\r\n    );\r\n    border: solid grey 2px;\r\n  }\r\n` as StyledComponent<\"input\", any, { orient: string }, never>\r\n\r\nexport const Slider: React.FC<SliderProps> = ({\r\n  min,\r\n  max,\r\n  currentValue,\r\n  id,\r\n  label,\r\n  vertical,\r\n  simpleThumb,\r\n  setFunction,\r\n  className,\r\n}) => {\r\n  return (\r\n    <div className={className}>\r\n      <label htmlFor={id}>{label}</label>\r\n      <SliderInputRange\r\n        className={simpleThumb ? \"simpleThumb\" : \"\"}\r\n        id={id}\r\n        type=\"range\"\r\n        min={min}\r\n        max={max}\r\n        value={currentValue}\r\n        orient={vertical ? \"vertical\" : \"horizontal\"}\r\n        onChange={({ currentTarget: { value } }) => {\r\n          const convertedValue = Number.parseInt(value)\r\n          if (!Number.isNaN(convertedValue)) {\r\n            setFunction(convertedValue)\r\n          }\r\n        }}\r\n      />\r\n    </div>\r\n  )\r\n}\r\n","import React, { useRef } from \"react\"\r\nimport styled from \"styled-components\"\r\nimport produce, { Draft } from \"immer\"\r\n\r\ninterface SliderActionsMouseMove {\r\n  type: \"DIRECT_UPDATE\"\r\n  isMinThumb: boolean\r\n  newValue: number\r\n}\r\ninterface SliderActionsKeyDown {\r\n  type: \"KEY_DOWN\"\r\n  isMinThumb: boolean\r\n  key: string\r\n}\r\ntype SliderActions = SliderActionsKeyDown | SliderActionsMouseMove\r\n\r\ninterface SliderState {\r\n  currentMin: number\r\n  currentMax: number\r\n  max: number\r\n  min: number\r\n}\r\n\r\nexport const sliderReducer: React.Reducer<SliderState, SliderActions> = produce(\r\n  (draft: Draft<SliderState>, action: SliderActions) => {\r\n    const { currentMax, currentMin, min, max } = draft\r\n    function increaseCurrent(\r\n      amount: number,\r\n      toUpdate: number,\r\n      noMoreThan: number\r\n    ) {\r\n      return toUpdate + amount >= noMoreThan ? noMoreThan : toUpdate + amount\r\n    }\r\n    function decreaseCurrent(\r\n      amount: number,\r\n      toUpdate: number,\r\n      noLessThan: number\r\n    ) {\r\n      return toUpdate - amount <= noLessThan ? noLessThan : toUpdate - amount\r\n    }\r\n    function constrainValue(value: number, min: number, max: number) {\r\n      if (value <= min) return min\r\n      if (value >= max) return max\r\n      return value\r\n    }\r\n    switch (action.type) {\r\n      case \"KEY_DOWN\": {\r\n        switch (action.key) {\r\n          case \"ArrowRight\":\r\n          case \"ArrowUp\": {\r\n            if (action.isMinThumb) {\r\n              draft.currentMin = increaseCurrent(1, currentMin, currentMax)\r\n            } else {\r\n              draft.currentMax = increaseCurrent(1, currentMax, max)\r\n            }\r\n            break\r\n          }\r\n          case \"ArrowLeft\":\r\n          case \"ArrowDown\": {\r\n            if (action.isMinThumb) {\r\n              draft.currentMin = decreaseCurrent(1, currentMin, min)\r\n            } else {\r\n              draft.currentMax = decreaseCurrent(1, currentMax, currentMin)\r\n            }\r\n            break\r\n          }\r\n          case \"PageUp\": {\r\n            if (action.isMinThumb) {\r\n              draft.currentMin = increaseCurrent(5, currentMin, currentMax)\r\n            } else {\r\n              draft.currentMax = increaseCurrent(5, currentMax, max)\r\n            }\r\n            break\r\n          }\r\n          case \"PageDown\": {\r\n            if (action.isMinThumb) {\r\n              draft.currentMin = decreaseCurrent(5, currentMin, min)\r\n            } else {\r\n              draft.currentMax = decreaseCurrent(5, currentMax, currentMin)\r\n            }\r\n            break\r\n          }\r\n          case \"Home\": {\r\n            if (action.isMinThumb) {\r\n              draft.currentMin = draft.min\r\n            } else {\r\n              draft.currentMax = draft.currentMin\r\n            }\r\n            break\r\n          }\r\n          case \"End\": {\r\n            if (action.isMinThumb) {\r\n              draft.currentMin = draft.currentMax\r\n            } else {\r\n              draft.currentMax = draft.max\r\n            }\r\n            break\r\n          }\r\n        }\r\n        break\r\n      }\r\n      case \"DIRECT_UPDATE\": {\r\n        if (action.isMinThumb) {\r\n          draft.currentMin = constrainValue(action.newValue, min, currentMax)\r\n        } else {\r\n          draft.currentMax = constrainValue(action.newValue, currentMin, max)\r\n        }\r\n      }\r\n    }\r\n  }\r\n)\r\n\r\ninterface handlePointerDragOptions {\r\n  event: React.MouseEvent<HTMLDivElement, PointerEvent>\r\n  max: number\r\n  min: number\r\n  dispatch: React.Dispatch<SliderActions>\r\n  sliderRailRef: React.RefObject<HTMLDivElement>\r\n  isMinThumb: boolean\r\n}\r\nconst handlePointerDrag = ({\r\n  event,\r\n  min,\r\n  max,\r\n  sliderRailRef,\r\n  isMinThumb,\r\n  dispatch,\r\n}: handlePointerDragOptions) => {\r\n  function dispatchChange(diffX: number) {\r\n    const offsetWidth = sliderRailRef?.current?.offsetWidth\r\n      ? sliderRailRef.current.offsetWidth\r\n      : 0\r\n    const newValue = Math.round(min + ((max - min) * diffX) / offsetWidth)\r\n    dispatch({ type: \"DIRECT_UPDATE\", isMinThumb, newValue })\r\n  }\r\n\r\n  function handlePointerMove(event: PointerEvent) {\r\n    if (event.pointerType === \"touch\") return\r\n    const offsetLeft = sliderRailRef?.current?.offsetLeft\r\n      ? sliderRailRef.current.offsetLeft\r\n      : 0\r\n    const diffX = (event.pageX | event.clientX) - offsetLeft\r\n    dispatchChange(diffX)\r\n    event.preventDefault()\r\n    event.stopPropagation()\r\n  }\r\n  function handleTouchMove(event: TouchEvent) {\r\n    const offsetLeft = sliderRailRef?.current?.offsetLeft\r\n      ? sliderRailRef.current.offsetLeft\r\n      : 0\r\n    const diffX = event.touches[0].pageX - offsetLeft\r\n    dispatchChange(diffX)\r\n    event.preventDefault()\r\n    event.stopPropagation()\r\n  }\r\n\r\n  function handelCleanUp() {\r\n    if (sliderRailRef?.current) {\r\n      sliderRailRef.current.removeEventListener(\"touchmove\", handleTouchMove)\r\n    }\r\n\r\n    document.removeEventListener(\"pointermove\", handlePointerMove)\r\n    document.removeEventListener(\"pointerup\", handelCleanUp)\r\n    document.removeEventListener(\"pointercancel\", handelCleanUp)\r\n  }\r\n  if (sliderRailRef?.current) {\r\n    sliderRailRef.current.addEventListener(\"touchmove\", handleTouchMove)\r\n  }\r\n  document.addEventListener(\"pointermove\", handlePointerMove)\r\n  document.addEventListener(\"pointerup\", handelCleanUp)\r\n  document.addEventListener(\"pointercancel\", handelCleanUp)\r\n\r\n  event.preventDefault()\r\n  event.stopPropagation()\r\n\r\n  event.currentTarget.focus()\r\n}\r\n\r\nconst SliderWrappingDiv = styled.div`\r\n  display: grid;\r\n  grid-template-areas:\r\n    \"label . . .\"\r\n    \"bar bar bar bar\"\r\n    \"min min max max\";\r\n  justify-items: center;\r\n  grid-gap: 10px;\r\n  width: 100%;\r\n`\r\n\r\nconst SliderValueDiv = styled.div<{ area: string }>`\r\n  font-size: 16px;\r\n  font-weight: bold;\r\n  grid-area: ${({ area }) => area};\r\n`\r\n\r\nconst SliderLabelH3 = styled.h3`\r\n  grid-area: label;\r\n  justify-self: left;\r\n`\r\nconst SliderRailDiv = styled.div`\r\n  display: flex;\r\n  grid-area: bar;\r\n  align-items: center;\r\n  height: 10px;\r\n  width: calc(100% - 60px);\r\n  margin: 0 35px;\r\n  border-radius: 20px;\r\n  background-color: lightgrey;\r\n  align-self: center;\r\n  position: relative;\r\n  &.focus {\r\n    outline: none;\r\n    background: linear-gradient(\r\n      225deg,\r\n      rgb(63, 63, 63) 0%,\r\n      rgb(141, 141, 141) 25%,\r\n      rgb(255, 255, 255) 50%,\r\n      rgb(141, 141, 141) 75%,\r\n      rgb(63, 63, 63) 100%\r\n    );\r\n    border: solid grey 2px;\r\n  }\r\n`\r\n\r\ninterface SliderRailThumbProps {\r\n  className?: string\r\n  sliderDispatch: React.Dispatch<SliderActions>\r\n  isMinThumb: boolean\r\n  sliderRailRef: React.RefObject<HTMLDivElement>\r\n  sliderState: SliderState\r\n  label: string\r\n}\r\n\r\nconst SliderRailThumb: React.FC<SliderRailThumbProps> = ({\r\n  className,\r\n  sliderDispatch,\r\n  sliderRailRef,\r\n  label,\r\n  sliderState,\r\n  isMinThumb,\r\n}) => {\r\n  const { currentMin, min, max, currentMax } = sliderState\r\n  const style = {} as { left?: string; right?: string }\r\n\r\n  // Convert min/max range to 0 -> 100 range\r\n  const maxOldValue = currentMax\r\n  const minOldValue = currentMin\r\n  const oldMin = min\r\n  const oldMax = max\r\n  const newMin = 0\r\n  const newMax = 100\r\n\r\n  const minNewValue =\r\n    ((minOldValue - oldMin) * (newMax - newMin)) / (oldMax - oldMin) + newMin\r\n  const maxNewValue =\r\n    ((maxOldValue - oldMin) * (newMax - newMin)) / (oldMax - oldMin) + newMin\r\n\r\n  if (isMinThumb) {\r\n    style.left = `calc(${minNewValue}% - 20px)`\r\n  } else {\r\n    style.right = `calc(${100 - maxNewValue}% - 20px)`\r\n  }\r\n  return (\r\n    <div\r\n      className={className}\r\n      onKeyDown={(event) => {\r\n        sliderDispatch({\r\n          type: \"KEY_DOWN\",\r\n          isMinThumb,\r\n          key: event.key,\r\n        })\r\n      }}\r\n      onPointerDown={(event) => {\r\n        handlePointerDrag({\r\n          event,\r\n          min,\r\n          max,\r\n          dispatch: sliderDispatch,\r\n          sliderRailRef,\r\n          isMinThumb,\r\n        })\r\n      }}\r\n      onFocus={(event) => {\r\n        event.currentTarget.classList.add(\"focus\")\r\n        if (sliderRailRef?.current) {\r\n          sliderRailRef.current.classList.add(\"focus\")\r\n        }\r\n      }}\r\n      onBlur={(event) => {\r\n        event.currentTarget.classList.remove(\"focus\")\r\n        if (sliderRailRef?.current) {\r\n          sliderRailRef.current.classList.remove(\"focus\")\r\n        }\r\n      }}\r\n      style={style}\r\n      role=\"slider\"\r\n      tabIndex={0}\r\n      aria-valuemin={min}\r\n      aria-valuenow={isMinThumb ? currentMin : currentMax}\r\n      aria-valuetext={`${isMinThumb ? currentMin : currentMax}`}\r\n      aria-valuemax={max}\r\n      aria-label={`${label} ${isMinThumb ? \"Minimum\" : \"Maximum\"}`}\r\n    />\r\n  )\r\n}\r\n\r\nconst SliderRailThumbDiv = styled(SliderRailThumb)`\r\n  position: absolute;\r\n  width: 30px;\r\n  height: 30px;\r\n  border: solid darkgrey 2px;\r\n  background: darkgray;\r\n  border-radius: 50% 50% 100% 0% / 100% 50% 50% 0%;\r\n  &.focus {\r\n    background: linear-gradient(\r\n      225deg,\r\n      rgb(63, 63, 63) 0%,\r\n      rgb(141, 141, 141) 34%,\r\n      rgb(255, 255, 255) 100%\r\n    );\r\n    outline: none;\r\n    border: solid grey 2px;\r\n  }\r\n`\r\nconst SliderRailThumbDivMin = styled(SliderRailThumbDiv)`\r\n  transform: translateX(-20px) rotate(225deg);\r\n`\r\nconst SliderRailThumbDivMax = styled(SliderRailThumbDiv)`\r\n  transform: translateX(20px) rotate(45deg);\r\n`\r\n\r\ninterface MultiSliderProps {\r\n  label: string\r\n  sliderState: SliderState\r\n  sliderReducerDispatch: React.Dispatch<SliderActions>\r\n}\r\n\r\nexport const MultiSlider: React.FC<MultiSliderProps> = ({\r\n  label,\r\n  sliderState,\r\n  sliderReducerDispatch,\r\n}) => {\r\n  const sliderRailRef = useRef<HTMLDivElement>(null)\r\n  return (\r\n    <SliderWrappingDiv>\r\n      <SliderLabelH3>{label}</SliderLabelH3>\r\n      <SliderRailDiv ref={sliderRailRef}>\r\n        <SliderRailThumbDivMin\r\n          sliderDispatch={sliderReducerDispatch}\r\n          isMinThumb={true}\r\n          sliderRailRef={sliderRailRef}\r\n          sliderState={sliderState}\r\n          label={label}\r\n        />\r\n        <SliderRailThumbDivMax\r\n          sliderDispatch={sliderReducerDispatch}\r\n          isMinThumb={false}\r\n          sliderRailRef={sliderRailRef}\r\n          sliderState={sliderState}\r\n          label={label}\r\n        />\r\n      </SliderRailDiv>\r\n      <SliderValueDiv area=\"min\">\r\n        <span>Min {sliderState.currentMin}</span>\r\n      </SliderValueDiv>\r\n      <SliderValueDiv area=\"max\">\r\n        <span>Max {sliderState.currentMax}</span>\r\n      </SliderValueDiv>\r\n    </SliderWrappingDiv>\r\n  )\r\n}\r\n","import React from \"react\"\r\nimport styled from \"styled-components\"\r\n\r\nconst ColourPickerWrapperDiv = styled.div`\r\n  width: 100%;\r\n  overflow: hidden;\r\n`\r\nconst ColourPickerWrapperUl = styled.ul`\r\n  display: grid;\r\n  grid-gap: 15px;\r\n  grid-auto-flow: column;\r\n  grid-auto-columns: 150px;\r\n  max-width: 100vw;\r\n  padding: 10px 0px;\r\n  overflow-x: scroll;\r\n  margin: 5px 0 0 0;\r\n  padding: 10px 10px;\r\n  border-radius: 4px;\r\n  box-shadow: inset 0px 0px 9px -2px #404040;\r\n`\r\nconst ColourPickerLi = styled.li`\r\n  display: grid;\r\n  grid-gap: 10px;\r\n  grid-template-columns: 1fr;\r\n  grid-template-rows: 20px 35px 30px;\r\n`\r\nconst ColourPickerLabel = styled.label`\r\n  text-align: center;\r\n  align-self: center;\r\n`\r\nconst ColourPickerInput = styled.input`\r\n  box-sizing: border-box;\r\n  width: 100%;\r\n  height: 35px;\r\n  padding: 5px;\r\n  border-radius: 5px;\r\n`\r\nconst ColourPickerDeleteButton = styled.button`\r\n  border-radius: 5px;\r\n  padding: 5px;\r\n`\r\nconst ColourPickerAddButton = styled.button`\r\n  grid-row: 2/3;\r\n  width: 100%;\r\n  border-radius: 5px;\r\n`\r\n\r\ninterface ColourPickerProps {\r\n  maxColours: number\r\n  setFunction: React.Dispatch<React.SetStateAction<string[]>>\r\n  colours: string[]\r\n  label: string\r\n  id: string\r\n}\r\n\r\nexport const ColourPicker: React.FC<ColourPickerProps> = ({\r\n  maxColours,\r\n  setFunction,\r\n  colours,\r\n  label,\r\n  id,\r\n}) => {\r\n  return (\r\n    <ColourPickerWrapperDiv>\r\n      <h3 id={`colour-picker-${id}`}>{label}</h3>\r\n      <ColourPickerWrapperUl aria-labelledby={`colour-picker-${id}`}>\r\n        {colours.map((colour, index) => {\r\n          return (\r\n            <React.Fragment key={`${colour}-${index}`}>\r\n              <ColourPickerLi>\r\n                <ColourPickerLabel htmlFor={`${index}-${colour.substr(1)}`}>\r\n                  Colour {index + 1}\r\n                </ColourPickerLabel>\r\n                <ColourPickerInput\r\n                  id={`${index}-${colour.substr(1)}`}\r\n                  type=\"color\"\r\n                  defaultValue={colour}\r\n                  onBlur={({ currentTarget: { value } }) => {\r\n                    const newColours = [...colours]\r\n                    newColours[index] = value\r\n                    setFunction(newColours)\r\n                  }}\r\n                />\r\n                {colours.length !== 1 && (\r\n                  <ColourPickerDeleteButton\r\n                    type=\"button\"\r\n                    onClick={() => {\r\n                      const newColours = [...colours]\r\n                      newColours.splice(index, 1)\r\n                      setFunction(newColours)\r\n                    }}\r\n                  >\r\n                    Delete\r\n                  </ColourPickerDeleteButton>\r\n                )}\r\n              </ColourPickerLi>\r\n              {index + 1 === colours.length && colours.length < maxColours ? (\r\n                <ColourPickerLi>\r\n                  <ColourPickerAddButton\r\n                    type=\"button\"\r\n                    onClick={() => {\r\n                      const newColours = [...colours]\r\n                      newColours.push(\"#ffffff\")\r\n                      setFunction(newColours)\r\n                    }}\r\n                  >\r\n                    Add\r\n                  </ColourPickerAddButton>\r\n                </ColourPickerLi>\r\n              ) : null}\r\n            </React.Fragment>\r\n          )\r\n        })}\r\n      </ColourPickerWrapperUl>\r\n    </ColourPickerWrapperDiv>\r\n  )\r\n}\r\n","import React, { useRef } from \"react\"\r\nimport { Slider } from \"./Slider\"\r\nimport styled from \"styled-components\"\r\n\r\ninterface CoordinatePickerProps {\r\n  currentY: number\r\n  currentX: number\r\n  setYFunction: React.Dispatch<React.SetStateAction<number>>\r\n  setXFunction: React.Dispatch<React.SetStateAction<number>>\r\n  scrollingParentRef?: React.RefObject<HTMLDivElement>\r\n}\r\n\r\nconst CoordinatePickerWrappingDiv = styled.div`\r\n  display: grid;\r\n  grid-template-columns: 30px 1fr 1fr;\r\n  grid-template-rows: 1fr 1fr 30px;\r\n  width: 280px;\r\n  height: 280px;\r\n  margin: auto;\r\n`\r\nconst YSliderWrappingDiv = styled.div`\r\n  grid-column: 1/2;\r\n  grid-row: 1/3;\r\n  justify-self: center;\r\n  align-self: center;\r\n  text-align: center;\r\n`\r\nconst XSliderWrappingDiv = styled.div`\r\n  grid-column: 2/4;\r\n  grid-row: 3/4;\r\n  justify-self: center;\r\n  align-self: center;\r\n`\r\nconst XSlider = styled(Slider)`\r\n  display: grid;\r\n  grid-template-columns: 10px 1fr;\r\n  align-items: center;\r\n  grid-gap: 10px;\r\n  transform: translateX(-10px);\r\n`\r\nconst YSlider = styled(Slider)`\r\n  transform: translateY(-10px);\r\n`\r\n\r\nconst CoordinatePositionsDiv = styled.div`\r\n  grid-column: 1/2;\r\n  grid-row: 3/4;\r\n  justify-self: center;\r\n  align-self: center;\r\n  text-align: center;\r\n`\r\nconst CoordinatePanelDiv = styled.div`\r\n  background: lightgray;\r\n  grid-column: 2/4;\r\n  grid-row: 1/3;\r\n  position: relative;\r\n  border: 10px solid darkgrey;\r\n  &:before,\r\n  &:after {\r\n    position: absolute;\r\n    content: \"\";\r\n    border: 2px darkgrey dashed;\r\n  }\r\n  &:before {\r\n    width: 100%;\r\n    top: 50%;\r\n    transform: translateY(-2px);\r\n  }\r\n  &:after {\r\n    z-index: 0;\r\n    height: 100%;\r\n    right: 50%;\r\n    transform: translateX(2px);\r\n  }\r\n`\r\nconst CoordinateThumbDiv = styled.div`\r\n  position: absolute;\r\n  z-index: 1;\r\n  background: grey;\r\n  border-radius: 20px;\r\n  width: 20px;\r\n  height: 20px;\r\n  top: 0%;\r\n  right: 0%;\r\n  transform: translate(50%, -50%);\r\n  &.moving {\r\n    background: darkgrey;\r\n    border: solid 2px grey;\r\n    width: 18px;\r\n    height: 18px;\r\n  }\r\n`\r\n\r\ninterface getNewValueForRangeOptions {\r\n  oldValue: number\r\n  oldMin: number\r\n  oldMax: number\r\n  newMin: number\r\n  newMax: number\r\n}\r\n\r\nfunction getNewValueForRange({\r\n  oldValue,\r\n  oldMin,\r\n  oldMax,\r\n  newMin,\r\n  newMax,\r\n}: getNewValueForRangeOptions): number {\r\n  return ((oldValue - oldMin) * (newMin - newMax)) / (oldMax - oldMin) + newMax\r\n}\r\n\r\nexport const CoordinatePicker: React.FC<CoordinatePickerProps> = ({\r\n  currentY,\r\n  setYFunction,\r\n  currentX,\r\n  setXFunction,\r\n  scrollingParentRef,\r\n}) => {\r\n  const yToTopPosition = getNewValueForRange({\r\n    oldValue: currentY,\r\n    oldMin: -100,\r\n    oldMax: 100,\r\n    newMin: 0,\r\n    newMax: 100,\r\n  })\r\n  const xToTopPosition = getNewValueForRange({\r\n    oldValue: currentX,\r\n    oldMin: -100,\r\n    oldMax: 100,\r\n    newMin: 0,\r\n    newMax: 100,\r\n  })\r\n  const positionStyles = {\r\n    top: `${yToTopPosition}%`,\r\n    right: `${xToTopPosition}%`,\r\n  }\r\n\r\n  const coordinatePanel = useRef<HTMLDivElement>(null)\r\n\r\n  return (\r\n    <CoordinatePickerWrappingDiv>\r\n      <YSliderWrappingDiv>\r\n        <YSlider\r\n          max={100}\r\n          min={-100}\r\n          currentValue={currentY}\r\n          label=\"Y\"\r\n          id=\"y\"\r\n          simpleThumb={true}\r\n          vertical={true}\r\n          setFunction={setYFunction}\r\n        />\r\n      </YSliderWrappingDiv>\r\n      <CoordinatePositionsDiv>\r\n        <p>X:{currentX}</p>\r\n        <p>Y:{currentY}</p>\r\n      </CoordinatePositionsDiv>\r\n      <CoordinatePanelDiv ref={coordinatePanel}>\r\n        <CoordinateThumbDiv\r\n          style={positionStyles}\r\n          onPointerDown={(event) => {\r\n            event.preventDefault()\r\n            event.stopPropagation()\r\n\r\n            const elementClassList = event.currentTarget.classList\r\n            elementClassList.add(\"moving\")\r\n\r\n            function pointerMove(event: PointerEvent) {\r\n              if (coordinatePanel.current === null) return\r\n              const diffX =\r\n                (event.pageX | event.clientX) -\r\n                coordinatePanel.current.offsetLeft\r\n              const newX = Math.round(\r\n                -100 +\r\n                  ((100 - -100) * diffX) / coordinatePanel.current.offsetWidth\r\n              )\r\n              if (newX >= -100 && newX <= 100) {\r\n                setXFunction(newX)\r\n              } else if (newX >= -100) {\r\n                setXFunction(100)\r\n              } else if (newX <= 100) {\r\n                setXFunction(-100)\r\n              }\r\n              let diffY =\r\n                (event.pageY | event.clientY) -\r\n                coordinatePanel.current.offsetTop\r\n\r\n              if (scrollingParentRef?.current?.scrollTop) {\r\n                diffY = diffY + scrollingParentRef.current.scrollTop\r\n              }\r\n\r\n              const newY = Math.round(\r\n                100 +\r\n                  ((-100 - 100) * diffY) / coordinatePanel.current.offsetHeight\r\n              )\r\n              if (newY >= -100 && newY <= 100) {\r\n                setYFunction(newY)\r\n              } else if (newY >= -100) {\r\n                setYFunction(100)\r\n              } else if (newY <= 100) {\r\n                setYFunction(-100)\r\n              }\r\n            }\r\n\r\n            function pointerUp() {\r\n              elementClassList.remove(\"moving\")\r\n              document.removeEventListener(\"pointerup\", pointerUp)\r\n              document.removeEventListener(\"pointermove\", pointerMove)\r\n            }\r\n\r\n            document.addEventListener(\"pointerup\", pointerUp)\r\n            document.addEventListener(\"pointermove\", pointerMove)\r\n          }}\r\n        />\r\n      </CoordinatePanelDiv>\r\n      <XSliderWrappingDiv>\r\n        <XSlider\r\n          max={100}\r\n          min={-100}\r\n          currentValue={currentX}\r\n          label=\"X\"\r\n          id=\"x\"\r\n          simpleThumb={true}\r\n          setFunction={setXFunction}\r\n        />\r\n      </XSliderWrappingDiv>\r\n    </CoordinatePickerWrappingDiv>\r\n  )\r\n}\r\n","import React, {\r\n  useContext,\r\n  useState,\r\n  useEffect,\r\n  useReducer,\r\n  useRef,\r\n} from \"react\"\r\nimport styled from \"styled-components\"\r\n\r\nimport {\r\n  polygonGroupsStateContext,\r\n  polygonGroupsDispatchContext,\r\n} from \"reducer-contexts/polygon-groups\"\r\nimport { navigationStateContext } from \"reducer-contexts/navigation\"\r\nimport { generatePolygonRingSketch } from \"polygon-logic/polygon-p5-draw\"\r\n\r\nimport { P5Canvas } from \"components/P5Canvas\"\r\nimport { ToggleSwitch } from \"components/ToggleSwitch\"\r\nimport { Slider } from \"components/Slider\"\r\nimport { MultiSlider, sliderReducer } from \"components/MultiSlider\"\r\nimport { ColourPicker } from \"components/ColourPicker\"\r\nimport { CoordinatePicker } from \"components/CoordinatePicker\"\r\n\r\nimport rotatingDirection from \"../rotating-ring.svg\"\r\n\r\nconst PolygonPageWrappingDiv = styled.div`\r\n  display: grid;\r\n  grid-template-rows: 200px calc(90vh - 210px);\r\n  grid-template-columns: 100vw;\r\n  grid-gap: 10px;\r\n  justify-content: center;\r\n`\r\n\r\nconst PolygonCanvasWrappingDiv = styled.div`\r\n  display: grid;\r\n  grid-template-columns: 200px 100px;\r\n  grid-gap: 10px;\r\n  justify-content: center;\r\n`\r\n\r\nconst PolygonCanvasDiv = styled.div``\r\n\r\nconst PolygonRandomizeButton = styled.button`\r\n  height: 50px;\r\n  border-radius: 5px;\r\n  align-self: center;\r\n`\r\n\r\nconst PolygonOptionsOverflowDiv = styled.div`\r\n  overflow-y: scroll;\r\n  overflow-x: hidden;\r\n  display: grid;\r\n  grid-gap: 10px;\r\n  grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));\r\n  border-radius: 8px;\r\n  box-shadow: inset 0px 0px 9px -2px #404040;\r\n  margin: 10px;\r\n  padding: 10px;\r\n`\r\n\r\nexport const PolygonDisplay = () => {\r\n  const polygonGroupsState = useContext(polygonGroupsStateContext)\r\n  const polygonGroupsDispatch = useContext(polygonGroupsDispatchContext)\r\n  const navigationState = useContext(navigationStateContext)\r\n  const scrollingElementRef = useRef<HTMLDivElement>(null)\r\n\r\n  const polygonToDisplay =\r\n    polygonGroupsState[navigationState.currentGroup].rings[\r\n      navigationState.currentPolygon\r\n    ]\r\n  const { scale, rotation, dots, sides, position } = polygonToDisplay\r\n  return (\r\n    <PolygonPageWrappingDiv>\r\n      <PolygonCanvasWrappingDiv>\r\n        <PolygonCanvasDiv\r\n          aria-label={`Ring ${navigationState.currentPolygon} Canvas`}\r\n        >\r\n          <P5Canvas\r\n            sketch={generatePolygonRingSketch(\r\n              polygonToDisplay,\r\n              {\r\n                width: 200,\r\n                height: 200,\r\n              },\r\n              0.2\r\n            )}\r\n          />\r\n        </PolygonCanvasDiv>\r\n        <PolygonRandomizeButton\r\n          type=\"button\"\r\n          onClick={() => {\r\n            polygonGroupsDispatch({\r\n              type: \"RANDOMIZE_POLYGON\",\r\n              group: navigationState.currentGroup,\r\n              polygon: navigationState.currentPolygon,\r\n            })\r\n          }}\r\n        >\r\n          Randomize\r\n        </PolygonRandomizeButton>\r\n      </PolygonCanvasWrappingDiv>\r\n      <PolygonOptionsOverflowDiv ref={scrollingElementRef}>\r\n        <PolygonRotationControls\r\n          key={`${rotation.speed}-${rotation.enabled}-${rotation.clockwise}`}\r\n        />\r\n        <PolygonScaleControls\r\n          key={`${scale.enabled}-${scale.range.min}-${scale.range.max}-${scale.speed}`}\r\n        />\r\n        <PolygonDotsControls\r\n          key={`${dots.enabled}-${dots.size}-${\r\n            dots.strokeWidth\r\n          }-${dots.strokeColours.join(\"\")}-${dots.fillColours.join(\"\")}`}\r\n        />\r\n        <PolygonSidesControls\r\n          key={`${sides.enabled}-${sides.amount}-${\r\n            sides.strokeWidth\r\n          }-${sides.colours.join(\"\")}`}\r\n        />\r\n        <PolygonPositionControls\r\n          key={`${position.x}-${position.y}`}\r\n          scrollingParentRef={scrollingElementRef}\r\n        />\r\n      </PolygonOptionsOverflowDiv>\r\n    </PolygonPageWrappingDiv>\r\n  )\r\n}\r\n\r\nconst PolygonCardDiv = styled.div`\r\n  border: 1px solid grey;\r\n  border-radius: 10px;\r\n  display: grid;\r\n  grid-auto-rows: min-content;\r\n  grid-gap: 10px;\r\n  padding: 10px;\r\n`\r\n\r\nconst PolygonCardH2 = styled.h2`\r\n  font-size: 20px;\r\n  font-weight: bold;\r\n`\r\nconst PolygonCardButtonContainingDiv = styled.div`\r\n  display: grid;\r\n  grid-gap: 10px;\r\n  grid-auto-flow: column;\r\n`\r\n\r\nconst PolygonCardButton = styled.button`\r\n  height: 50px;\r\n  border-radius: 5px;\r\n`\r\nconst PolygonCardUpdateButton = styled(PolygonCardButton)``\r\n\r\nconst PolygonCardRandomizeButton = styled(PolygonCardButton)``\r\n\r\nexport const PolygonControlsWrapper: React.FC<{\r\n  title: string\r\n  updateDispatch: Function\r\n  randomizeDispatch?: Function\r\n  canUpdate: boolean\r\n}> = ({ children, title, updateDispatch, randomizeDispatch, canUpdate }) => {\r\n  return (\r\n    <PolygonCardDiv>\r\n      <PolygonCardH2>{title}</PolygonCardH2>\r\n      {children}\r\n      <PolygonCardButtonContainingDiv>\r\n        <PolygonCardUpdateButton\r\n          disabled={!canUpdate}\r\n          onClick={() => {\r\n            updateDispatch()\r\n          }}\r\n        >\r\n          Update\r\n        </PolygonCardUpdateButton>\r\n        {randomizeDispatch && (\r\n          <PolygonCardRandomizeButton\r\n            onClick={() => {\r\n              randomizeDispatch()\r\n            }}\r\n          >\r\n            Randomize\r\n          </PolygonCardRandomizeButton>\r\n        )}\r\n      </PolygonCardButtonContainingDiv>\r\n    </PolygonCardDiv>\r\n  )\r\n}\r\n\r\nexport const PolygonRotationControls: React.FC = () => {\r\n  const polygonGroupsState = useContext(polygonGroupsStateContext)\r\n  const polygonGroupsDispatch = useContext(polygonGroupsDispatchContext)\r\n  const navigationState = useContext(navigationStateContext)\r\n\r\n  const { rotation } = polygonGroupsState[navigationState.currentGroup].rings[\r\n    navigationState.currentPolygon\r\n  ]\r\n\r\n  const [speed, setRotationSpeed] = useState(rotation.speed)\r\n  const [enabled, setEnabled] = useState(rotation.enabled)\r\n  const [clockwise, setClockwise] = useState(rotation.clockwise)\r\n  const [canUpdate, setCanUpdate] = useState(false)\r\n\r\n  useEffect(() => {\r\n    if (\r\n      rotation.speed !== speed ||\r\n      rotation.enabled !== enabled ||\r\n      rotation.clockwise !== clockwise\r\n    ) {\r\n      setCanUpdate(true)\r\n    }\r\n  }, [speed, enabled, clockwise, rotation])\r\n\r\n  const updateDispatch = () => {\r\n    setCanUpdate(false)\r\n    polygonGroupsDispatch({\r\n      type: \"UPDATE_POLYGON_ROTATION\",\r\n      group: navigationState.currentGroup,\r\n      polygon: navigationState.currentPolygon,\r\n      rotation: { clockwise, enabled, speed },\r\n    })\r\n  }\r\n  const randomizeDispatch = () => {\r\n    polygonGroupsDispatch({\r\n      type: \"RANDOMIZE_POLYGON_ROTATION\",\r\n      group: navigationState.currentGroup,\r\n      polygon: navigationState.currentPolygon,\r\n    })\r\n  }\r\n  return (\r\n    <PolygonControlsWrapper\r\n      updateDispatch={updateDispatch}\r\n      randomizeDispatch={randomizeDispatch}\r\n      canUpdate={canUpdate}\r\n      title=\"Rotation\"\r\n    >\r\n      <ToggleSwitch\r\n        label=\"Enable\"\r\n        id=\"rotation-enabled\"\r\n        checked={enabled}\r\n        setFunction={setEnabled}\r\n        checkedText={{ checked: \"OFF\", unchecked: \"ON\" }}\r\n      />\r\n      <ToggleSwitch\r\n        label=\"Clockwise\"\r\n        id=\"rotation-clockwise\"\r\n        checked={clockwise}\r\n        setFunction={setClockwise}\r\n        svgBackground={rotatingDirection}\r\n        transformFlip={true}\r\n      />\r\n      <Slider\r\n        label=\"Speed\"\r\n        id=\"rotation-speed\"\r\n        max={20}\r\n        min={0}\r\n        currentValue={speed}\r\n        setFunction={setRotationSpeed}\r\n      />\r\n    </PolygonControlsWrapper>\r\n  )\r\n}\r\nexport const PolygonScaleControls: React.FC = () => {\r\n  const polygonGroupsState = useContext(polygonGroupsStateContext)\r\n  const polygonGroupsDispatch = useContext(polygonGroupsDispatchContext)\r\n  const navigationState = useContext(navigationStateContext)\r\n\r\n  const { scale } = polygonGroupsState[navigationState.currentGroup].rings[\r\n    navigationState.currentPolygon\r\n  ]\r\n\r\n  const [canUpdate, setCanUpdate] = useState(false)\r\n  const [enabled, setEnabled] = useState(scale.enabled)\r\n  const [speed, setSpeed] = useState(scale.speed)\r\n\r\n  const rangeInitialState = {\r\n    min: 0,\r\n    max: 500,\r\n    currentMin: scale.range.min,\r\n    currentMax: scale.range.max,\r\n  }\r\n  const [rangeState, rangeDispatch] = useReducer(\r\n    sliderReducer,\r\n    rangeInitialState\r\n  )\r\n  useEffect(() => {\r\n    if (\r\n      scale.speed !== speed ||\r\n      scale.enabled !== enabled ||\r\n      scale.range.min !== rangeState.currentMin ||\r\n      scale.range.max !== rangeState.currentMax\r\n    ) {\r\n      setCanUpdate(true)\r\n    }\r\n  }, [speed, enabled, rangeState, scale])\r\n\r\n  const updateDispatch = () => {\r\n    setCanUpdate(false)\r\n    polygonGroupsDispatch({\r\n      type: \"UPDATE_POLYGON_SCALE\",\r\n      group: navigationState.currentGroup,\r\n      polygon: navigationState.currentPolygon,\r\n      scale: {\r\n        enabled,\r\n        range: { min: rangeState.currentMin, max: rangeState.currentMax },\r\n        speed,\r\n      },\r\n    })\r\n  }\r\n  const randomizeDispatch = () => {\r\n    polygonGroupsDispatch({\r\n      type: \"RANDOMIZE_POLYGON_SCALE\",\r\n      group: navigationState.currentGroup,\r\n      polygon: navigationState.currentPolygon,\r\n    })\r\n  }\r\n  return (\r\n    <PolygonControlsWrapper\r\n      title=\"Scale\"\r\n      updateDispatch={updateDispatch}\r\n      randomizeDispatch={randomizeDispatch}\r\n      canUpdate={canUpdate}\r\n    >\r\n      <ToggleSwitch\r\n        label=\"Enable\"\r\n        id=\"scale-enabled\"\r\n        checked={enabled}\r\n        setFunction={setEnabled}\r\n        checkedText={{ checked: \"OFF\", unchecked: \"ON\" }}\r\n      />\r\n      <Slider\r\n        label=\"Speed\"\r\n        id=\"scale-speed\"\r\n        max={20}\r\n        min={0}\r\n        currentValue={speed}\r\n        setFunction={setSpeed}\r\n      />\r\n      <MultiSlider\r\n        label=\"Size\"\r\n        sliderState={rangeState}\r\n        sliderReducerDispatch={rangeDispatch}\r\n      />\r\n    </PolygonControlsWrapper>\r\n  )\r\n}\r\nexport const PolygonDotsControls: React.FC = () => {\r\n  const polygonGroupsState = useContext(polygonGroupsStateContext)\r\n  const polygonGroupsDispatch = useContext(polygonGroupsDispatchContext)\r\n  const navigationState = useContext(navigationStateContext)\r\n\r\n  const { dots, sides } = polygonGroupsState[\r\n    navigationState.currentGroup\r\n  ].rings[navigationState.currentPolygon]\r\n\r\n  const [canUpdate, setCanUpdate] = useState(false)\r\n  const [enabled, setEnabled] = useState(dots.enabled)\r\n  const [size, setSize] = useState(dots.size)\r\n  const [strokeWidth, setStrokeWidth] = useState(dots.strokeWidth)\r\n  const [fillColours, setFillColours] = useState(dots.fillColours)\r\n  const [strokeColours, setStrokeColours] = useState(dots.strokeColours)\r\n\r\n  useEffect(() => {\r\n    if (\r\n      dots.enabled !== enabled ||\r\n      dots.size !== size ||\r\n      dots.strokeWidth !== strokeWidth ||\r\n      dots.fillColours.join(\"\") !== fillColours.join(\"\") ||\r\n      dots.strokeColours.join(\"\") !== strokeColours.join(\"\")\r\n    ) {\r\n      setCanUpdate(true)\r\n    }\r\n  }, [enabled, size, strokeWidth, dots, fillColours, strokeColours])\r\n\r\n  const updateDispatch = () => {\r\n    setCanUpdate(false)\r\n    polygonGroupsDispatch({\r\n      type: \"UPDATE_POLYGON_DOTS\",\r\n      group: navigationState.currentGroup,\r\n      polygon: navigationState.currentPolygon,\r\n      dots: { enabled, fillColours, size, strokeColours, strokeWidth },\r\n    })\r\n  }\r\n\r\n  const randomizeDispatch = () => {\r\n    polygonGroupsDispatch({\r\n      type: \"RANDOMIZE_POLYGON_DOTS\",\r\n      group: navigationState.currentGroup,\r\n      polygon: navigationState.currentPolygon,\r\n    })\r\n  }\r\n\r\n  return (\r\n    <PolygonControlsWrapper\r\n      updateDispatch={updateDispatch}\r\n      randomizeDispatch={randomizeDispatch}\r\n      title=\"Dots\"\r\n      canUpdate={canUpdate}\r\n    >\r\n      <ToggleSwitch\r\n        label=\"Enable\"\r\n        id=\"dots-enabled\"\r\n        checked={enabled}\r\n        setFunction={setEnabled}\r\n        checkedText={{ checked: \"OFF\", unchecked: \"ON\" }}\r\n      />\r\n      <Slider\r\n        label=\"Size\"\r\n        id=\"dots-size\"\r\n        max={20}\r\n        min={0}\r\n        currentValue={size}\r\n        setFunction={setSize}\r\n      />\r\n      <ColourPicker\r\n        label=\"Fill Colour\"\r\n        id=\"fill-colour\"\r\n        maxColours={sides.amount}\r\n        colours={fillColours}\r\n        setFunction={setFillColours}\r\n      />\r\n      <Slider\r\n        label=\"Stroke Width\"\r\n        id=\"dots-stroke-width\"\r\n        max={20}\r\n        min={0}\r\n        currentValue={strokeWidth}\r\n        setFunction={setStrokeWidth}\r\n      />\r\n      <ColourPicker\r\n        label=\"Stroke Colours\"\r\n        id=\"stroke-colour\"\r\n        maxColours={sides.amount}\r\n        colours={strokeColours}\r\n        setFunction={setStrokeColours}\r\n      />\r\n    </PolygonControlsWrapper>\r\n  )\r\n}\r\nexport const PolygonSidesControls: React.FC = () => {\r\n  const polygonGroupsState = useContext(polygonGroupsStateContext)\r\n  const polygonGroupsDispatch = useContext(polygonGroupsDispatchContext)\r\n  const navigationState = useContext(navigationStateContext)\r\n\r\n  const { sides } = polygonGroupsState[navigationState.currentGroup].rings[\r\n    navigationState.currentPolygon\r\n  ]\r\n\r\n  const [canUpdate, setCanUpdate] = useState(false)\r\n  const [enabled, setEnabled] = useState(sides.enabled)\r\n  const [amount, setAmount] = useState(sides.amount)\r\n  const [strokeWidth, setStrokeWidth] = useState(sides.strokeWidth)\r\n  const [colours, setColours] = useState(sides.colours)\r\n\r\n  useEffect(() => {\r\n    if (\r\n      sides.enabled !== enabled ||\r\n      sides.amount !== amount ||\r\n      sides.strokeWidth !== strokeWidth ||\r\n      sides.colours.join(\"\") !== colours.join(\"\")\r\n    ) {\r\n      setCanUpdate(true)\r\n    }\r\n  }, [enabled, amount, strokeWidth, sides, colours])\r\n\r\n  const randomizeDispatch = () => {\r\n    polygonGroupsDispatch({\r\n      type: \"RANDOMIZE_POLYGON_SIDES\",\r\n      group: navigationState.currentGroup,\r\n      polygon: navigationState.currentPolygon,\r\n    })\r\n  }\r\n\r\n  const updateDispatch = () => {\r\n    setCanUpdate(false)\r\n    polygonGroupsDispatch({\r\n      type: \"UPDATE_POLYGON_SIDES\",\r\n      group: navigationState.currentGroup,\r\n      polygon: navigationState.currentPolygon,\r\n      sides: { amount, colours, enabled, strokeWidth },\r\n    })\r\n  }\r\n  return (\r\n    <PolygonControlsWrapper\r\n      updateDispatch={updateDispatch}\r\n      randomizeDispatch={randomizeDispatch}\r\n      title={\"Sides\"}\r\n      canUpdate={canUpdate}\r\n    >\r\n      <ToggleSwitch\r\n        label=\"Enable\"\r\n        id=\"sides-enabled\"\r\n        checked={enabled}\r\n        setFunction={setEnabled}\r\n        checkedText={{ checked: \"OFF\", unchecked: \"ON\" }}\r\n      />\r\n      <Slider\r\n        label=\"Amount\"\r\n        id=\"sides-amount\"\r\n        max={20}\r\n        min={1}\r\n        currentValue={amount}\r\n        setFunction={setAmount}\r\n      />\r\n      <Slider\r\n        label=\"Stroke Width\"\r\n        id=\"sides-stroke-width\"\r\n        max={20}\r\n        min={0}\r\n        currentValue={strokeWidth}\r\n        setFunction={setStrokeWidth}\r\n      />\r\n      <ColourPicker\r\n        label=\"Colours\"\r\n        id=\"sides-colours\"\r\n        maxColours={sides.amount}\r\n        colours={colours}\r\n        setFunction={setColours}\r\n      />\r\n    </PolygonControlsWrapper>\r\n  )\r\n}\r\nexport const PolygonPositionControls: React.FC<{\r\n  scrollingParentRef?: React.RefObject<HTMLDivElement>\r\n}> = ({ scrollingParentRef }) => {\r\n  const polygonGroupsState = useContext(polygonGroupsStateContext)\r\n  const polygonGroupsDispatch = useContext(polygonGroupsDispatchContext)\r\n  const navigationState = useContext(navigationStateContext)\r\n\r\n  const { position } = polygonGroupsState[navigationState.currentGroup].rings[\r\n    navigationState.currentPolygon\r\n  ]\r\n\r\n  const [canUpdate, setCanUpdate] = useState(false)\r\n  const [x, setX] = useState(position.x)\r\n  const [y, setY] = useState(position.y)\r\n\r\n  useEffect(() => {\r\n    if (position.x !== x || position.y !== y) {\r\n      setCanUpdate(true)\r\n    }\r\n  }, [position, x, y])\r\n\r\n  const updateDispatch = () => {\r\n    setCanUpdate(false)\r\n    polygonGroupsDispatch({\r\n      type: \"UPDATE_POLYGON_POSITION\",\r\n      group: navigationState.currentGroup,\r\n      polygon: navigationState.currentPolygon,\r\n      position: { x, y },\r\n    })\r\n  }\r\n  return (\r\n    <PolygonControlsWrapper\r\n      updateDispatch={updateDispatch}\r\n      title={\"Position\"}\r\n      canUpdate={canUpdate}\r\n    >\r\n      <CoordinatePicker\r\n        currentX={x}\r\n        currentY={y}\r\n        setYFunction={setY}\r\n        setXFunction={setX}\r\n        scrollingParentRef={scrollingParentRef}\r\n      />\r\n    </PolygonControlsWrapper>\r\n  )\r\n}\r\n","import React, { useContext } from \"react\"\r\nimport styled from \"styled-components\"\r\n\r\nimport {\r\n  navigationStateContext,\r\n  navigationDispatchContext,\r\n} from \"reducer-contexts/navigation\"\r\n\r\nimport { polygonGroupsDispatchContext } from \"reducer-contexts/polygon-groups\"\r\n\r\nimport Screens from \"components/Screens\"\r\nimport { MainCanvas } from \"components/MainCanvas\"\r\nimport { GroupsDisplay } from \"components/GroupsDisplay\"\r\nimport { PolygonDisplay } from \"components/PolygonDisplay\"\r\n\r\nconst Main = styled.main`\r\n  display: grid;\r\n  grid-template-rows: minmax(100%, 100vh);\r\n  grid-template-columns: minmax(100%, 100vw);\r\n  overflow: hidden;\r\n`\r\n\r\nconst MainContent = styled(Screens)`\r\n  display: grid;\r\n  grid-template-rows: minmax(90%, 90vh) minmax(10%, 10vh);\r\n  grid-template-columns: minmax(100%, 100vw);\r\n  grid-row: 1;\r\n  grid-column: 1;\r\n`\r\n\r\nconst Navigation = styled.nav`\r\n  background-color: grey;\r\n  display: flex;\r\n  justify-content: center;\r\n  align-items: center;\r\n  height: 100%;\r\n  box-shadow: inset 0px 4px 9px -2px #404040;\r\n  button {\r\n    min-height: 50px;\r\n    border-radius: 5px;\r\n    margin: 5px;\r\n  }\r\n`\r\n\r\nconst App: React.FC = () => {\r\n  const navigationState = useContext(navigationStateContext)\r\n  const navigationDispatch = useContext(navigationDispatchContext)\r\n  const polygonGroupsDispatch = useContext(polygonGroupsDispatchContext)\r\n\r\n  const childMapping = {\r\n    MAIN_SCREEN: 1,\r\n    GROUP_SCREEN: 2,\r\n    POLYGON_SCREEN: 3,\r\n  }\r\n\r\n  return (\r\n    <Main>\r\n      <MainContent currentChild={childMapping[navigationState.currentScreen]}>\r\n        <>\r\n          <MainCanvas />\r\n          <Navigation>\r\n            <button\r\n              type=\"button\"\r\n              onClick={() => {\r\n                polygonGroupsDispatch({\r\n                  type: \"RANDOMIZE_POLYGON_RINGS\",\r\n                  group: 0,\r\n                })\r\n              }}\r\n            >\r\n              Randomize\r\n            </button>\r\n            <button\r\n              type=\"button\"\r\n              onClick={() => {\r\n                navigationDispatch({ type: \"GROUP_SCREEN\" })\r\n              }}\r\n            >\r\n              Edit Polygons\r\n            </button>\r\n            <button\r\n              type=\"button\"\r\n              onClick={() => {\r\n                console.log(\"TODO\")\r\n              }}\r\n            >\r\n              Edit Background\r\n            </button>\r\n          </Navigation>\r\n        </>\r\n        <>\r\n          <GroupsDisplay />\r\n          <Navigation>\r\n            <button\r\n              type=\"button\"\r\n              onClick={() => {\r\n                navigationDispatch({ type: \"MAIN_SCREEN\" })\r\n              }}\r\n            >\r\n              Home\r\n            </button>\r\n          </Navigation>\r\n        </>\r\n        <>\r\n          <PolygonDisplay />\r\n          <Navigation>\r\n            <button\r\n              type=\"button\"\r\n              onClick={() => {\r\n                navigationDispatch({ type: \"GROUP_SCREEN\" })\r\n              }}\r\n            >\r\n              Edit Polygons\r\n            </button>\r\n            <button\r\n              type=\"button\"\r\n              onClick={() => {\r\n                navigationDispatch({ type: \"MAIN_SCREEN\" })\r\n              }}\r\n            >\r\n              Home\r\n            </button>\r\n          </Navigation>\r\n        </>\r\n      </MainContent>\r\n    </Main>\r\n  )\r\n}\r\n\r\nexport default App\r\n","import React from \"react\"\r\nimport ReactDOM from \"react-dom\"\r\nimport * as serviceWorker from \"./serviceWorker\"\r\n\r\nimport App from \"components/App\"\r\nimport { NavigationContextWrapper } from \"reducer-contexts/navigation\"\r\nimport { PolygonGroupsContextWrapper } from \"reducer-contexts/polygon-groups\"\r\n\r\nimport \"./reset.css\"\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <PolygonGroupsContextWrapper>\r\n      <NavigationContextWrapper>\r\n        <App />\r\n      </NavigationContextWrapper>\r\n    </PolygonGroupsContextWrapper>\r\n  </React.StrictMode>,\r\n  document.getElementById(\"root\")\r\n)\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.register()\r\n"],"sourceRoot":""}